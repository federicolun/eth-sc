import {
  Chi,
  HashMD,
  Maj
} from "./chunk-3JROQMEL.js";
import {
  BaseError,
  LruMap,
  checksumAddress,
  concat,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  padLeft,
  padRight,
  size,
  size2,
  toHex
} from "./chunk-ZIKFXWAS.js";
import {
  clean,
  createHasher,
  rotl
} from "./chunk-CXAM2IBM.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-OS7ZSSJM.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R4 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R4 && typeof R4.apply === "function" ? R4.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R4 && typeof R4.ownKeys === "function") {
      ReflectOwnKeys = R4.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n5) {
      if (typeof n5 !== "number" || n5 < 0 || NumberIsNaN(n5)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n5 + ".");
      }
      this._maxListeners = n5;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i4 = 1; i4 < arguments.length; i4++) args.push(arguments[i4]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er3;
        if (args.length > 0)
          er3 = args[0];
        if (er3 instanceof Error) {
          throw er3;
        }
        var err = new Error("Unhandled error." + (er3 ? " (" + er3.message + ")" : ""));
        err.context = er3;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i4 = 0; i4 < len; ++i4)
          ReflectApply(listeners[i4], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m3;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m3 = _getMaxListeners(target);
        if (m3 > 0 && existing.length > m3 && !existing.warned) {
          existing.warned = true;
          var w3 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w3.name = "MaxListenersExceededWarning";
          w3.emitter = target;
          w3.type = type;
          w3.count = existing.length;
          ProcessEmitWarning(w3);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i4, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i4 = list.length - 1; i4 >= 0; i4--) {
          if (list[i4] === listener || list[i4].listener === listener) {
            originalListener = list[i4].listener;
            position = i4;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i4;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys2 = Object.keys(events);
        var key;
        for (i4 = 0; i4 < keys2.length; ++i4) {
          key = keys2[i4];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i4 = listeners.length - 1; i4 >= 0; i4--) {
          this.removeListener(type, listeners[i4]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n5) {
      var copy = new Array(n5);
      for (var i4 = 0; i4 < n5; ++i4)
        copy[i4] = arr[i4];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i4 = 0; i4 < ret.length; ++i4) {
        ret[i4] = arr[i4].listener || arr[i4];
      }
      return ret;
    }
    function once(emitter, name2) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name2, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
        if (name2 !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name2, listener);
        } else {
          emitter.on(name2, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name2, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name2, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d5, b4) {
  extendStatics(d5, b4);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __rest(s3, e2) {
  var t = {};
  for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3) && e2.indexOf(p3) < 0)
    t[p3] = s3[p3];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p3 = Object.getOwnPropertySymbols(s3); i4 < p3.length; i4++) {
      if (e2.indexOf(p3[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i4]))
        t[p3[i4]] = s3[p3[i4]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c6 = arguments.length, r3 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i4 = decorators.length - 1; i4 >= 0; i4--) if (d5 = decorators[i4]) r3 = (c6 < 3 ? d5(r3) : c6 > 3 ? d5(target, key, r3) : d5(target, key)) || r3;
  return c6 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P5, generator) {
  function adopt(value) {
    return value instanceof P5 ? value : new P5(function(resolve) {
      resolve(value);
    });
  }
  return new (P5 || (P5 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f7, y4, t, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n5) {
    return function(v5) {
      return step([n5, v5]);
    };
  }
  function step(op) {
    if (f7) throw new TypeError("Generator is already executing.");
    while (_3) try {
      if (f7 = 1, y4 && (t = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t = y4["return"]) && t.call(y4), 0) : y4.next) && !(t = t.call(y4, op[1])).done) return t;
      if (y4 = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _3.label++;
          return { value: op[1], done: false };
        case 5:
          _3.label++;
          y4 = op[1];
          op = [0];
          continue;
        case 7:
          op = _3.ops.pop();
          _3.trys.pop();
          continue;
        default:
          if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _3 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _3.label = op[1];
            break;
          }
          if (op[0] === 6 && _3.label < t[1]) {
            _3.label = t[1];
            t = op;
            break;
          }
          if (t && _3.label < t[2]) {
            _3.label = t[2];
            _3.ops.push(op);
            break;
          }
          if (t[2]) _3.ops.pop();
          _3.trys.pop();
          continue;
      }
      op = body.call(thisArg, _3);
    } catch (e2) {
      op = [6, e2];
      y4 = 0;
    } finally {
      f7 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o4, m3, k5, k22) {
  if (k22 === void 0) k22 = k5;
  o4[k22] = m3[k5];
}
function __exportStar(m3, exports) {
  for (var p3 in m3) if (p3 !== "default" && !exports.hasOwnProperty(p3)) exports[p3] = m3[p3];
}
function __values(o4) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o4[s3], i4 = 0;
  if (m3) return m3.call(o4);
  if (o4 && typeof o4.length === "number") return {
    next: function() {
      if (o4 && i4 >= o4.length) o4 = void 0;
      return { value: o4 && o4[i4++], done: !o4 };
    }
  };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o4, n5) {
  var m3 = typeof Symbol === "function" && o4[Symbol.iterator];
  if (!m3) return o4;
  var i4 = m3.call(o4), r3, ar3 = [], e2;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r3 = i4.next()).done) ar3.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i4["return"])) m3.call(i4);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar3;
}
function __spread() {
  for (var ar3 = [], i4 = 0; i4 < arguments.length; i4++)
    ar3 = ar3.concat(__read(arguments[i4]));
  return ar3;
}
function __spreadArrays() {
  for (var s3 = 0, i4 = 0, il = arguments.length; i4 < il; i4++) s3 += arguments[i4].length;
  for (var r3 = Array(s3), k5 = 0, i4 = 0; i4 < il; i4++)
    for (var a3 = arguments[i4], j3 = 0, jl = a3.length; j3 < jl; j3++, k5++)
      r3[k5] = a3[j3];
  return r3;
}
function __await(v5) {
  return this instanceof __await ? (this.v = v5, this) : new __await(v5);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g4 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
  return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4;
  function verb(n5) {
    if (g4[n5]) i4[n5] = function(v5) {
      return new Promise(function(a3, b4) {
        q2.push([n5, v5, a3, b4]) > 1 || resume(n5, v5);
      });
    };
  }
  function resume(n5, v5) {
    try {
      step(g4[n5](v5));
    } catch (e2) {
      settle(q2[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f7, v5) {
    if (f7(v5), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o4) {
  var i4, p3;
  return i4 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i4[Symbol.iterator] = function() {
    return this;
  }, i4;
  function verb(n5, f7) {
    i4[n5] = o4[n5] ? function(v5) {
      return (p3 = !p3) ? { value: __await(o4[n5](v5)), done: n5 === "return" } : f7 ? f7(v5) : v5;
    } : f7;
  }
}
function __asyncValues(o4) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m3 = o4[Symbol.asyncIterator], i4;
  return m3 ? m3.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4);
  function verb(n5) {
    i4[n5] = o4[n5] && function(v5) {
      return new Promise(function(resolve, reject) {
        v5 = o4[n5](v5), settle(resolve, reject, v5.done, v5.value);
      });
    };
  }
  function settle(resolve, reject, d5, v5) {
    Promise.resolve(v5).then(function(v6) {
      resolve({ value: v6, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k5 in mod) if (Object.hasOwnProperty.call(mod, k5)) result[k5] = mod[k5];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d5, b4) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b5) {
        d6.__proto__ = b5;
      } || function(d6, b5) {
        for (var p3 in b5) if (b5.hasOwnProperty(p3)) d6[p3] = b5[p3];
      };
      return extendStatics(d5, b4);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s3, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
          s3 = arguments[i4];
          for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3)) t[p3] = s3[p3];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o4) {
      try {
        return JSON.stringify(o4);
      } catch (e2) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f7, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f7 === "object" && f7 !== null) {
        var len = args.length + offset;
        if (len === 1) return f7;
        var objects = new Array(len);
        objects[0] = ss2(f7);
        for (var index = 1; index < len; index++) {
          objects[index] = ss2(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f7 !== "string") {
        return f7;
      }
      var argLen = args.length;
      if (argLen === 0) return f7;
      var str = "";
      var a3 = 1 - offset;
      var lastPos = -1;
      var flen = f7 && f7.length || 0;
      for (var i4 = 0; i4 < flen; ) {
        if (f7.charCodeAt(i4) === 37 && i4 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f7.charCodeAt(i4 + 1)) {
            case 100:
            case 102:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i4)
                str += f7.slice(lastPos, i4);
              str += Number(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 105:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i4)
                str += f7.slice(lastPos, i4);
              str += Math.floor(Number(args[a3]));
              lastPos = i4 + 2;
              i4++;
              break;
            case 79:
            case 111:
            case 106:
              if (a3 >= argLen)
                break;
              if (args[a3] === void 0) break;
              if (lastPos < i4)
                str += f7.slice(lastPos, i4);
              var type = typeof args[a3];
              if (type === "string") {
                str += "'" + args[a3] + "'";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              if (type === "function") {
                str += args[a3].name || "<anonymous>";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              str += ss2(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 115:
              if (a3 >= argLen)
                break;
              if (lastPos < i4)
                str += f7.slice(lastPos, i4);
              str += String(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 37:
              if (lastPos < i4)
                str += f7.slice(lastPos, i4);
              str += "%";
              lastPos = i4 + 2;
              i4++;
              a3--;
              break;
          }
          ++a3;
        }
        ++i4;
      }
      if (lastPos === -1)
        return f7;
      else if (lastPos < flen) {
        str += f7.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k5) {
          return k5 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log) logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2) logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback2) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback2] || noop;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop) return;
      logger[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts2 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i4 = 0; i4 < args.length; i4++) args[i4] = arguments[i4];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts2));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts: ts2,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts2) {
      if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o4 = {};
      if (ts2) {
        o4.time = ts2;
      }
      o4.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o4, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o4.msg = msg;
      return o4;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i4 in args) {
        if (stdErrSerialize && args[i4] instanceof Error) {
          args[i4] = pino.stdSerializers.err(args[i4]);
        } else if (typeof args[i4] === "object" && !Array.isArray(args[i4])) {
          for (const k5 in args[i4]) {
            if (serialize && serialize.indexOf(k5) > -1 && k5 in serializers) {
              args[i4][k5] = serializers[k5](args[i4][k5]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i4 = 1; i4 < args.length; i4++) {
          args[i4] = arguments[i4 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts2 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts2;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a3) {
      return a3;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o4) {
        return typeof o4 !== "undefined" && o4;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e2) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e2) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i4 = 0; i4 < links.length; i4++) {
          const link = links[i4];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i4 = 0; i4 < metaTags.length; i4++) {
          const tag = metaTags[i4];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex3(bytes) {
      return Array.prototype.map.call(bytes, function(n5) {
        return (n5 < 16 ? "0" : "") + n5.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size4) {
      let msg = "\n" + label + " = ";
      for (let i4 = 0; i4 < arr.length; i4 += 2) {
        if (size4 === 32) {
          msg += uint32ToHex(arr[i4]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i4 + 1]).toUpperCase();
        } else if (size4 === 64) {
          msg += uint32ToHex(arr[i4 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i4]).toUpperCase();
        } else throw new Error("Invalid size " + size4);
        if (i4 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i4 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N12, M5) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N12);
      for (let i4 = 0; i4 < N12; i4++) {
        input[i4] = i4 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i4 = 0; i4 < M5; i4++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms2 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms2 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N12 / (1 << 20) / (ms2 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex3,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v6, a3, b4) {
      const o0 = v6[a3] + v6[b4];
      let o1 = v6[a3 + 1] + v6[b4 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v6[a3] = o0;
      v6[a3 + 1] = o1;
    }
    function ADD64AC(v6, a3, b0, b1) {
      let o0 = v6[a3] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v6[a3 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v6[a3] = o0;
      v6[a3 + 1] = o1;
    }
    function B2B_GET32(arr, i4) {
      return arr[i4] ^ arr[i4 + 1] << 8 ^ arr[i4 + 2] << 16 ^ arr[i4 + 3] << 24;
    }
    function B2B_G(a3, b4, c6, d5, ix, iy) {
      const x0 = m3[ix];
      const x1 = m3[ix + 1];
      const y0 = m3[iy];
      const y1 = m3[iy + 1];
      ADD64AA(v5, a3, b4);
      ADD64AC(v5, a3, x0, x1);
      let xor0 = v5[d5] ^ v5[a3];
      let xor1 = v5[d5 + 1] ^ v5[a3 + 1];
      v5[d5] = xor1;
      v5[d5 + 1] = xor0;
      ADD64AA(v5, c6, d5);
      xor0 = v5[b4] ^ v5[c6];
      xor1 = v5[b4 + 1] ^ v5[c6 + 1];
      v5[b4] = xor0 >>> 24 ^ xor1 << 8;
      v5[b4 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v5, a3, b4);
      ADD64AC(v5, a3, y0, y1);
      xor0 = v5[d5] ^ v5[a3];
      xor1 = v5[d5 + 1] ^ v5[a3 + 1];
      v5[d5] = xor0 >>> 16 ^ xor1 << 16;
      v5[d5 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v5, c6, d5);
      xor0 = v5[b4] ^ v5[c6];
      xor1 = v5[b4 + 1] ^ v5[c6 + 1];
      v5[b4] = xor1 >>> 31 ^ xor0 << 1;
      v5[b4 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x5) {
        return x5 * 2;
      })
    );
    var v5 = new Uint32Array(32);
    var m3 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i4 = 0;
      for (i4 = 0; i4 < 16; i4++) {
        v5[i4] = ctx.h[i4];
        v5[i4 + 16] = BLAKE2B_IV32[i4];
      }
      v5[24] = v5[24] ^ ctx.t;
      v5[25] = v5[25] ^ ctx.t / 4294967296;
      if (last) {
        v5[28] = ~v5[28];
        v5[29] = ~v5[29];
      }
      for (i4 = 0; i4 < 32; i4++) {
        m3[i4] = B2B_GET32(ctx.b, 4 * i4);
      }
      for (i4 = 0; i4 < 12; i4++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i4 * 16 + 0], SIGMA82[i4 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i4 * 16 + 2], SIGMA82[i4 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i4 * 16 + 4], SIGMA82[i4 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i4 * 16 + 6], SIGMA82[i4 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i4 * 16 + 8], SIGMA82[i4 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i4 * 16 + 10], SIGMA82[i4 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i4 * 16 + 12], SIGMA82[i4 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i4 * 16 + 14], SIGMA82[i4 * 16 + 15]);
      }
      for (i4 = 0; i4 < 16; i4++) {
        ctx.h[i4] = ctx.h[i4] ^ v5[i4] ^ v5[i4 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i4 = 0; i4 < 16; i4++) {
        ctx.h[i4] = BLAKE2B_IV32[i4] ^ B2B_GET32(parameterBlock, i4 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i4 = 0; i4 < input.length; i4++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i4];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i4 = 0; i4 < ctx.outlen; i4++) {
        out[i4] = ctx.h[i4 >> 2] >> 8 * (i4 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v6, i4) {
      return v6[i4] ^ v6[i4 + 1] << 8 ^ v6[i4 + 2] << 16 ^ v6[i4 + 3] << 24;
    }
    function B2S_G(a3, b4, c6, d5, x5, y4) {
      v5[a3] = v5[a3] + v5[b4] + x5;
      v5[d5] = ROTR32(v5[d5] ^ v5[a3], 16);
      v5[c6] = v5[c6] + v5[d5];
      v5[b4] = ROTR32(v5[b4] ^ v5[c6], 12);
      v5[a3] = v5[a3] + v5[b4] + y4;
      v5[d5] = ROTR32(v5[d5] ^ v5[a3], 8);
      v5[c6] = v5[c6] + v5[d5];
      v5[b4] = ROTR32(v5[b4] ^ v5[c6], 7);
    }
    function ROTR32(x5, y4) {
      return x5 >>> y4 ^ x5 << 32 - y4;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v5 = new Uint32Array(16);
    var m3 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i4 = 0;
      for (i4 = 0; i4 < 8; i4++) {
        v5[i4] = ctx.h[i4];
        v5[i4 + 8] = BLAKE2S_IV[i4];
      }
      v5[12] ^= ctx.t;
      v5[13] ^= ctx.t / 4294967296;
      if (last) {
        v5[14] = ~v5[14];
      }
      for (i4 = 0; i4 < 16; i4++) {
        m3[i4] = B2S_GET32(ctx.b, 4 * i4);
      }
      for (i4 = 0; i4 < 10; i4++) {
        B2S_G(0, 4, 8, 12, m3[SIGMA[i4 * 16 + 0]], m3[SIGMA[i4 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m3[SIGMA[i4 * 16 + 2]], m3[SIGMA[i4 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m3[SIGMA[i4 * 16 + 4]], m3[SIGMA[i4 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m3[SIGMA[i4 * 16 + 6]], m3[SIGMA[i4 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m3[SIGMA[i4 * 16 + 8]], m3[SIGMA[i4 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m3[SIGMA[i4 * 16 + 10]], m3[SIGMA[i4 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m3[SIGMA[i4 * 16 + 12]], m3[SIGMA[i4 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m3[SIGMA[i4 * 16 + 14]], m3[SIGMA[i4 * 16 + 15]]);
      }
      for (i4 = 0; i4 < 8; i4++) {
        ctx.h[i4] ^= v5[i4] ^ v5[i4 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i4 = 0; i4 < input.length; i4++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i4];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i4 = 0; i4 < ctx.outlen; i4++) {
        out[i4] = ctx.h[i4 >> 2] >> 8 * (i4 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n = class extends IEvents {
  constructor(e2) {
    super();
  }
};
var s = import_time.FIVE_SECONDS;
var r = { pulse: "heartbeat_pulse" };
var i = class _i3 extends n {
  constructor(e2) {
    super(e2), this.events = new import_events.EventEmitter(), this.interval = s, this.interval = (e2 == null ? void 0 : e2.interval) || s;
  }
  static async init(e2) {
    const t = new _i3(e2);
    return await t.init(), t;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.zVDD2mZo.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c6) => c6.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a2;
  if (!key) {
    return "";
  }
  return ((_a2 = key.split("?")[0]) == null ? void 0 : _a2.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index = key.indexOf(":");
  while (index > -1) {
    substrCount++;
    index = key.indexOf(":", index + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r3) => r3.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r3) => r3.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a2;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a2 = mount.driver.flags) == null ? void 0 : _a2.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p3) => fullKey.startsWith(p3))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p3) => !p3.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m3) => {
          if (m3.driver.clear) {
            return asyncCall(m3.driver.clear, m3.relativeBase, opts);
          }
          if (m3.driver.removeItem) {
            const keys2 = await m3.driver.getKeys(m3.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m3.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a3, b4) => b4.length - a3.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a2, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a2 = context.unwatch)[base3]) == null ? void 0 : _b.call(_a2);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m3 = getMount(key);
      return {
        driver: m3.driver,
        base: m3.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m3) => ({
        driver: m3.driver,
        base: m3.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_3, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_3, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i4 = {}) => {
  const t = i4.base && i4.base.length > 0 ? `${i4.base}:` : "", e2 = (s3) => t + s3;
  let n5;
  return i4.dbName && i4.storeName && (n5 = createStore(i4.dbName, i4.storeName)), { name: x, options: i4, async hasItem(s3) {
    return !(typeof await get(e2(s3), n5) > "u");
  }, async getItem(s3) {
    return await get(e2(s3), n5) ?? null;
  }, setItem(s3, a3) {
    return set(e2(s3), a3, n5);
  }, removeItem(s3) {
    return del(e2(s3), n5);
  }, getKeys() {
    return keys(n5);
  }, clear() {
    return clear(n5);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
  }
  async getItem(t) {
    const e2 = await this.indexedDb.getItem(t);
    if (e2 !== null) return e2;
  }
  async setItem(t, e2) {
    await this.indexedDb.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    await this.indexedDb.removeItem(t);
  }
};
var l2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c = { exports: {} };
(function() {
  let i4;
  function t() {
  }
  i4 = t, i4.prototype.getItem = function(e2) {
    return this.hasOwnProperty(e2) ? String(this[e2]) : null;
  }, i4.prototype.setItem = function(e2, n5) {
    this[e2] = String(n5);
  }, i4.prototype.removeItem = function(e2) {
    delete this[e2];
  }, i4.prototype.clear = function() {
    const e2 = this;
    Object.keys(e2).forEach(function(n5) {
      e2[n5] = void 0, delete e2[n5];
    });
  }, i4.prototype.key = function(e2) {
    return e2 = e2 || 0, Object.keys(this)[e2];
  }, i4.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l2 < "u" && l2.localStorage ? c.exports = l2.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t();
})();
function k(i4) {
  var t;
  return [i4[0], safeJsonParse((t = i4[1]) != null ? t : "")];
}
var K = class {
  constructor() {
    this.localStorage = c.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t) {
    const e2 = this.localStorage.getItem(t);
    if (e2 !== null) return safeJsonParse(e2);
  }
  async setItem(t, e2) {
    this.localStorage.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    this.localStorage.removeItem(t);
  }
};
var N = "wc_storage_version";
var y = 1;
var O = async (i4, t, e2) => {
  const n5 = N, s3 = await t.getItem(n5);
  if (s3 && s3 >= y) {
    e2(t);
    return;
  }
  const a3 = await i4.getKeys();
  if (!a3.length) {
    e2(t);
    return;
  }
  const m3 = [];
  for (; a3.length; ) {
    const r3 = a3.shift();
    if (!r3) continue;
    const o4 = r3.toLowerCase();
    if (o4.includes("wc@") || o4.includes("walletconnect") || o4.includes("wc_") || o4.includes("wallet_connect")) {
      const f7 = await i4.getItem(r3);
      await t.setItem(r3, f7), m3.push(r3);
    }
  }
  await t.setItem(n5, y), e2(t), j(i4, m3);
};
var j = async (i4, t) => {
  t.length && t.forEach(async (e2) => {
    await i4.removeItem(e2);
  });
};
var h = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e2) => {
      this.storage = e2, this.initialized = true;
    };
    const t = new K();
    this.storage = t;
    try {
      const e2 = new _();
      O(t, e2, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t) {
    return await this.initialize(), this.storage.getItem(t);
  }
  async setItem(t, e2) {
    return await this.initialize(), this.storage.setItem(t, e2);
  }
  async removeItem(t) {
    return await this.initialize(), this.storage.removeItem(t);
  }
  async initialize() {
    this.initialized || await new Promise((t) => {
      const e2 = setInterval(() => {
        this.initialized && (clearInterval(e2), t());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c2 = { level: "info" };
var n2 = "custom_context";
var l3 = 1e3 * 1024;
var O2 = class {
  constructor(e2) {
    this.nodeValue = e2, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e2) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e2, this.sizeInBytes = 0;
  }
  append(e2) {
    const t = new O2(e2);
    if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e2} with size ${t.size}`);
    for (; this.size + t.size > this.maxSizeInBytes; ) this.shift();
    this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;
  }
  shift() {
    if (!this.head) return;
    const e2 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e2.size;
  }
  toArray() {
    const e2 = [];
    let t = this.head;
    for (; t !== null; ) e2.push(t.value), t = t.next;
    return e2;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e2 = this.head;
    return { next: () => {
      if (!e2) return { done: true, value: null };
      const t = e2.value;
      return e2 = e2.next, { done: false, value: t };
    } };
  }
};
var L = class {
  constructor(e2, t = l3) {
    this.level = e2 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e2, t) {
    t === import_pino.levels.values.error ? console.error(e2) : t === import_pino.levels.values.warn ? console.warn(e2) : t === import_pino.levels.values.debug ? console.debug(e2) : t === import_pino.levels.values.trace ? console.trace(e2) : console.log(e2);
  }
  appendToLogs(e2) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e2 }));
    const t = typeof e2 == "string" ? JSON.parse(e2).level : e2.level;
    t >= this.levelValue && this.forwardToConsole(e2, t);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e2) {
    const t = this.getLogArray();
    return t.push(safeJsonStringify({ extraMetadata: e2 })), new Blob(t, { type: "application/json" });
  }
};
var m = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
  downloadLogsBlobInBrowser(e2) {
    const t = URL.createObjectURL(this.logsToBlob(e2)), o4 = document.createElement("a");
    o4.href = t, o4.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o4), o4.click(), document.body.removeChild(o4), URL.revokeObjectURL(t);
  }
};
var B = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f = (r3, e2, t) => e2 in r3 ? x2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var i2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) T.call(e2, t) && f(r3, t, e2[t]);
  if (p) for (var t of p(e2)) z2.call(e2, t) && f(r3, t, e2[t]);
  return r3;
};
var g = (r3, e2) => S(r3, _2(e2));
function k2(r3) {
  return g(i2({}, r3), { level: (r3 == null ? void 0 : r3.level) || c2.level });
}
function v(r3, e2 = n2) {
  return r3[e2] || "";
}
function b(r3, e2, t = n2) {
  return r3[t] = e2, r3;
}
function y2(r3, e2 = n2) {
  let t = "";
  return typeof r3.bindings > "u" ? t = v(r3, e2) : t = r3.bindings().context || "", t;
}
function w(r3, e2, t = n2) {
  const o4 = y2(r3, t);
  return o4.trim() ? `${o4}/${e2}` : e2;
}
function E2(r3, e2, t = n2) {
  const o4 = w(r3, e2, t), a3 = r3.child({ context: o4 });
  return b(a3, o4, t);
}
function C(r3) {
  var e2, t;
  const o4 = new m((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace", browser: g(i2({}, (t = r3.opts) == null ? void 0 : t.browser), { write: (a3) => o4.write(a3) }) })), chunkLoggerController: o4 };
}
function I(r3) {
  var e2;
  const t = new B((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace" }), t), chunkLoggerController: t };
}
function A(r3) {
  return typeof r3.loggerOverride < "u" && typeof r3.loggerOverride != "string" ? { logger: r3.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r3) : I(r3);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a2 = Object.defineProperty;
var u = (e2, s3, r3) => s3 in e2 ? a2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var c3 = (e2, s3, r3) => u(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var h3 = class extends IEvents {
  constructor(s3) {
    super(), this.opts = s3, c3(this, "protocol", "wc"), c3(this, "version", 2);
  }
};
var p2 = Object.defineProperty;
var b2 = (e2, s3, r3) => s3 in e2 ? p2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var v2 = (e2, s3, r3) => b2(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var I2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y3 = class {
  constructor(s3, r3) {
    this.logger = s3, this.core = r3;
  }
};
var m2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var d2 = class extends IEvents {
  constructor(s3) {
    super();
  }
};
var f2 = class {
  constructor(s3, r3, t, q2) {
    this.core = s3, this.logger = r3, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var S2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3;
  }
};
var M = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.store = t;
  }
};
var O3 = class {
  constructor(s3, r3) {
    this.projectId = s3, this.logger = r3;
  }
};
var R = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.telemetryEnabled = t;
  }
};
var T2 = Object.defineProperty;
var k3 = (e2, s3, r3) => s3 in e2 ? T2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var i3 = (e2, s3, r3) => k3(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var J = class {
  constructor(s3) {
    this.opts = s3, i3(this, "protocol", "wc"), i3(this, "version", 2);
  }
};
var V = class {
  constructor(s3) {
    this.client = s3;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e2) {
  if (!En(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function De(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t, e2) {
  fe(t);
  const n5 = e2.outputLen;
  if (t.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e2 = (r3) => t().update(de(r3)).digest(), n5 = t();
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = () => t(), e2;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), a3 = Number(n5 >> o4 & s3), u2 = Number(n5 & s3), i4 = r3 ? 4 : 0, D3 = r3 ? 0 : 4;
  t.setUint32(e2 + i4, a3, r3), t.setUint32(e2 + D3, u2, r3);
}
var An = class extends xn {
  constructor(e2, n5, r3, o4) {
    super(), this.blockLen = e2, this.outputLen = n5, this.padOffset = r3, this.isLE = o4, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = _t(this.buffer);
  }
  update(e2) {
    De(this);
    const { view: n5, buffer: r3, blockLen: o4 } = this;
    e2 = de(e2);
    const s3 = e2.length;
    for (let a3 = 0; a3 < s3; ) {
      const u2 = Math.min(o4 - this.pos, s3 - a3);
      if (u2 === o4) {
        const i4 = _t(e2);
        for (; o4 <= s3 - a3; a3 += o4) this.process(i4, a3);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + u2), this.pos), this.pos += u2, a3 += u2, this.pos === o4 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    De(this), gn(e2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o4, isLE: s3 } = this;
    let { pos: a3 } = this;
    n5[a3++] = 128, this.buffer.subarray(a3).fill(0), this.padOffset > o4 - a3 && (this.process(r3, 0), a3 = 0);
    for (let l6 = a3; l6 < o4; l6++) n5[l6] = 0;
    Cn(r3, o4 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const u2 = _t(e2), i4 = this.outputLen;
    if (i4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i4 / 4, c6 = this.get();
    if (D3 > c6.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l6 = 0; l6 < D3; l6++) u2.setUint32(4 * l6, c6[l6], s3);
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o4, finished: s3, destroyed: a3, pos: u2 } = this;
    return e2.length = o4, e2.pos = u2, e2.finished = s3, e2.destroyed = a3, o4 % n5 && e2.buffer.set(r3), e2;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e2 = false) {
  return e2 ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e2 = false) {
  let n5 = new Uint32Array(t.length), r3 = new Uint32Array(t.length);
  for (let o4 = 0; o4 < t.length; o4++) {
    const { h: s3, l: a3 } = le(t[o4], e2);
    [n5[o4], r3[o4]] = [s3, a3];
  }
  return [n5, r3];
}
var _n = (t, e2) => BigInt(t >>> 0) << St | BigInt(e2 >>> 0);
var Sn = (t, e2, n5) => t >>> n5;
var vn = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var In = (t, e2, n5) => t >>> n5 | e2 << 32 - n5;
var Un = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var Tn = (t, e2, n5) => t << 64 - n5 | e2 >>> n5 - 32;
var Fn = (t, e2, n5) => t >>> n5 - 32 | e2 << 64 - n5;
var Nn = (t, e2) => e2;
var Ln = (t, e2) => t;
var On = (t, e2, n5) => t << n5 | e2 >>> 32 - n5;
var Hn = (t, e2, n5) => e2 << n5 | t >>> 32 - n5;
var zn = (t, e2, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var Mn = (t, e2, n5) => t << n5 - 32 | e2 >>> 64 - n5;
function qn(t, e2, n5, r3) {
  const o4 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n5 + (o4 / 2 ** 32 | 0) | 0, l: o4 | 0 };
}
var $n = (t, e2, n5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0);
var kn = (t, e2, n5, r3) => e2 + n5 + r3 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e2, n5, r3) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var jn = (t, e2, n5, r3, o4) => e2 + n5 + r3 + o4 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e2, n5, r3, o4) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o4 >>> 0);
var Gn = (t, e2, n5, r3, o4, s3) => e2 + n5 + r3 + o4 + s3 + (t / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P2 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e2, Al: n5, Bh: r3, Bl: o4, Ch: s3, Cl: a3, Dh: u2, Dl: i4, Eh: D3, El: c6, Fh: l6, Fl: p3, Gh: w3, Gl: h5, Hh: g4, Hl: S3 } = this;
    return [e2, n5, r3, o4, s3, a3, u2, i4, D3, c6, l6, p3, w3, h5, g4, S3];
  }
  set(e2, n5, r3, o4, s3, a3, u2, i4, D3, c6, l6, p3, w3, h5, g4, S3) {
    this.Ah = e2 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o4 | 0, this.Ch = s3 | 0, this.Cl = a3 | 0, this.Dh = u2 | 0, this.Dl = i4 | 0, this.Eh = D3 | 0, this.El = c6 | 0, this.Fh = l6 | 0, this.Fl = p3 | 0, this.Gh = w3 | 0, this.Gl = h5 | 0, this.Hh = g4 | 0, this.Hl = S3 | 0;
  }
  process(e2, n5) {
    for (let d5 = 0; d5 < 16; d5++, n5 += 4) P2[d5] = e2.getUint32(n5), Q[d5] = e2.getUint32(n5 += 4);
    for (let d5 = 16; d5 < 80; d5++) {
      const m3 = P2[d5 - 15] | 0, F3 = Q[d5 - 15] | 0, q2 = x3.rotrSH(m3, F3, 1) ^ x3.rotrSH(m3, F3, 8) ^ x3.shrSH(m3, F3, 7), z4 = x3.rotrSL(m3, F3, 1) ^ x3.rotrSL(m3, F3, 8) ^ x3.shrSL(m3, F3, 7), I3 = P2[d5 - 2] | 0, O5 = Q[d5 - 2] | 0, ot2 = x3.rotrSH(I3, O5, 19) ^ x3.rotrBH(I3, O5, 61) ^ x3.shrSH(I3, O5, 6), tt3 = x3.rotrSL(I3, O5, 19) ^ x3.rotrBL(I3, O5, 61) ^ x3.shrSL(I3, O5, 6), st2 = x3.add4L(z4, tt3, Q[d5 - 7], Q[d5 - 16]), at2 = x3.add4H(st2, q2, ot2, P2[d5 - 7], P2[d5 - 16]);
      P2[d5] = at2 | 0, Q[d5] = st2 | 0;
    }
    let { Ah: r3, Al: o4, Bh: s3, Bl: a3, Ch: u2, Cl: i4, Dh: D3, Dl: c6, Eh: l6, El: p3, Fh: w3, Fl: h5, Gh: g4, Gl: S3, Hh: v5, Hl: L2 } = this;
    for (let d5 = 0; d5 < 80; d5++) {
      const m3 = x3.rotrSH(l6, p3, 14) ^ x3.rotrSH(l6, p3, 18) ^ x3.rotrBH(l6, p3, 41), F3 = x3.rotrSL(l6, p3, 14) ^ x3.rotrSL(l6, p3, 18) ^ x3.rotrBL(l6, p3, 41), q2 = l6 & w3 ^ ~l6 & g4, z4 = p3 & h5 ^ ~p3 & S3, I3 = x3.add5L(L2, F3, z4, Yn[d5], Q[d5]), O5 = x3.add5H(I3, v5, m3, q2, Vn[d5], P2[d5]), ot2 = I3 | 0, tt3 = x3.rotrSH(r3, o4, 28) ^ x3.rotrBH(r3, o4, 34) ^ x3.rotrBH(r3, o4, 39), st2 = x3.rotrSL(r3, o4, 28) ^ x3.rotrBL(r3, o4, 34) ^ x3.rotrBL(r3, o4, 39), at2 = r3 & s3 ^ r3 & u2 ^ s3 & u2, Ct3 = o4 & a3 ^ o4 & i4 ^ a3 & i4;
      v5 = g4 | 0, L2 = S3 | 0, g4 = w3 | 0, S3 = h5 | 0, w3 = l6 | 0, h5 = p3 | 0, { h: l6, l: p3 } = x3.add(D3 | 0, c6 | 0, O5 | 0, ot2 | 0), D3 = u2 | 0, c6 = i4 | 0, u2 = s3 | 0, i4 = a3 | 0, s3 = r3 | 0, a3 = o4 | 0;
      const At3 = x3.add3L(ot2, st2, Ct3);
      r3 = x3.add3H(At3, O5, tt3, at2), o4 = At3 | 0;
    }
    ({ h: r3, l: o4 } = x3.add(this.Ah | 0, this.Al | 0, r3 | 0, o4 | 0)), { h: s3, l: a3 } = x3.add(this.Bh | 0, this.Bl | 0, s3 | 0, a3 | 0), { h: u2, l: i4 } = x3.add(this.Ch | 0, this.Cl | 0, u2 | 0, i4 | 0), { h: D3, l: c6 } = x3.add(this.Dh | 0, this.Dl | 0, D3 | 0, c6 | 0), { h: l6, l: p3 } = x3.add(this.Eh | 0, this.El | 0, l6 | 0, p3 | 0), { h: w3, l: h5 } = x3.add(this.Fh | 0, this.Fl | 0, w3 | 0, h5 | 0), { h: g4, l: S3 } = x3.add(this.Gh | 0, this.Gl | 0, g4 | 0, S3 | 0), { h: v5, l: L2 } = x3.add(this.Hh | 0, this.Hl | 0, v5 | 0, L2 | 0), this.set(r3, o4, s3, a3, u2, i4, D3, c6, l6, p3, w3, h5, g4, S3, v5, L2);
  }
  roundClean() {
    P2.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t)) throw new Error("Uint8Array expected");
}
function Tt(t, e2) {
  if (typeof e2 != "boolean") throw new Error(t + " boolean expected, got " + e2);
}
var Xn = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e2 = "";
  for (let n5 = 0; n5 < t.length; n5++) e2 += Xn[t[n5]];
  return e2;
}
function pe(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K2._0 && t <= K2._9) return t - K2._0;
  if (t >= K2.A && t <= K2.F) return t - (K2.A - 10);
  if (t >= K2.a && t <= K2.f) return t - (K2.a - 10);
}
function Ee(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e2 = t.length, n5 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n5);
  for (let o4 = 0, s3 = 0; o4 < n5; o4++, s3 += 2) {
    const a3 = we(t.charCodeAt(s3)), u2 = we(t.charCodeAt(s3 + 1));
    if (a3 === void 0 || u2 === void 0) {
      const i4 = t[s3] + t[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + i4 + '" at index ' + s3);
    }
    r3[o4] = a3 * 16 + u2;
  }
  return r3;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e2) {
  return Ee(t.toString(16).padStart(e2 * 2, "0"));
}
function Nt(t, e2) {
  return ge(t, e2).reverse();
}
function W(t, e2, n5) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = Ee(e2);
  } catch (s3) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s3);
  }
  else if (It(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o4 = r3.length;
  if (typeof n5 == "number" && o4 !== n5) throw new Error(t + " of length " + n5 + " expected, got " + o4);
  return r3;
}
function ye(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o4 = t[r3];
    Ut(o4), e2 += o4.length;
  }
  const n5 = new Uint8Array(e2);
  for (let r3 = 0, o4 = 0; r3 < t.length; r3++) {
    const s3 = t[r3];
    n5.set(s3, o4), o4 += s3.length;
  }
  return n5;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e2, n5) {
  return Lt(t) && Lt(e2) && Lt(n5) && e2 <= t && t < n5;
}
function ft(t, e2, n5, r3) {
  if (!Qn(e2, n5, r3)) throw new Error("expected valid " + t + ": " + n5 + " <= n < " + r3 + ", got " + e2);
}
function tr(t) {
  let e2;
  for (e2 = 0; t > vt; t >>= be, e2 += 1) ;
  return e2;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e2) => e2.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e2, n5 = {}) {
  const r3 = (o4, s3, a3) => {
    const u2 = nr[s3];
    if (typeof u2 != "function") throw new Error("invalid validator function");
    const i4 = t[o4];
    if (!(a3 && i4 === void 0) && !u2(i4, t)) throw new Error("param " + String(o4) + " is invalid. Expected " + s3 + ", got " + i4);
  };
  for (const [o4, s3] of Object.entries(e2)) r3(o4, s3, false);
  for (const [o4, s3] of Object.entries(n5)) r3(o4, s3, true);
  return t;
}
function xe(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o4 = e2.get(n5);
    if (o4 !== void 0) return o4;
    const s3 = t(n5, ...r3);
    return e2.set(n5, s3), s3;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e2) {
  const n5 = t % e2;
  return n5 >= M2 ? n5 : e2 + n5;
}
function or(t, e2, n5) {
  if (e2 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= M2) throw new Error("invalid modulus");
  if (n5 === N2) return M2;
  let r3 = N2;
  for (; e2 > M2; ) e2 & N2 && (r3 = r3 * t % n5), t = t * t % n5, e2 >>= N2;
  return r3;
}
function J2(t, e2, n5) {
  let r3 = t;
  for (; e2-- > M2; ) r3 *= r3, r3 %= n5;
  return r3;
}
function Ae(t, e2) {
  if (t === M2) throw new Error("invert: expected non-zero number");
  if (e2 <= M2) throw new Error("invert: expected positive modulus, got " + e2);
  let n5 = H(t, e2), r3 = e2, o4 = M2, s3 = N2;
  for (; n5 !== M2; ) {
    const u2 = r3 / n5, i4 = r3 % n5, D3 = o4 - s3 * u2;
    r3 = n5, n5 = i4, o4 = s3, s3 = D3;
  }
  if (r3 !== N2) throw new Error("invert: does not exist");
  return H(o4, e2);
}
function sr(t) {
  const e2 = (t - N2) / nt;
  let n5, r3, o4;
  for (n5 = t - N2, r3 = 0; n5 % nt === M2; n5 /= nt, r3++) ;
  for (o4 = nt; o4 < t && or(o4, e2, t) !== t - N2; o4++) if (o4 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a3 = (t + N2) / Ht;
    return function(i4, D3) {
      const c6 = i4.pow(D3, a3);
      if (!i4.eql(i4.sqr(c6), D3)) throw new Error("Cannot find square root");
      return c6;
    };
  }
  const s3 = (n5 + N2) / nt;
  return function(u2, i4) {
    if (u2.pow(i4, e2) === u2.neg(u2.ONE)) throw new Error("Cannot find square root");
    let D3 = r3, c6 = u2.pow(u2.mul(u2.ONE, o4), n5), l6 = u2.pow(i4, s3), p3 = u2.pow(i4, n5);
    for (; !u2.eql(p3, u2.ONE); ) {
      if (u2.eql(p3, u2.ZERO)) return u2.ZERO;
      let w3 = 1;
      for (let g4 = u2.sqr(p3); w3 < D3 && !u2.eql(g4, u2.ONE); w3++) g4 = u2.sqr(g4);
      const h5 = u2.pow(c6, N2 << BigInt(D3 - w3 - 1));
      c6 = u2.sqr(h5), l6 = u2.mul(l6, h5), p3 = u2.mul(p3, c6), D3 = w3;
    }
    return l6;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e2 = (t + N2) / Ht;
    return function(r3, o4) {
      const s3 = r3.pow(o4, e2);
      if (!r3.eql(r3.sqr(s3), o4)) throw new Error("Cannot find square root");
      return s3;
    };
  }
  if (t % Ce === Be) {
    const e2 = (t - Be) / Ce;
    return function(r3, o4) {
      const s3 = r3.mul(o4, nt), a3 = r3.pow(s3, e2), u2 = r3.mul(o4, a3), i4 = r3.mul(r3.mul(u2, nt), a3), D3 = r3.mul(u2, r3.sub(i4, r3.ONE));
      if (!r3.eql(r3.sqr(D3), o4)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t);
}
var ur = (t, e2) => (H(t, e2) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n5 = cr.reduce((r3, o4) => (r3[o4] = "function", r3), e2);
  return Ot(t, n5);
}
function fr(t, e2, n5) {
  if (n5 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 === M2) return t.ONE;
  if (n5 === N2) return e2;
  let r3 = t.ONE, o4 = e2;
  for (; n5 > M2; ) n5 & N2 && (r3 = t.mul(r3, o4)), o4 = t.sqr(o4), n5 >>= N2;
  return r3;
}
function Dr(t, e2) {
  const n5 = new Array(e2.length), r3 = e2.reduce((s3, a3, u2) => t.is0(a3) ? s3 : (n5[u2] = s3, t.mul(s3, a3)), t.ONE), o4 = t.inv(r3);
  return e2.reduceRight((s3, a3, u2) => t.is0(a3) ? s3 : (n5[u2] = t.mul(s3, n5[u2]), t.mul(s3, a3)), o4), n5;
}
function me(t, e2) {
  const n5 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function _e(t, e2, n5 = false, r3 = {}) {
  if (t <= M2) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o4, nByteLength: s3 } = me(t, e2);
  if (s3 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const u2 = Object.freeze({ ORDER: t, isLE: n5, BITS: o4, BYTES: s3, MASK: er(o4), ZERO: M2, ONE: N2, create: (i4) => H(i4, t), isValid: (i4) => {
    if (typeof i4 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i4);
    return M2 <= i4 && i4 < t;
  }, is0: (i4) => i4 === M2, isOdd: (i4) => (i4 & N2) === N2, neg: (i4) => H(-i4, t), eql: (i4, D3) => i4 === D3, sqr: (i4) => H(i4 * i4, t), add: (i4, D3) => H(i4 + D3, t), sub: (i4, D3) => H(i4 - D3, t), mul: (i4, D3) => H(i4 * D3, t), pow: (i4, D3) => fr(u2, i4, D3), div: (i4, D3) => H(i4 * Ae(D3, t), t), sqrN: (i4) => i4 * i4, addN: (i4, D3) => i4 + D3, subN: (i4, D3) => i4 - D3, mulN: (i4, D3) => i4 * D3, inv: (i4) => Ae(i4, t), sqrt: r3.sqrt || ((i4) => (a3 || (a3 = ir(t)), a3(u2, i4))), invertBatch: (i4) => Dr(u2, i4), cmov: (i4, D3, c6) => c6 ? D3 : i4, toBytes: (i4) => n5 ? Nt(i4, s3) : ge(i4, s3), fromBytes: (i4) => {
    if (i4.length !== s3) throw new Error("Field.fromBytes: expected " + s3 + " bytes, got " + i4.length);
    return n5 ? Et(i4) : Pn(i4);
  } });
  return Object.freeze(u2);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e2) {
  const n5 = e2.negate();
  return t ? n5 : e2;
}
function ve(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Mt(t, e2) {
  ve(t, e2);
  const n5 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1);
  return { windows: n5, windowSize: r3 };
}
function dr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n5, r3) => {
    if (!(n5 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function hr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n5, r3) => {
    if (!e2.isValid(n5)) throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e2) {
  return { constTimeNegate: zt, hasPrecomputes(n5) {
    return $t(n5) !== 1;
  }, unsafeLadder(n5, r3, o4 = t.ZERO) {
    let s3 = n5;
    for (; r3 > Se; ) r3 & gt && (o4 = o4.add(s3)), s3 = s3.double(), r3 >>= gt;
    return o4;
  }, precomputeWindow(n5, r3) {
    const { windows: o4, windowSize: s3 } = Mt(r3, e2), a3 = [];
    let u2 = n5, i4 = u2;
    for (let D3 = 0; D3 < o4; D3++) {
      i4 = u2, a3.push(i4);
      for (let c6 = 1; c6 < s3; c6++) i4 = i4.add(u2), a3.push(i4);
      u2 = i4.double();
    }
    return a3;
  }, wNAF(n5, r3, o4) {
    const { windows: s3, windowSize: a3 } = Mt(n5, e2);
    let u2 = t.ZERO, i4 = t.BASE;
    const D3 = BigInt(2 ** n5 - 1), c6 = 2 ** n5, l6 = BigInt(n5);
    for (let p3 = 0; p3 < s3; p3++) {
      const w3 = p3 * a3;
      let h5 = Number(o4 & D3);
      o4 >>= l6, h5 > a3 && (h5 -= c6, o4 += gt);
      const g4 = w3, S3 = w3 + Math.abs(h5) - 1, v5 = p3 % 2 !== 0, L2 = h5 < 0;
      h5 === 0 ? i4 = i4.add(zt(v5, r3[g4])) : u2 = u2.add(zt(L2, r3[S3]));
    }
    return { p: u2, f: i4 };
  }, wNAFUnsafe(n5, r3, o4, s3 = t.ZERO) {
    const { windows: a3, windowSize: u2 } = Mt(n5, e2), i4 = BigInt(2 ** n5 - 1), D3 = 2 ** n5, c6 = BigInt(n5);
    for (let l6 = 0; l6 < a3; l6++) {
      const p3 = l6 * u2;
      if (o4 === Se) break;
      let w3 = Number(o4 & i4);
      if (o4 >>= c6, w3 > u2 && (w3 -= D3, o4 += gt), w3 === 0) continue;
      let h5 = r3[p3 + Math.abs(w3) - 1];
      w3 < 0 && (h5 = h5.negate()), s3 = s3.add(h5);
    }
    return s3;
  }, getPrecomputes(n5, r3, o4) {
    let s3 = qt.get(r3);
    return s3 || (s3 = this.precomputeWindow(r3, n5), n5 !== 1 && qt.set(r3, o4(s3))), s3;
  }, wNAFCached(n5, r3, o4) {
    const s3 = $t(n5);
    return this.wNAF(s3, this.getPrecomputes(s3, n5, o4), r3);
  }, wNAFCachedUnsafe(n5, r3, o4, s3) {
    const a3 = $t(n5);
    return a3 === 1 ? this.unsafeLadder(n5, r3, s3) : this.wNAFUnsafe(a3, this.getPrecomputes(a3, n5, o4), r3, s3);
  }, setWindowSize(n5, r3) {
    ve(r3, e2), Ie.set(n5, r3), qt.delete(n5);
  } };
}
function br(t, e2, n5, r3) {
  if (dr(n5, t), hr(r3, e2), n5.length !== r3.length) throw new Error("arrays of points and scalars must have equal length");
  const o4 = t.ZERO, s3 = tr(BigInt(n5.length)), a3 = s3 > 12 ? s3 - 3 : s3 > 4 ? s3 - 2 : s3 ? 2 : 1, u2 = (1 << a3) - 1, i4 = new Array(u2 + 1).fill(o4), D3 = Math.floor((e2.BITS - 1) / a3) * a3;
  let c6 = o4;
  for (let l6 = D3; l6 >= 0; l6 -= a3) {
    i4.fill(o4);
    for (let w3 = 0; w3 < r3.length; w3++) {
      const h5 = r3[w3], g4 = Number(h5 >> BigInt(l6) & BigInt(u2));
      i4[g4] = i4[g4].add(n5[w3]);
    }
    let p3 = o4;
    for (let w3 = i4.length - 1, h5 = o4; w3 > 0; w3--) h5 = h5.add(i4[w3]), p3 = p3.add(h5);
    if (c6 = c6.add(p3), l6 !== 0) for (let w3 = 0; w3 < a3; w3++) c6 = c6.double();
  }
  return c6;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e2 = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e2 });
}
function yr(t) {
  const e2 = gr(t), { Fp: n5, n: r3, prehash: o4, hash: s3, randomBytes: a3, nByteLength: u2, h: i4 } = e2, D3 = yt << BigInt(u2 * 8) - j2, c6 = n5.create, l6 = _e(e2.n, e2.nBitLength), p3 = e2.uvRatio || ((y4, f7) => {
    try {
      return { isValid: true, value: n5.sqrt(y4 * n5.inv(f7)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w3 = e2.adjustScalarBytes || ((y4) => y4), h5 = e2.domain || ((y4, f7, b4) => {
    if (Tt("phflag", b4), f7.length || b4) throw new Error("Contexts/pre-hash are not supported");
    return y4;
  });
  function g4(y4, f7) {
    ft("coordinate " + y4, f7, G, D3);
  }
  function S3(y4) {
    if (!(y4 instanceof d5)) throw new Error("ExtendedPoint expected");
  }
  const v5 = xe((y4, f7) => {
    const { ex: b4, ey: E3, ez: B3 } = y4, C4 = y4.is0();
    f7 == null && (f7 = C4 ? wr : n5.inv(B3));
    const A3 = c6(b4 * f7), U3 = c6(E3 * f7), _3 = c6(B3 * f7);
    if (C4) return { x: G, y: j2 };
    if (_3 !== j2) throw new Error("invZ was invalid");
    return { x: A3, y: U3 };
  }), L2 = xe((y4) => {
    const { a: f7, d: b4 } = e2;
    if (y4.is0()) throw new Error("bad point: ZERO");
    const { ex: E3, ey: B3, ez: C4, et: A3 } = y4, U3 = c6(E3 * E3), _3 = c6(B3 * B3), T3 = c6(C4 * C4), $2 = c6(T3 * T3), R4 = c6(U3 * f7), V4 = c6(T3 * c6(R4 + _3)), Y3 = c6($2 + c6(b4 * c6(U3 * _3)));
    if (V4 !== Y3) throw new Error("bad point: equation left != right (1)");
    const Z = c6(E3 * B3), X3 = c6(C4 * A3);
    if (Z !== X3) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d5 {
    constructor(f7, b4, E3, B3) {
      this.ex = f7, this.ey = b4, this.ez = E3, this.et = B3, g4("x", f7), g4("y", b4), g4("z", E3), g4("t", B3), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f7) {
      if (f7 instanceof d5) throw new Error("extended point not allowed");
      const { x: b4, y: E3 } = f7 || {};
      return g4("x", b4), g4("y", E3), new d5(b4, E3, j2, c6(b4 * E3));
    }
    static normalizeZ(f7) {
      const b4 = n5.invertBatch(f7.map((E3) => E3.ez));
      return f7.map((E3, B3) => E3.toAffine(b4[B3])).map(d5.fromAffine);
    }
    static msm(f7, b4) {
      return br(d5, l6, f7, b4);
    }
    _setWindowSize(f7) {
      q2.setWindowSize(this, f7);
    }
    assertValidity() {
      L2(this);
    }
    equals(f7) {
      S3(f7);
      const { ex: b4, ey: E3, ez: B3 } = this, { ex: C4, ey: A3, ez: U3 } = f7, _3 = c6(b4 * U3), T3 = c6(C4 * B3), $2 = c6(E3 * U3), R4 = c6(A3 * B3);
      return _3 === T3 && $2 === R4;
    }
    is0() {
      return this.equals(d5.ZERO);
    }
    negate() {
      return new d5(c6(-this.ex), this.ey, this.ez, c6(-this.et));
    }
    double() {
      const { a: f7 } = e2, { ex: b4, ey: E3, ez: B3 } = this, C4 = c6(b4 * b4), A3 = c6(E3 * E3), U3 = c6(yt * c6(B3 * B3)), _3 = c6(f7 * C4), T3 = b4 + E3, $2 = c6(c6(T3 * T3) - C4 - A3), R4 = _3 + A3, V4 = R4 - U3, Y3 = _3 - A3, Z = c6($2 * V4), X3 = c6(R4 * Y3), et2 = c6($2 * Y3), pt3 = c6(V4 * R4);
      return new d5(Z, X3, pt3, et2);
    }
    add(f7) {
      S3(f7);
      const { a: b4, d: E3 } = e2, { ex: B3, ey: C4, ez: A3, et: U3 } = this, { ex: _3, ey: T3, ez: $2, et: R4 } = f7;
      if (b4 === BigInt(-1)) {
        const re2 = c6((C4 - B3) * (T3 + _3)), oe2 = c6((C4 + B3) * (T3 - _3)), mt3 = c6(oe2 - re2);
        if (mt3 === G) return this.double();
        const se2 = c6(A3 * yt * R4), ie3 = c6(U3 * yt * $2), ue2 = ie3 + se2, ce3 = oe2 + re2, ae3 = ie3 - se2, Dn3 = c6(ue2 * mt3), dn3 = c6(ce3 * ae3), hn3 = c6(ue2 * ae3), ln3 = c6(mt3 * ce3);
        return new d5(Dn3, dn3, ln3, hn3);
      }
      const V4 = c6(B3 * _3), Y3 = c6(C4 * T3), Z = c6(U3 * E3 * R4), X3 = c6(A3 * $2), et2 = c6((B3 + C4) * (_3 + T3) - V4 - Y3), pt3 = X3 - Z, ee3 = X3 + Z, ne2 = c6(Y3 - b4 * V4), un3 = c6(et2 * pt3), cn3 = c6(ee3 * ne2), an3 = c6(et2 * ne2), fn3 = c6(pt3 * ee3);
      return new d5(un3, cn3, fn3, an3);
    }
    subtract(f7) {
      return this.add(f7.negate());
    }
    wNAF(f7) {
      return q2.wNAFCached(this, f7, d5.normalizeZ);
    }
    multiply(f7) {
      const b4 = f7;
      ft("scalar", b4, j2, r3);
      const { p: E3, f: B3 } = this.wNAF(b4);
      return d5.normalizeZ([E3, B3])[0];
    }
    multiplyUnsafe(f7, b4 = d5.ZERO) {
      const E3 = f7;
      return ft("scalar", E3, G, r3), E3 === G ? F3 : this.is0() || E3 === j2 ? this : q2.wNAFCachedUnsafe(this, E3, d5.normalizeZ, b4);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i4).is0();
    }
    isTorsionFree() {
      return q2.unsafeLadder(this, r3).is0();
    }
    toAffine(f7) {
      return v5(this, f7);
    }
    clearCofactor() {
      const { h: f7 } = e2;
      return f7 === j2 ? this : this.multiplyUnsafe(f7);
    }
    static fromHex(f7, b4 = false) {
      const { d: E3, a: B3 } = e2, C4 = n5.BYTES;
      f7 = W("pointHex", f7, C4), Tt("zip215", b4);
      const A3 = f7.slice(), U3 = f7[C4 - 1];
      A3[C4 - 1] = U3 & -129;
      const _3 = Et(A3), T3 = b4 ? D3 : n5.ORDER;
      ft("pointHex.y", _3, G, T3);
      const $2 = c6(_3 * _3), R4 = c6($2 - j2), V4 = c6(E3 * $2 - B3);
      let { isValid: Y3, value: Z } = p3(R4, V4);
      if (!Y3) throw new Error("Point.fromHex: invalid y coordinate");
      const X3 = (Z & j2) === j2, et2 = (U3 & 128) !== 0;
      if (!b4 && Z === G && et2) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et2 !== X3 && (Z = c6(-Z)), d5.fromAffine({ x: Z, y: _3 });
    }
    static fromPrivateKey(f7) {
      return O5(f7).point;
    }
    toRawBytes() {
      const { x: f7, y: b4 } = this.toAffine(), E3 = Nt(b4, n5.BYTES);
      return E3[E3.length - 1] |= f7 & j2 ? 128 : 0, E3;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d5.BASE = new d5(e2.Gx, e2.Gy, j2, c6(e2.Gx * e2.Gy)), d5.ZERO = new d5(G, j2, j2, G);
  const { BASE: m3, ZERO: F3 } = d5, q2 = lr(d5, u2 * 8);
  function z4(y4) {
    return H(y4, r3);
  }
  function I3(y4) {
    return z4(Et(y4));
  }
  function O5(y4) {
    const f7 = n5.BYTES;
    y4 = W("private key", y4, f7);
    const b4 = W("hashed private key", s3(y4), 2 * f7), E3 = w3(b4.slice(0, f7)), B3 = b4.slice(f7, 2 * f7), C4 = I3(E3), A3 = m3.multiply(C4), U3 = A3.toRawBytes();
    return { head: E3, prefix: B3, scalar: C4, point: A3, pointBytes: U3 };
  }
  function ot2(y4) {
    return O5(y4).pointBytes;
  }
  function tt3(y4 = new Uint8Array(), ...f7) {
    const b4 = ye(...f7);
    return I3(s3(h5(b4, W("context", y4), !!o4)));
  }
  function st2(y4, f7, b4 = {}) {
    y4 = W("message", y4), o4 && (y4 = o4(y4));
    const { prefix: E3, scalar: B3, pointBytes: C4 } = O5(f7), A3 = tt3(b4.context, E3, y4), U3 = m3.multiply(A3).toRawBytes(), _3 = tt3(b4.context, U3, C4, y4), T3 = z4(A3 + _3 * B3);
    ft("signature.s", T3, G, r3);
    const $2 = ye(U3, Nt(T3, n5.BYTES));
    return W("result", $2, n5.BYTES * 2);
  }
  const at2 = Er;
  function Ct3(y4, f7, b4, E3 = at2) {
    const { context: B3, zip215: C4 } = E3, A3 = n5.BYTES;
    y4 = W("signature", y4, 2 * A3), f7 = W("message", f7), b4 = W("publicKey", b4, A3), C4 !== void 0 && Tt("zip215", C4), o4 && (f7 = o4(f7));
    const U3 = Et(y4.slice(A3, 2 * A3));
    let _3, T3, $2;
    try {
      _3 = d5.fromHex(b4, C4), T3 = d5.fromHex(y4.slice(0, A3), C4), $2 = m3.multiplyUnsafe(U3);
    } catch {
      return false;
    }
    if (!C4 && _3.isSmallOrder()) return false;
    const R4 = tt3(B3, T3.toRawBytes(), _3.toRawBytes(), f7);
    return T3.add(_3.multiplyUnsafe(R4)).subtract($2).clearCofactor().equals(d5.ZERO);
  }
  return m3._setWindowSize(8), { CURVE: e2, getPublicKey: ot2, sign: st2, verify: Ct3, ExtendedPoint: d5, utils: { getExtendedPublicKey: O5, randomPrivateKey: () => a3(n5.BYTES), precompute(y4 = 8, f7 = d5.BASE) {
    return f7._setWindowSize(y4), f7.multiply(BigInt(3)), f7;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o4 = BigInt(80), s3 = kt, u2 = t * t % s3 * t % s3, i4 = J2(u2, Te, s3) * u2 % s3, D3 = J2(i4, xr, s3) * t % s3, c6 = J2(D3, Br, s3) * D3 % s3, l6 = J2(c6, e2, s3) * c6 % s3, p3 = J2(l6, n5, s3) * l6 % s3, w3 = J2(p3, r3, s3) * p3 % s3, h5 = J2(w3, o4, s3) * w3 % s3, g4 = J2(h5, o4, s3) * w3 % s3, S3 = J2(g4, e2, s3) * c6 % s3;
  return { pow_p_5_8: J2(S3, Te, s3) * t % s3, b2: u2 };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e2) {
  const n5 = kt, r3 = H(e2 * e2 * e2, n5), o4 = H(r3 * r3 * e2, n5), s3 = Ar(t * o4).pow_p_5_8;
  let a3 = H(t * r3 * s3, n5);
  const u2 = H(e2 * a3 * a3, n5), i4 = a3, D3 = H(a3 * Ue, n5), c6 = u2 === t, l6 = u2 === H(-t, n5), p3 = u2 === H(-t * Ue, n5);
  return c6 && (a3 = i4), (l6 || p3) && (a3 = D3), ur(a3, n5) && (a3 = H(-a3, n5)), { isValid: c6 || l6, value: a3 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e2) {
  e2 || (e2 = t.reduce((o4, s3) => o4 + s3.length, 0));
  const n5 = Le(e2);
  let r3 = 0;
  for (const o4 of t) n5.set(o4, r3), r3 += o4.length;
  return Xt(n5);
}
function Ir(t, e2) {
  if (t.length >= 255) throw new TypeError("Alphabet too long");
  for (var n5 = new Uint8Array(256), r3 = 0; r3 < n5.length; r3++) n5[r3] = 255;
  for (var o4 = 0; o4 < t.length; o4++) {
    var s3 = t.charAt(o4), a3 = s3.charCodeAt(0);
    if (n5[a3] !== 255) throw new TypeError(s3 + " is ambiguous");
    n5[a3] = o4;
  }
  var u2 = t.length, i4 = t.charAt(0), D3 = Math.log(u2) / Math.log(256), c6 = Math.log(256) / Math.log(u2);
  function l6(h5) {
    if (h5 instanceof Uint8Array || (ArrayBuffer.isView(h5) ? h5 = new Uint8Array(h5.buffer, h5.byteOffset, h5.byteLength) : Array.isArray(h5) && (h5 = Uint8Array.from(h5))), !(h5 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h5.length === 0) return "";
    for (var g4 = 0, S3 = 0, v5 = 0, L2 = h5.length; v5 !== L2 && h5[v5] === 0; ) v5++, g4++;
    for (var d5 = (L2 - v5) * c6 + 1 >>> 0, m3 = new Uint8Array(d5); v5 !== L2; ) {
      for (var F3 = h5[v5], q2 = 0, z4 = d5 - 1; (F3 !== 0 || q2 < S3) && z4 !== -1; z4--, q2++) F3 += 256 * m3[z4] >>> 0, m3[z4] = F3 % u2 >>> 0, F3 = F3 / u2 >>> 0;
      if (F3 !== 0) throw new Error("Non-zero carry");
      S3 = q2, v5++;
    }
    for (var I3 = d5 - S3; I3 !== d5 && m3[I3] === 0; ) I3++;
    for (var O5 = i4.repeat(g4); I3 < d5; ++I3) O5 += t.charAt(m3[I3]);
    return O5;
  }
  function p3(h5) {
    if (typeof h5 != "string") throw new TypeError("Expected String");
    if (h5.length === 0) return new Uint8Array();
    var g4 = 0;
    if (h5[g4] !== " ") {
      for (var S3 = 0, v5 = 0; h5[g4] === i4; ) S3++, g4++;
      for (var L2 = (h5.length - g4) * D3 + 1 >>> 0, d5 = new Uint8Array(L2); h5[g4]; ) {
        var m3 = n5[h5.charCodeAt(g4)];
        if (m3 === 255) return;
        for (var F3 = 0, q2 = L2 - 1; (m3 !== 0 || F3 < v5) && q2 !== -1; q2--, F3++) m3 += u2 * d5[q2] >>> 0, d5[q2] = m3 % 256 >>> 0, m3 = m3 / 256 >>> 0;
        if (m3 !== 0) throw new Error("Non-zero carry");
        v5 = F3, g4++;
      }
      if (h5[g4] !== " ") {
        for (var z4 = L2 - v5; z4 !== L2 && d5[z4] === 0; ) z4++;
        for (var I3 = new Uint8Array(S3 + (L2 - z4)), O5 = S3; z4 !== L2; ) I3[O5++] = d5[z4++];
        return I3;
      }
    }
  }
  function w3(h5) {
    var g4 = p3(h5);
    if (g4) return g4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: l6, decodeUnsafe: p3, decode: w3 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array") return t;
  if (t instanceof ArrayBuffer) return new Uint8Array(t);
  if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e2, n5, r3) {
    if (this.name = e2, this.prefix = n5, n5.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n5.codePointAt(0), this.baseDecode = r3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ze(this, e2);
  }
};
var Hr = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ze(this, e2);
  }
  decode(e2) {
    const n5 = e2[0], r3 = this.decoders[n5];
    if (r3) return r3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e2) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e2.decoders || { [e2.prefix]: e2 } });
var zr = class {
  constructor(e2, n5, r3, o4) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3, this.baseDecode = o4, this.encoder = new Lr(e2, n5, r3), this.decoder = new Or(e2, n5, o4);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Bt = ({ name: t, prefix: e2, encode: n5, decode: r3 }) => new zr(t, e2, n5, r3);
var ht = ({ prefix: t, name: e2, alphabet: n5 }) => {
  const { encode: r3, decode: o4 } = Tr(n5, e2);
  return Bt({ prefix: t, name: e2, encode: r3, decode: (s3) => He(o4(s3)) });
};
var Mr = (t, e2, n5, r3) => {
  const o4 = {};
  for (let c6 = 0; c6 < e2.length; ++c6) o4[e2[c6]] = c6;
  let s3 = t.length;
  for (; t[s3 - 1] === "="; ) --s3;
  const a3 = new Uint8Array(s3 * n5 / 8 | 0);
  let u2 = 0, i4 = 0, D3 = 0;
  for (let c6 = 0; c6 < s3; ++c6) {
    const l6 = o4[t[c6]];
    if (l6 === void 0) throw new SyntaxError(`Non-${r3} character`);
    i4 = i4 << n5 | l6, u2 += n5, u2 >= 8 && (u2 -= 8, a3[D3++] = 255 & i4 >> u2);
  }
  if (u2 >= n5 || 255 & i4 << 8 - u2) throw new SyntaxError("Unexpected end of data");
  return a3;
};
var qr = (t, e2, n5) => {
  const r3 = e2[e2.length - 1] === "=", o4 = (1 << n5) - 1;
  let s3 = "", a3 = 0, u2 = 0;
  for (let i4 = 0; i4 < t.length; ++i4) for (u2 = u2 << 8 | t[i4], a3 += 8; a3 > n5; ) a3 -= n5, s3 += e2[o4 & u2 >> a3];
  if (a3 && (s3 += e2[o4 & u2 << n5 - a3]), r3) for (; s3.length * n5 & 7; ) s3 += "=";
  return s3;
};
var k4 = ({ name: t, prefix: e2, bitsPerChar: n5, alphabet: r3 }) => Bt({ prefix: e2, name: t, encode(o4) {
  return qr(o4, r3, n5);
}, decode(o4) {
  return Mr(o4, r3, n5, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e2, n5) => (t[n5] = e2, t), []);
var yo = Me.reduce((t, e2, n5) => (t[e2.codePointAt(0)] = n5, t), []);
function xo(t) {
  return t.reduce((e2, n5) => (e2 += go[n5], e2), "");
}
function Bo(t) {
  const e2 = [];
  for (const n5 of t) {
    const r3 = yo[n5.codePointAt(0)];
    if (r3 === void 0) throw new Error(`Non-base256emoji character: ${n5}`);
    e2.push(r3);
  }
  return new Uint8Array(e2);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e2, n5) {
  e2 = e2 || [], n5 = n5 || 0;
  for (var r3 = n5; t >= vo; ) e2[n5++] = t & 255 | qe, t /= 128;
  for (; t & So; ) e2[n5++] = t & 255 | qe, t >>>= 7;
  return e2[n5] = t | 0, $e.bytes = n5 - r3 + 1, e2;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r3) {
  var n5 = 0, r3 = r3 || 0, o4 = 0, s3 = r3, a3, u2 = t.length;
  do {
    if (s3 >= u2) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a3 = t[s3++], n5 += o4 < 28 ? (a3 & ke) << o4 : (a3 & ke) * Math.pow(2, o4), o4 += 7;
  } while (a3 >= Uo);
  return Pt.bytes = s3 - r3, n5;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e2, n5 = 0) => (Re.encode(t, e2, n5), e2);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e2) => {
  const n5 = e2.byteLength, r3 = Ze(t), o4 = r3 + Ze(n5), s3 = new Uint8Array(o4 + n5);
  return je(t, s3, 0), je(n5, s3, r3), s3.set(e2, o4), new Ro(t, n5, e2, s3);
};
var Ro = class {
  constructor(e2, n5, r3, o4) {
    this.code = e2, this.size = n5, this.digest = r3, this.bytes = o4;
  }
};
var Ge = ({ name: t, code: e2, encode: n5 }) => new jo(t, e2, n5);
var jo = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.code = n5, this.encode = r3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const n5 = this.encode(e2);
      return n5 instanceof Uint8Array ? Qt(this.code, n5) : n5.then((r3) => Qt(this.code, r3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e2) => new Uint8Array(await crypto.subtle.digest(t, e2));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e2, n5, r3) {
  return { name: t, prefix: e2, encoder: { name: t, prefix: e2, encode: n5 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e2 = "a";
  for (let n5 = 0; n5 < t.length; n5++) e2 += String.fromCharCode(t[n5]);
  return e2;
}, (t) => {
  t = t.substring(1);
  const e2 = Le(t.length);
  for (let n5 = 0; n5 < t.length; n5++) e2[n5] = t.charCodeAt(n5);
  return e2;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n5.encoder.encode(t).substring(1);
}
function rt(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n5.decoder.decode(`${n5.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e2 = rt(Wt, dt), n5 = Kt + ct(Oe([e2, t]), dt);
  return [Yt, Jt, n5].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e2 = t.split(ut), n5 = lt(e2[0]), r3 = lt(e2[1]), o4 = nn(e2[2]), s3 = rt(e2.slice(0, 2).join(ut), xt);
  return { header: n5, payload: r3, signature: o4, data: s3 };
}
function Po(t = he(Ne)) {
  const e2 = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e2]), publicKey: e2 };
}
async function Qo(t, e2, n5, r3, o4 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s3 = { alg: jt, typ: Zt }, a3 = Qe(r3.publicKey), u2 = o4 + n5, i4 = { iss: a3, sub: t, aud: e2, iat: o4, exp: u2 }, D3 = rn({ header: s3, payload: i4 }), c6 = Rt.sign(D3, r3.secretKey.slice(0, 32));
  return on({ header: s3, payload: i4, signature: c6 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to4, from8, pack) {
  if (pack || arguments.length === 2) for (var i4 = 0, l6 = from8.length, ar3; i4 < l6; i4++) {
    if (ar3 || !(i4 in from8)) {
      if (!ar3) ar3 = Array.prototype.slice.call(from8, 0, i4);
      ar3[i4] = from8[i4];
    }
  }
  return to4.concat(ar3 || Array.prototype.slice.call(from8));
};
var BrowserInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua2) {
  for (var ii3 = 0, count = operatingSystemRules.length; ii3 < count; ii3++) {
    var _a2 = operatingSystemRules[ii3], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii3 = 0; ii3 < count; ii3++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-YORJ5WJ4.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r3, s: s3, v: v5, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v5);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r3), hexToBigInt(s3)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/viem/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A3, B: B3, C: C4, D: D3, E: E3 } = this;
    return [A3, B3, C4, D3, E3];
  }
  set(A3, B3, C4, D3, E3) {
    this.A = A3 | 0;
    this.B = B3 | 0;
    this.C = C4 | 0;
    this.D = D3 | 0;
    this.E = E3 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA1_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 80; i4++)
      SHA1_W[i4] = rotl(SHA1_W[i4 - 3] ^ SHA1_W[i4 - 8] ^ SHA1_W[i4 - 14] ^ SHA1_W[i4 - 16], 1);
    let { A: A3, B: B3, C: C4, D: D3, E: E3 } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      let F3, K5;
      if (i4 < 20) {
        F3 = Chi(B3, C4, D3);
        K5 = 1518500249;
      } else if (i4 < 40) {
        F3 = B3 ^ C4 ^ D3;
        K5 = 1859775393;
      } else if (i4 < 60) {
        F3 = Maj(B3, C4, D3);
        K5 = 2400959708;
      } else {
        F3 = B3 ^ C4 ^ D3;
        K5 = 3395469782;
      }
      const T3 = rotl(A3, 5) + F3 + E3 + K5 + SHA1_W[i4] | 0;
      E3 = D3;
      D3 = C4;
      C4 = rotl(B3, 30);
      B3 = A3;
      A3 = T3;
    }
    A3 = A3 + this.A | 0;
    B3 = B3 + this.B | 0;
    C4 = C4 + this.C | 0;
    D3 = D3 + this.D | 0;
    E3 = E3 + this.E | 0;
    this.set(A3, B3, C4, D3, E3);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K3 = Array.from({ length: 64 }, (_3, i4) => Math.floor(p32 * Math.abs(Math.sin(i4 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A3, B: B3, C: C4, D: D3 } = this;
    return [A3, B3, C4, D3];
  }
  set(A3, B3, C4, D3) {
    this.A = A3 | 0;
    this.B = B3 | 0;
    this.C = C4 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      MD5_W[i4] = view.getUint32(offset, true);
    let { A: A3, B: B3, C: C4, D: D3 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      let F3, g4, s3;
      if (i4 < 16) {
        F3 = Chi(B3, C4, D3);
        g4 = i4;
        s3 = [7, 12, 17, 22];
      } else if (i4 < 32) {
        F3 = Chi(D3, B3, C4);
        g4 = (5 * i4 + 1) % 16;
        s3 = [5, 9, 14, 20];
      } else if (i4 < 48) {
        F3 = B3 ^ C4 ^ D3;
        g4 = (3 * i4 + 5) % 16;
        s3 = [4, 11, 16, 23];
      } else {
        F3 = C4 ^ (B3 | ~D3);
        g4 = 7 * i4 % 16;
        s3 = [6, 10, 15, 21];
      }
      F3 = F3 + A3 + K3[i4] + MD5_W[g4];
      A3 = D3;
      D3 = C4;
      C4 = B3;
      B3 = B3 + rotl(F3, s3[i4 % 4]);
    }
    A3 = A3 + this.A | 0;
    B3 = B3 + this.B | 0;
    C4 = C4 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A3, B3, C4, D3);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_3, i4) => i4)))();
var Pi160 = (() => Id160.map((i4) => (9 * i4 + 5) % 16))();
var idxLR = (() => {
  const L2 = [Id160];
  const R4 = [Pi160];
  const res = [L2, R4];
  for (let i4 = 0; i4 < 4; i4++)
    for (let j3 of res)
      j3.push(j3[i4].map((k5) => Rho160[k5]));
  return res;
})();
var idxL = (() => idxLR[0])();
var idxR = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => Uint8Array.from(i4));
var shiftsL160 = idxL.map((idx, i4) => idx.map((j3) => shifts160[i4][j3]));
var shiftsR160 = idxR.map((idx, i4) => idx.map((j3) => shifts160[i4][j3]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x5, y4, z4) {
  if (group === 0)
    return x5 ^ y4 ^ z4;
  if (group === 1)
    return x5 & y4 | ~x5 & z4;
  if (group === 2)
    return (x5 | ~y4) ^ z4;
  if (group === 3)
    return x5 & z4 | y4 & ~z4;
  return x5 ^ (y4 | ~z4);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      BUF_160[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL160[group], sr3 = shiftsR160[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr3 = rotl(ar3 + ripemd_f(rGroup, br4, cr4, dr4) + BUF_160[rr4[i4]] + hbr, sr3[i4]) + er3 | 0;
        ar3 = er3, er3 = dr4, dr4 = rotl(cr4, 10) | 0, cr4 = br4, br4 = tr3;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = createHasher(() => new RIPEMD160());

// node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@noble/hashes/esm/_assert.js
function anumber(n5) {
  if (!Number.isSafeInteger(n5) || n5 < 0)
    throw new Error("positive integer expected, got " + n5);
}
function isBytes2(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abytes(b4, ...lengths) {
  if (!isBytes2(b4))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b4.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b4.length);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}

// node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var rotl2 = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
function byteSwap32(arr) {
  for (let i4 = 0; i4 < arr.length; i4++) {
    arr[i4] = byteSwap(arr[i4]);
  }
}
var hexes = Array.from({ length: 256 }, (_3, i4) => i4.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("utf8ToBytes expected string, got " + typeof str);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h5 = isLE2 ? 4 : 0;
  const l6 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h5, wh, isLE2);
  view.setUint32(byteOffset + l6, wl, isLE2);
}
var Chi2 = (a3, b4, c6) => a3 & b4 ^ ~a3 & c6;
var Maj2 = (a3, b4, c6) => a3 & b4 ^ a3 & c6 ^ b4 & c6;
var HashMD2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    const { view, buffer, blockLen } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i4 = pos; i4 < blockLen; i4++)
      buffer[i4] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i4 = 0; i4 < outLen; i4++)
      oview.setUint32(4 * i4, state[i4], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to4) {
    to4 || (to4 = new this.constructor());
    to4.set(...this.get());
    const { blockLen, buffer, length: length2, finished, destroyed, pos } = this;
    to4.length = length2;
    to4.pos = pos;
    to4.finished = finished;
    to4.destroyed = destroyed;
    if (length2 % blockLen)
      to4.buffer.set(buffer);
    return to4;
  }
};

// node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_3, i4) => i4));
var Pi = Id.map((i4) => (9 * i4 + 5) % 16);
var idxL2 = [Id];
var idxR2 = [Pi];
for (let i4 = 0; i4 < 4; i4++)
  for (let j3 of [idxL2, idxR2])
    j3.push(j3[i4].map((k5) => Rho[k5]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => new Uint8Array(i4));
var shiftsL = idxL2.map((idx, i4) => idx.map((j3) => shifts[i4][j3]));
var shiftsR = idxR2.map((idx, i4) => idx.map((j3) => shifts[i4][j3]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr2 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f3(group, x5, y4, z4) {
  if (group === 0)
    return x5 ^ y4 ^ z4;
  else if (group === 1)
    return x5 & y4 | ~x5 & z4;
  else if (group === 2)
    return (x5 | ~y4) ^ z4;
  else if (group === 3)
    return x5 & z4 | y4 & ~z4;
  else
    return x5 ^ (y4 | ~z4);
}
var R_BUF = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      R_BUF[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr2[group];
      const rl = idxL2[group], rr4 = idxR2[group];
      const sl = shiftsL[group], sr3 = shiftsR[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl2(al + f3(group, bl, cl, dl) + R_BUF[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr3 = rotl2(ar3 + f3(rGroup, br4, cr4, dr4) + R_BUF[rr4[i4]] + hbr, sr3[i4]) + er3 | 0;
        ar3 = er3, er3 = dr4, dr4 = rotl2(cr4, 10) | 0, cr4 = br4, br4 = tr3;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1604 = wrapConstructor(() => new RIPEMD1602());

// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n5, le5 = false) {
  if (le5)
    return { h: Number(n5 & U32_MASK64), l: Number(n5 >> _32n & U32_MASK64) };
  return { h: Number(n5 >> _32n & U32_MASK64) | 0, l: Number(n5 & U32_MASK64) | 0 };
}
function split(lst, le5 = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i4 = 0; i4 < lst.length; i4++) {
    const { h: h5, l: l6 } = fromBig(lst[i4], le5);
    [Ah[i4], Al[i4]] = [h5, l6];
  }
  return [Ah, Al];
}
var rotlSH = (h5, l6, s3) => h5 << s3 | l6 >>> 32 - s3;
var rotlSL = (h5, l6, s3) => l6 << s3 | h5 >>> 32 - s3;
var rotlBH = (h5, l6, s3) => l6 << s3 - 32 | h5 >>> 64 - s3;
var rotlBL = (h5, l6, s3) => h5 << s3 - 32 | l6 >>> 64 - s3;

// node_modules/@noble/hashes/esm/sha3.js
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
var _0n = BigInt(0);
var _1n = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
for (let round = 0, R4 = _1n, x5 = 1, y4 = 0; round < 24; round++) {
  [x5, y4] = [y4, (2 * x5 + 3 * y4) % 5];
  SHA3_PI.push(2 * (5 * y4 + x5));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j3 = 0; j3 < 7; j3++) {
    R4 = (R4 << _1n ^ (R4 >> _7n) * _0x71n) % _256n;
    if (R4 & _2n)
      t ^= _1n << (_1n << BigInt(j3)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
var rotlH = (h5, l6, s3) => s3 > 32 ? rotlBH(h5, l6, s3) : rotlSH(h5, l6, s3);
var rotlL = (h5, l6, s3) => s3 > 32 ? rotlBL(h5, l6, s3) : rotlSL(h5, l6, s3);
function keccakP(s3, rounds = 24) {
  const B3 = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x5 = 0; x5 < 10; x5++)
      B3[x5] = s3[x5] ^ s3[x5 + 10] ^ s3[x5 + 20] ^ s3[x5 + 30] ^ s3[x5 + 40];
    for (let x5 = 0; x5 < 10; x5 += 2) {
      const idx1 = (x5 + 8) % 10;
      const idx0 = (x5 + 2) % 10;
      const B0 = B3[idx0];
      const B1 = B3[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B3[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B3[idx1 + 1];
      for (let y4 = 0; y4 < 50; y4 += 10) {
        s3[x5 + y4] ^= Th;
        s3[x5 + y4 + 1] ^= Tl;
      }
    }
    let curH = s3[2];
    let curL = s3[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s3[PI];
      curL = s3[PI + 1];
      s3[PI] = Th;
      s3[PI + 1] = Tl;
    }
    for (let y4 = 0; y4 < 50; y4 += 10) {
      for (let x5 = 0; x5 < 10; x5++)
        B3[x5] = s3[y4 + x5];
      for (let x5 = 0; x5 < 10; x5++)
        s3[y4 + x5] ^= ~B3[(x5 + 2) % 10] & B3[(x5 + 4) % 10];
    }
    s3[0] ^= SHA3_IOTA_H[round];
    s3[1] ^= SHA3_IOTA_L[round];
  }
  B3.fill(0);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    anumber(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    if (!isLE)
      byteSwap32(this.state32);
    keccakP(this.state32, this.rounds);
    if (!isLE)
      byteSwap32(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    const { blockLen, state } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i4 = 0; i4 < take; i4++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to4) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to4 || (to4 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to4.state32.set(this.state32);
    to4.pos = this.pos;
    to4.posOut = this.posOut;
    to4.finished = this.finished;
    to4.rounds = rounds;
    to4.suffix = suffix;
    to4.outputLen = outputLen;
    to4.enableXOF = enableXOF;
    to4.destroyed = this.destroyed;
    return to4;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = gen(6, 144, 224 / 8);
var sha3_256 = gen(6, 136, 256 / 8);
var sha3_384 = gen(6, 104, 384 / 8);
var sha3_512 = gen(6, 72, 512 / 8);
var keccak_224 = gen(1, 144, 224 / 8);
var keccak_256 = gen(1, 136, 256 / 8);
var keccak_384 = gen(1, 104, 384 / 8);
var keccak_512 = gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = genShake(31, 168, 128 / 8);
var shake256 = genShake(31, 136, 256 / 8);

// node_modules/@noble/hashes/esm/sha256.js
var SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = new Uint32Array(64);
var SHA2562 = class extends HashMD2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A3, B: B3, C: C4, D: D3, E: E3, F: F3, G: G5, H: H2 } = this;
    return [A3, B3, C4, D3, E3, F3, G5, H2];
  }
  // prettier-ignore
  set(A3, B3, C4, D3, E3, F3, G5, H2) {
    this.A = A3 | 0;
    this.B = B3 | 0;
    this.C = C4 | 0;
    this.D = D3 | 0;
    this.E = E3 | 0;
    this.F = F3 | 0;
    this.G = G5 | 0;
    this.H = H2 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA256_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 64; i4++) {
      const W15 = SHA256_W[i4 - 15];
      const W22 = SHA256_W[i4 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i4] = s1 + SHA256_W[i4 - 7] + s0 + SHA256_W[i4 - 16] | 0;
    }
    let { A: A3, B: B3, C: C4, D: D3, E: E3, F: F3, G: G5, H: H2 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      const sigma1 = rotr(E3, 6) ^ rotr(E3, 11) ^ rotr(E3, 25);
      const T1 = H2 + sigma1 + Chi2(E3, F3, G5) + SHA256_K[i4] + SHA256_W[i4] | 0;
      const sigma0 = rotr(A3, 2) ^ rotr(A3, 13) ^ rotr(A3, 22);
      const T22 = sigma0 + Maj2(A3, B3, C4) | 0;
      H2 = G5;
      G5 = F3;
      F3 = E3;
      E3 = D3 + T1 | 0;
      D3 = C4;
      C4 = B3;
      B3 = A3;
      A3 = T1 + T22 | 0;
    }
    A3 = A3 + this.A | 0;
    B3 = B3 + this.B | 0;
    C4 = C4 + this.C | 0;
    D3 = D3 + this.D | 0;
    E3 = E3 + this.E | 0;
    F3 = F3 + this.F | 0;
    G5 = G5 + this.G | 0;
    H2 = H2 + this.H | 0;
    this.set(A3, B3, C4, D3, E3, F3, G5, H2);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2242 = class extends SHA2562 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2564 = wrapConstructor(() => new SHA2562());
var sha2242 = wrapConstructor(() => new SHA2242());

// node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i4 = 0; i4 < 40; i4 += 2) {
    if (hash[i4 >> 1] >> 4 >= 8 && characters[i4]) {
      characters[i4] = characters[i4].toUpperCase();
    }
    if ((hash[i4 >> 1] & 15) >= 8 && characters[i4 + 1]) {
      characters[i4 + 1] = characters[i4 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size4 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i4 = 0; i4 < types.length; i4++) {
    const type = types[i4];
    const value = values[i4];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked3) {
  function encode9(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i4 = 0; i4 < value.length; i4++) {
        data.push(encode9(childType, value[i4], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode9;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j3 = 0; j3 < BASE_MAP.length; j3++) {
    BASE_MAP[j3] = 255;
  }
  for (let i4 = 0; i4 < ALPHABET2.length; i4++) {
    const x5 = ALPHABET2.charAt(i4);
    const xc2 = x5.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x5 + " is ambiguous");
    }
    BASE_MAP[xc2] = i4;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i4 = 0;
      for (let it1 = size4 - 1; (carry !== 0 || i4 < length2) && it1 !== -1; it1--, i4++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      pbegin++;
    }
    let it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size4);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i4 = 0;
      for (let it3 = size4 - 1; (carry !== 0 || i4 < length2) && it3 !== -1; it3--, i4++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i4;
      psz++;
    }
    let it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size4 - it4));
    let j3 = zeroes;
    while (it4 !== size4) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode9, decode: decode8 }) {
    if (type >= 0) {
      this.encoders[type] = encode9;
      this.decoders[type] = decode8;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode9;
      this.builtInDecoders[index] = decode8;
    }
  }
  tryToEncode(object, context) {
    for (let i4 = 0; i4 < this.builtInEncoders.length; i4++) {
      const encodeExt = this.builtInEncoders[i4];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i4;
          return new ExtData(type, data);
        }
      }
    }
    for (let i4 = 0; i4 < this.encoders.length; i4++) {
      const encodeExt = this.encoders[i4];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i4;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size4 = object.byteLength;
    if (size4 < 256) {
      this.writeU8(196);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(197);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large binary: ${size4}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size4 = object.length;
    if (size4 < 16) {
      this.writeU8(144 + size4);
    } else if (size4 < 65536) {
      this.writeU8(220);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large array: ${size4}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size4 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size4 < 16) {
      this.writeU8(128 + size4);
    } else if (size4 < 65536) {
      this.writeU8(222);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large map object: ${size4}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size5 = data.length;
      if (size5 >= 4294967296) {
        throw new Error(`Too large extension object: ${size5}`);
      }
      this.writeU8(201);
      this.writeU32(size5);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size4 = ext.data.length;
    if (size4 === 1) {
      this.writeU8(212);
    } else if (size4 === 2) {
      this.writeU8(213);
    } else if (size4 === 4) {
      this.writeU8(214);
    } else if (size4 === 8) {
      this.writeU8(215);
    } else if (size4 === 16) {
      this.writeU8(216);
    } else if (size4 < 256) {
      this.writeU8(199);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(200);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large extension object: ${size4}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size4 = values.length;
    this.ensureBufferSizeToWrite(size4);
    this.bytes.set(values, this.pos);
    this.pos += size4;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode4(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i4 = 0; i4 < this.maxKeyLength; i4++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j3 = 0; j3 < byteLength; j3++) {
        if (recordBytes[j3] !== bytes[inputOffset + j3]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_ARRAY;
    state.position = 0;
    state.size = size4;
    state.array = new Array(size4);
  }
  pushMapState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_MAP_KEY;
    state.readCount = 0;
    state.size = size4;
    state.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state.type === STATE_ARRAY) {
      const partialState = state;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
      const partialState = state;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e2) {
  if (!(e2 instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size4) {
    return this.view.byteLength - this.pos >= size4;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e2) {
          if (!(e2 instanceof RangeError)) {
            throw e2;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size4 = headByte - 128;
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size4 = headByte - 144;
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size4 = this.lookU8();
        object = this.decodeBinary(size4, 1);
      } else if (headByte === 197) {
        const size4 = this.lookU16();
        object = this.decodeBinary(size4, 2);
      } else if (headByte === 198) {
        const size4 = this.lookU32();
        object = this.decodeBinary(size4, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size4 = this.lookU8();
        object = this.decodeExtension(size4, 1);
      } else if (headByte === 200) {
        const size4 = this.lookU16();
        object = this.decodeExtension(size4, 2);
      } else if (headByte === 201) {
        const size4 = this.lookU32();
        object = this.decodeExtension(size4, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state = stack.top();
        if (state.type === STATE_ARRAY) {
          state.array[state.position] = object;
          state.position++;
          if (state.position === state.size) {
            object = state.array;
            stack.release(state);
          } else {
            continue DECODE;
          }
        } else if (state.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state.key = this.mapKeyConverter(object);
          state.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state.map[state.key] = object;
          state.readCount++;
          if (state.readCount === state.size) {
            object = state.map;
            stack.release(state);
          } else {
            state.key = null;
            state.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size4) {
    if (size4 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size4}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size4);
  }
  pushArrayState(size4) {
    if (size4 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size4}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size4);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state = this.stack.top();
      return state.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size4, headOffset) {
    if (size4 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size4}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size4,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/@scure/base/lib/esm/index.js
function isBytes3(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function abytes2(b4, ...lengths) {
  if (!isBytes3(b4))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b4.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b4.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber2(n5) {
  if (!Number.isSafeInteger(n5))
    throw new Error(`invalid integer: ${n5}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a3) => a3;
  const wrap = (a3, b4) => (c6) => a3(b4(c6));
  const encode9 = args.map((x5) => x5.encode).reduceRight(wrap, id);
  const decode8 = args.map((x5) => x5.decode).reduce(wrap, id);
  return { encode: encode9, decode: decode8 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l6, i4) => [l6, i4]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i4) => {
        if (!Number.isSafeInteger(i4) || i4 < 0 || i4 >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i4}". Allowed: ${letters}`);
        return lettersA[i4];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i4 = indexes.get(letter);
        if (i4 === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i4;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from8) => {
      astrArr("join.decode", from8);
      return from8.join(separator);
    },
    decode: (to4) => {
      astr("join.decode", to4);
      return to4.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber2(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn3) {
  afn(fn3);
  return { encode: (from8) => from8, decode: (to4) => fn3(to4) };
}
function convertRadix(data, from8, to4) {
  if (from8 < 2)
    throw new Error(`convertRadix: invalid from=${from8}, base cannot be less than 2`);
  if (to4 < 2)
    throw new Error(`convertRadix: invalid to=${to4}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d5) => {
    anumber2(d5);
    if (d5 < 0 || d5 >= from8)
      throw new Error(`invalid integer: ${d5}`);
    return d5;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i4 = pos; i4 < dlen; i4++) {
      const digit = digits[i4];
      const fromCarry = from8 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from8 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to4;
      carry = digitBase % to4;
      const rounded = Math.floor(div);
      digits[i4] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to4 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i4;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i4 = 0; i4 < data.length - 1 && data[i4] === 0; i4++)
    res.push(0);
  return res.reverse();
}
var gcd = (a3, b4) => b4 === 0 ? a3 : gcd(b4, a3 % b4);
var radix2carry = (from8, to4) => from8 + (to4 - gcd(from8, to4));
var powers = (() => {
  let res = [];
  for (let i4 = 0; i4 < 40; i4++)
    res.push(2 ** i4);
  return res;
})();
function convertRadix2(data, from8, to4, padding2) {
  aArr(data);
  if (from8 <= 0 || from8 > 32)
    throw new Error(`convertRadix2: wrong from=${from8}`);
  if (to4 <= 0 || to4 > 32)
    throw new Error(`convertRadix2: wrong to=${to4}`);
  if (radix2carry(from8, to4) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from8} to=${to4} carryBits=${radix2carry(from8, to4)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from8];
  const mask = powers[to4] - 1;
  const res = [];
  for (const n5 of data) {
    anumber2(n5);
    if (n5 >= max)
      throw new Error(`convertRadix2: invalid data word=${n5} from=${from8}`);
    carry = carry << from8 | n5;
    if (pos + from8 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from8}`);
    pos += from8;
    for (; pos >= to4; pos -= to4)
      res.push((carry >> pos - to4 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to4 - pos & mask;
  if (!padding2 && pos >= from8)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  anumber2(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes3(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber2(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes3(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn3) {
  afn(fn3);
  return function(...args) {
    try {
      return fn3.apply(null, args);
    } catch (e2) {
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s3) => s3.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s3, isUrl) => {
  astr("base64", s3);
  const re2 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s3.length > 0 && !re2.test(s3))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s3, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b4) {
    abytes2(b4);
    return b4.toBase64();
  },
  decode(s3) {
    return decodeBase64Builtin(s3, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b4) {
    abytes2(b4);
    return b4.toBase64({ alphabet: "base64url" });
  },
  decode(s3) {
    return decodeBase64Builtin(s3, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b4 = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i4 = 0; i4 < POLYMOD_GENERATORS.length; i4++) {
    if ((b4 >> i4 & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i4];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i4 = 0; i4 < len; i4++) {
    const c6 = prefix.charCodeAt(i4);
    if (c6 < 33 || c6 > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c6 >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i4 = 0; i4 < len; i4++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i4) & 31;
  for (let v5 of words)
    chk = bech32Polymod(chk) ^ v5;
  for (let i4 = 0; i4 < 6; i4++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode9(prefix, words, limit = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes3(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode8(str, limit = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit !== false && slen > limit)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode8);
  function decodeToBytes(str) {
    const { prefix, words } = decode8(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode9(prefix, toWords(bytes));
  }
  return {
    encode: encode9,
    decode: decode8,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes2(data);
    return data.toHex();
  },
  decode(s3) {
    astr("hex", s3);
    return Uint8Array.fromHex(s3);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s3) => {
  if (typeof s3 !== "string" || s3.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s3} with length ${s3.length}`);
  return s3.toLowerCase();
}));

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size4 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size4));
  }
  return new Uint8Array(size4);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j3 = 0; j3 < BASE_MAP.length; j3++) {
    BASE_MAP[j3] = 255;
  }
  for (var i4 = 0; i4 < ALPHABET2.length; i4++) {
    var x5 = ALPHABET2.charAt(i4);
    var xc2 = x5.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x5 + " is ambiguous");
    }
    BASE_MAP[xc2] = i4;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i5 = 0;
      for (var it1 = size4 - 1; (carry !== 0 || i5 < length2) && it1 !== -1; it1--, i5++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      pbegin++;
    }
    var it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size4);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i5 = 0;
      for (var it3 = size4 - 1; (carry !== 0 || i5 < length2) && it3 !== -1; it3--, i5++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size4 - it4));
    var j4 = zeroes;
    while (it4 !== size4) {
      vch[j4++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii3 = 0; ii3 < aa2.byteLength; ii3++) {
    if (aa2[ii3] !== bb[ii3]) {
      return false;
    }
  }
  return true;
};
var coerce = (o4) => {
  if (o4 instanceof Uint8Array && o4.constructor.name === "Uint8Array")
    return o4;
  if (o4 instanceof ArrayBuffer)
    return new Uint8Array(o4);
  if (ArrayBuffer.isView(o4)) {
    return new Uint8Array(o4.buffer, o4.byteOffset, o4.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString2 = (b4) => new TextDecoder().decode(b4);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from6 = ({ name: name2, prefix, encode: encode9, decode: decode8 }) => new Codec(name2, prefix, encode9, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode9, decode: decode8 } = base_x_default(alphabet3, name2);
  return from6({
    prefix,
    name: name2,
    encode: encode9,
    decode: (text) => coerce(decode8(text))
  });
};
var decode3 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i4 = 0; i4 < alphabet3.length; ++i4) {
    codes[alphabet3[i4]] = i4;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i4 = 0; i4 < end; ++i4) {
    const value = codes[string2[i4]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode5 = (data, alphabet3, bitsPerChar) => {
  const pad2 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i4 = 0; i4 < data.length; ++i4) {
    buffer = buffer << 8 | data[i4];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer << bitsPerChar - bits];
  }
  if (pad2) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from6({
    prefix,
    name: name2,
    encode(input) {
      return encode5(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode3(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from6({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString3(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p3, c6, i4) => {
  p3[i4] = c6;
  return p3;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p3, c6, i4) => {
  p3[c6.codePointAt(0)] = i4;
  return p3;
}, []);
function encode6(data) {
  return data.reduce((p3, c6) => {
    p3 += alphabetBytesToChars[c6];
    return p3;
  }, "");
}
function decode4(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from6({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode6,
  decode: decode4
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2565,
  sha512: () => sha512
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode7;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode7(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode7.bytes = offset - oldOffset + 1;
  return out;
}
var decode5 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b4, l6 = buf.length;
  do {
    if (counter >= l6) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b4 = buf[counter++];
    res += shift < 28 ? (b4 & REST$1) << shift : (b4 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b4 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode5,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode6 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size4 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size4);
  const bytes = new Uint8Array(digestOffset + size4);
  encodeTo(code2, bytes, 0);
  encodeTo(size4, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size4, digest2, bytes);
};
var decode7 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode6(bytes);
  const [size4, digestOffset] = decode6(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size4) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size4, digest2, bytes);
};
var equals2 = (a3, b4) => {
  if (a3 === b4) {
    return true;
  } else {
    return a3.code === b4.code && a3.size === b4.size && equals(a3.bytes, b4.bytes);
  }
};
var Digest = class {
  constructor(code2, size4, digest2, bytes) {
    this.code = code2;
    this.size = size4;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from7 = ({ name: name2, code: code2, encode: encode9 }) => new Hasher(name2, code2, encode9);
var Hasher = class {
  constructor(name2, code2, encode9) {
    this.name = name2;
    this.code = code2;
    this.encode = encode9;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2565 = from7({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from7({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode8 = coerce;
var digest = (input) => create2(code, encode8(input));
var identity2 = {
  code,
  name,
  encode: encode8,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode7(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i4, length2] = decode6(initialBytes.subarray(offset));
      offset += length2;
      return i4;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size4 = offset + digestSize;
    const multihashSize = size4 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size4
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder = base3 || base322;
      return [
        base322.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode9, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode9
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i4 = 0; i4 < buf.length; i4++) {
    string2 += String.fromCharCode(buf[i4]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i4 = 0; i4 < str.length; i4++) {
    buf[i4] = str.charCodeAt(i4);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe2 = ":";
function Fe(t) {
  const [e2, n5] = t.split(xe2);
  return { namespace: e2, reference: n5 };
}
function ve2(t, e2) {
  return t.includes(":") ? [t] : e2.chains || [];
}
var $s = Object.defineProperty;
var Cs = Object.defineProperties;
var Ls = Object.getOwnPropertyDescriptors;
var Jn2 = Object.getOwnPropertySymbols;
var js = Object.prototype.hasOwnProperty;
var ks = Object.prototype.propertyIsEnumerable;
var Ze2 = (t, e2, n5) => e2 in t ? $s(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var Qn2 = (t, e2) => {
  for (var n5 in e2 || (e2 = {})) js.call(e2, n5) && Ze2(t, n5, e2[n5]);
  if (Jn2) for (var n5 of Jn2(e2)) ks.call(e2, n5) && Ze2(t, n5, e2[n5]);
  return t;
};
var Ps = (t, e2) => Cs(t, Ls(e2));
var tr2 = (t, e2, n5) => Ze2(t, typeof e2 != "symbol" ? e2 + "" : e2, n5);
var er2 = "ReactNative";
var J3 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var rr2 = "js";
function Ye2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt2() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === er2;
}
function Ms() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Vs() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt2() {
  return !Ye2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt2() {
  return Bt2() ? J3.reactNative : Ye2() ? J3.node : zt2() ? J3.browser : J3.unknown;
}
function qs() {
  var t;
  try {
    return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function or3(t, e2) {
  const n5 = new URLSearchParams(t);
  for (const r3 of Object.keys(e2).sort()) if (e2.hasOwnProperty(r3)) {
    const o4 = e2[r3];
    o4 !== void 0 && n5.set(r3, o4);
  }
  return n5.toString();
}
function Ks(t) {
  var e2, n5;
  const r3 = sr2();
  try {
    return t != null && t.url && r3.url && new URL(t.url).host !== new URL(r3.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r3.url}. This is probably unintended and can lead to issues.`), t.url = r3.url), (e2 = t == null ? void 0 : t.icons) != null && e2.length && t.icons.length > 0 && (t.icons = t.icons.filter((o4) => o4 !== "")), Ps(Qn2(Qn2({}, r3), t), { url: (t == null ? void 0 : t.url) || r3.url, name: (t == null ? void 0 : t.name) || r3.name, description: (t == null ? void 0 : t.description) || r3.description, icons: (n5 = t == null ? void 0 : t.icons) != null && n5.length && t.icons.length > 0 ? t.icons : r3.icons });
  } catch (o4) {
    return console.warn("Error populating app metadata", o4), t || r3;
  }
}
function sr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function ir2() {
  if (Pt2() === J3.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n5, Version: r3 } = global.Platform;
    return [n5, r3].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e2 = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e2, t.name, t.version].join("-") : [e2, t.version].join("-");
}
function fr2() {
  var t;
  const e2 = Pt2();
  return e2 === J3.browser ? [e2, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e2;
}
function cr2(t, e2, n5) {
  const r3 = ir2(), o4 = fr2();
  return [[t, e2].join("-"), [rr2, n5].join("-"), r3, o4].join("/");
}
function zs({ protocol: t, version: e2, relayUrl: n5, sdkVersion: r3, auth: o4, projectId: s3, useOnCloseEvent: i4, bundleId: f7, packageName: a3 }) {
  const l6 = n5.split("?"), c6 = cr2(t, e2, r3), u2 = { auth: o4, ua: c6, projectId: s3, useOnCloseEvent: i4 || void 0, packageName: a3 || void 0, bundleId: f7 || void 0 }, h5 = or3(l6[1] || "", u2);
  return l6[0] + "?" + h5;
}
function It2(t, e2) {
  return t.filter((n5) => e2.includes(n5)).length === t.length;
}
function Ys(t) {
  return Object.fromEntries(t.entries());
}
function Xs(t) {
  return new Map(Object.entries(t));
}
function ei(t = import_time3.FIVE_MINUTES, e2) {
  const n5 = (0, import_time3.toMiliseconds)(t || import_time3.FIVE_MINUTES);
  let r3, o4, s3, i4;
  return { resolve: (f7) => {
    s3 && r3 && (clearTimeout(s3), r3(f7), i4 = Promise.resolve(f7));
  }, reject: (f7) => {
    s3 && o4 && (clearTimeout(s3), o4(f7));
  }, done: () => new Promise((f7, a3) => {
    if (i4) return f7(i4);
    s3 = setTimeout(() => {
      const l6 = new Error(e2);
      i4 = Promise.reject(l6), a3(l6);
    }, n5), r3 = f7, o4 = a3;
  }) };
}
function ni(t, e2, n5) {
  return new Promise(async (r3, o4) => {
    const s3 = setTimeout(() => o4(new Error(n5)), e2);
    try {
      const i4 = await t;
      r3(i4);
    } catch (i4) {
      o4(i4);
    }
    clearTimeout(s3);
  });
}
function Xe2(t, e2) {
  if (typeof e2 == "string" && e2.startsWith(`${t}:`)) return e2;
  if (t.toLowerCase() === "topic") {
    if (typeof e2 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e2}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e2 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e2}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function ri(t) {
  return Xe2("topic", t);
}
function oi(t) {
  return Xe2("id", t);
}
function si(t) {
  const [e2, n5] = t.split(":"), r3 = { id: void 0, topic: void 0 };
  if (e2 === "topic" && typeof n5 == "string") r3.topic = n5;
  else if (e2 === "id" && Number.isInteger(Number(n5))) r3.id = Number(n5);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e2}:${n5}`);
  return r3;
}
function ii(t, e2) {
  return (0, import_time3.fromMiliseconds)((e2 || Date.now()) + (0, import_time3.toMiliseconds)(t));
}
function fi(t) {
  return Date.now() >= (0, import_time3.toMiliseconds)(t);
}
function ci(t, e2) {
  return `${t}${e2 ? `:${e2}` : ""}`;
}
function ct2(t = [], e2 = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e2])];
}
async function ai({ id: t, topic: e2, wcDeepLink: n5 }) {
  var r3;
  try {
    if (!n5) return;
    const o4 = typeof n5 == "string" ? JSON.parse(n5) : n5, s3 = o4 == null ? void 0 : o4.href;
    if (typeof s3 != "string") return;
    const i4 = dr2(s3, t, e2), f7 = Pt2();
    if (f7 === J3.browser) {
      if (!((r3 = (0, import_window_getters.getDocument)()) != null && r3.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      hr2(i4);
    } else f7 === J3.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i4);
  } catch (o4) {
    console.error(o4);
  }
}
function dr2(t, e2, n5) {
  const r3 = `requestId=${e2}&sessionTopic=${n5}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o4 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s3 = t.includes("?") ? "&startapp=" : "?startapp=";
    o4 = `${o4}${s3}${br2(r3, true)}`;
  } else o4 = `${o4}/wc?${r3}`;
  return o4;
}
function hr2(t) {
  let e2 = "_self";
  gr2() ? e2 = "_top" : (pr2() || t.startsWith("https://") || t.startsWith("http://")) && (e2 = "_blank"), window.open(t, e2, "noreferrer noopener");
}
async function ui(t, e2) {
  let n5 = "";
  try {
    if (zt2() && (n5 = localStorage.getItem(e2), n5)) return n5;
    n5 = await t.getItem(e2);
  } catch (r3) {
    console.error(r3);
  }
  return n5;
}
function li(t, e2) {
  if (!t.includes(e2)) return null;
  const n5 = t.split(/([&,?,=])/), r3 = n5.indexOf(e2);
  return n5[r3 + 2];
}
function di() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e2 = Math.random() * 16 | 0;
    return (t === "x" ? e2 : e2 & 3 | 8).toString(16);
  });
}
function hi() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function pr2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function gr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function br2(t, e2 = false) {
  const n5 = Buffer.from(t).toString("base64");
  return e2 ? n5.replace(/[=]/g, "") : n5;
}
function Qe2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function pi(t) {
  return new Promise((e2) => setTimeout(e2, t));
}
var gi = class {
  constructor({ limit: e2 }) {
    tr2(this, "limit"), tr2(this, "set"), this.limit = e2, this.set = /* @__PURE__ */ new Set();
  }
  add(e2) {
    if (!this.set.has(e2)) {
      if (this.set.size >= this.limit) {
        const n5 = this.set.values().next().value;
        n5 && this.set.delete(n5);
      }
      this.set.add(e2);
    }
  }
  has(e2) {
    return this.set.has(e2);
  }
};
var Be2 = BigInt(2 ** 32 - 1);
var yr2 = BigInt(32);
function mr2(t, e2 = false) {
  return e2 ? { h: Number(t & Be2), l: Number(t >> yr2 & Be2) } : { h: Number(t >> yr2 & Be2) | 0, l: Number(t & Be2) | 0 };
}
function wr2(t, e2 = false) {
  const n5 = t.length;
  let r3 = new Uint32Array(n5), o4 = new Uint32Array(n5);
  for (let s3 = 0; s3 < n5; s3++) {
    const { h: i4, l: f7 } = mr2(t[s3], e2);
    [r3[s3], o4[s3]] = [i4, f7];
  }
  return [r3, o4];
}
var xr2 = (t, e2, n5) => t >>> n5;
var vr2 = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var At = (t, e2, n5) => t >>> n5 | e2 << 32 - n5;
var St2 = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var se = (t, e2, n5) => t << 64 - n5 | e2 >>> n5 - 32;
var ie = (t, e2, n5) => t >>> n5 - 32 | e2 << 64 - n5;
var bi = (t, e2) => e2;
var yi = (t, e2) => t;
var mi = (t, e2, n5) => t << n5 | e2 >>> 32 - n5;
var wi = (t, e2, n5) => e2 << n5 | t >>> 32 - n5;
var xi = (t, e2, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var vi = (t, e2, n5) => t << n5 - 32 | e2 >>> 64 - n5;
function dt2(t, e2, n5, r3) {
  const o4 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n5 + (o4 / 2 ** 32 | 0) | 0, l: o4 | 0 };
}
var tn = (t, e2, n5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0);
var en2 = (t, e2, n5, r3) => e2 + n5 + r3 + (t / 2 ** 32 | 0) | 0;
var Ei = (t, e2, n5, r3) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var Bi = (t, e2, n5, r3, o4) => e2 + n5 + r3 + o4 + (t / 2 ** 32 | 0) | 0;
var Ii = (t, e2, n5, r3, o4) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o4 >>> 0);
var Ai = (t, e2, n5, r3, o4, s3) => e2 + n5 + r3 + o4 + s3 + (t / 2 ** 32 | 0) | 0;
var Gt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function nn2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function at(t, ...e2) {
  if (!nn2(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function rn2(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt2(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function on2(t, e2) {
  at(t);
  const n5 = e2.outputLen;
  if (t.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function fe2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function ut2(...t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2].fill(0);
}
function sn2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function gt2(t, e2) {
  return t << 32 - e2 | t >>> e2;
}
var Er2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Br2(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt2 = Er2 ? (t) => t : (t) => Br2(t);
function Si(t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2] = Br2(t[e2]);
  return t;
}
var Ot2 = Er2 ? (t) => t : Si;
var Ir2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ni = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function ce(t) {
  if (at(t), Ir2) return t.toHex();
  let e2 = "";
  for (let n5 = 0; n5 < t.length; n5++) e2 += Ni[t[n5]];
  return e2;
}
var xt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ar2(t) {
  if (t >= xt2._0 && t <= xt2._9) return t - xt2._0;
  if (t >= xt2.A && t <= xt2.F) return t - (xt2.A - 10);
  if (t >= xt2.a && t <= xt2.f) return t - (xt2.a - 10);
}
function fn(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  if (Ir2) return Uint8Array.fromHex(t);
  const e2 = t.length, n5 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n5);
  for (let o4 = 0, s3 = 0; o4 < n5; o4++, s3 += 2) {
    const i4 = Ar2(t.charCodeAt(s3)), f7 = Ar2(t.charCodeAt(s3 + 1));
    if (i4 === void 0 || f7 === void 0) {
      const a3 = t[s3] + t[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + a3 + '" at index ' + s3);
    }
    r3[o4] = i4 * 16 + f7;
  }
  return r3;
}
function Oi(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ht2(t) {
  return typeof t == "string" && (t = Oi(t)), at(t), t;
}
function Ht2(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o4 = t[r3];
    at(o4), e2 += o4.length;
  }
  const n5 = new Uint8Array(e2);
  for (let r3 = 0, o4 = 0; r3 < t.length; r3++) {
    const s3 = t[r3];
    n5.set(s3, o4), o4 += s3.length;
  }
  return n5;
}
var Ie2 = class {
};
function ae(t) {
  const e2 = (r3) => t().update(ht2(r3)).digest(), n5 = t();
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = () => t(), e2;
}
function Ui(t) {
  const e2 = (r3, o4) => t(o4).update(ht2(r3)).digest(), n5 = t({});
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = (r3) => t(r3), e2;
}
function Zt2(t = 32) {
  if (Gt2 && typeof Gt2.getRandomValues == "function") return Gt2.getRandomValues(new Uint8Array(t));
  if (Gt2 && typeof Gt2.randomBytes == "function") return Uint8Array.from(Gt2.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var _i = BigInt(0);
var ue = BigInt(1);
var Ti = BigInt(2);
var Ri = BigInt(7);
var $i = BigInt(256);
var Ci = BigInt(113);
var Sr2 = [];
var Nr2 = [];
var Or2 = [];
for (let t = 0, e2 = ue, n5 = 1, r3 = 0; t < 24; t++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], Sr2.push(2 * (5 * r3 + n5)), Nr2.push((t + 1) * (t + 2) / 2 % 64);
  let o4 = _i;
  for (let s3 = 0; s3 < 7; s3++) e2 = (e2 << ue ^ (e2 >> Ri) * Ci) % $i, e2 & Ti && (o4 ^= ue << (ue << BigInt(s3)) - ue);
  Or2.push(o4);
}
var Ur2 = wr2(Or2, true);
var Li = Ur2[0];
var ji = Ur2[1];
var _r2 = (t, e2, n5) => n5 > 32 ? xi(t, e2, n5) : mi(t, e2, n5);
var Tr2 = (t, e2, n5) => n5 > 32 ? vi(t, e2, n5) : wi(t, e2, n5);
function ki(t, e2 = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - e2; r3 < 24; r3++) {
    for (let i4 = 0; i4 < 10; i4++) n5[i4] = t[i4] ^ t[i4 + 10] ^ t[i4 + 20] ^ t[i4 + 30] ^ t[i4 + 40];
    for (let i4 = 0; i4 < 10; i4 += 2) {
      const f7 = (i4 + 8) % 10, a3 = (i4 + 2) % 10, l6 = n5[a3], c6 = n5[a3 + 1], u2 = _r2(l6, c6, 1) ^ n5[f7], h5 = Tr2(l6, c6, 1) ^ n5[f7 + 1];
      for (let g4 = 0; g4 < 50; g4 += 10) t[i4 + g4] ^= u2, t[i4 + g4 + 1] ^= h5;
    }
    let o4 = t[2], s3 = t[3];
    for (let i4 = 0; i4 < 24; i4++) {
      const f7 = Nr2[i4], a3 = _r2(o4, s3, f7), l6 = Tr2(o4, s3, f7), c6 = Sr2[i4];
      o4 = t[c6], s3 = t[c6 + 1], t[c6] = a3, t[c6 + 1] = l6;
    }
    for (let i4 = 0; i4 < 50; i4 += 10) {
      for (let f7 = 0; f7 < 10; f7++) n5[f7] = t[i4 + f7];
      for (let f7 = 0; f7 < 10; f7++) t[i4 + f7] ^= ~n5[(f7 + 2) % 10] & n5[(f7 + 4) % 10];
    }
    t[0] ^= Li[r3], t[1] ^= ji[r3];
  }
  ut2(n5);
}
var qn2 = class _qn extends Ie2 {
  constructor(e2, n5, r3, o4 = false, s3 = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e2, this.suffix = n5, this.outputLen = r3, this.enableXOF = o4, this.rounds = s3, mt(r3), !(0 < e2 && e2 < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot2(this.state32), ki(this.state32, this.rounds), Ot2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { blockLen: n5, state: r3 } = this, o4 = e2.length;
    for (let s3 = 0; s3 < o4; ) {
      const i4 = Math.min(n5 - this.pos, o4 - s3);
      for (let f7 = 0; f7 < i4; f7++) r3[this.pos++] ^= e2[s3++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e2, suffix: n5, pos: r3, blockLen: o4 } = this;
    e2[r3] ^= n5, (n5 & 128) !== 0 && r3 === o4 - 1 && this.keccak(), e2[o4 - 1] ^= 128, this.keccak();
  }
  writeInto(e2) {
    Nt2(this, false), at(e2), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o4 = 0, s3 = e2.length; o4 < s3; ) {
      this.posOut >= r3 && this.keccak();
      const i4 = Math.min(r3 - this.posOut, s3 - o4);
      e2.set(n5.subarray(this.posOut, this.posOut + i4), o4), this.posOut += i4, o4 += i4;
    }
    return e2;
  }
  xofInto(e2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e2);
  }
  xof(e2) {
    return mt(e2), this.xofInto(new Uint8Array(e2));
  }
  digestInto(e2) {
    if (on2(e2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e2), this.destroy(), e2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut2(this.state);
  }
  _cloneInto(e2) {
    const { blockLen: n5, suffix: r3, outputLen: o4, rounds: s3, enableXOF: i4 } = this;
    return e2 || (e2 = new _qn(n5, r3, o4, i4, s3)), e2.state32.set(this.state32), e2.pos = this.pos, e2.posOut = this.posOut, e2.finished = this.finished, e2.rounds = s3, e2.suffix = r3, e2.outputLen = o4, e2.enableXOF = i4, e2.destroyed = this.destroyed, e2;
  }
};
var Pi2 = (t, e2, n5) => ae(() => new qn2(e2, t, n5));
var Hi = Pi2(1, 136, 256 / 8);
function Di(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o4 & s3), f7 = Number(n5 & s3), a3 = r3 ? 4 : 0, l6 = r3 ? 0 : 4;
  t.setUint32(e2 + a3, i4, r3), t.setUint32(e2 + l6, f7, r3);
}
function Mi(t, e2, n5) {
  return t & e2 ^ ~t & n5;
}
function Vi(t, e2, n5) {
  return t & e2 ^ t & n5 ^ e2 & n5;
}
var Rr2 = class extends Ie2 {
  constructor(e2, n5, r3, o4) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e2, this.outputLen = n5, this.padOffset = r3, this.isLE = o4, this.buffer = new Uint8Array(e2), this.view = sn2(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { view: n5, buffer: r3, blockLen: o4 } = this, s3 = e2.length;
    for (let i4 = 0; i4 < s3; ) {
      const f7 = Math.min(o4 - this.pos, s3 - i4);
      if (f7 === o4) {
        const a3 = sn2(e2);
        for (; o4 <= s3 - i4; i4 += o4) this.process(a3, i4);
        continue;
      }
      r3.set(e2.subarray(i4, i4 + f7), this.pos), this.pos += f7, i4 += f7, this.pos === o4 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    Nt2(this), on2(e2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o4, isLE: s3 } = this;
    let { pos: i4 } = this;
    n5[i4++] = 128, ut2(this.buffer.subarray(i4)), this.padOffset > o4 - i4 && (this.process(r3, 0), i4 = 0);
    for (let u2 = i4; u2 < o4; u2++) n5[u2] = 0;
    Di(r3, o4 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const f7 = sn2(e2), a3 = this.outputLen;
    if (a3 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l6 = a3 / 4, c6 = this.get();
    if (l6 > c6.length) throw new Error("_sha2: outputLen bigger than state");
    for (let u2 = 0; u2 < l6; u2++) f7.setUint32(4 * u2, c6[u2], s3);
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o4, finished: s3, destroyed: i4, pos: f7 } = this;
    return e2.destroyed = i4, e2.finished = s3, e2.length = o4, e2.pos = f7, o4 % n5 && e2.buffer.set(r3), e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var qi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t2 = new Uint32Array(64);
var Ki = class extends Rr2 {
  constructor(e2 = 32) {
    super(64, e2, 8, false), this.A = Ut2[0] | 0, this.B = Ut2[1] | 0, this.C = Ut2[2] | 0, this.D = Ut2[3] | 0, this.E = Ut2[4] | 0, this.F = Ut2[5] | 0, this.G = Ut2[6] | 0, this.H = Ut2[7] | 0;
  }
  get() {
    const { A: e2, B: n5, C: r3, D: o4, E: s3, F: i4, G: f7, H: a3 } = this;
    return [e2, n5, r3, o4, s3, i4, f7, a3];
  }
  set(e2, n5, r3, o4, s3, i4, f7, a3) {
    this.A = e2 | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o4 | 0, this.E = s3 | 0, this.F = i4 | 0, this.G = f7 | 0, this.H = a3 | 0;
  }
  process(e2, n5) {
    for (let u2 = 0; u2 < 16; u2++, n5 += 4) _t2[u2] = e2.getUint32(n5, false);
    for (let u2 = 16; u2 < 64; u2++) {
      const h5 = _t2[u2 - 15], g4 = _t2[u2 - 2], w3 = gt2(h5, 7) ^ gt2(h5, 18) ^ h5 >>> 3, y4 = gt2(g4, 17) ^ gt2(g4, 19) ^ g4 >>> 10;
      _t2[u2] = y4 + _t2[u2 - 7] + w3 + _t2[u2 - 16] | 0;
    }
    let { A: r3, B: o4, C: s3, D: i4, E: f7, F: a3, G: l6, H: c6 } = this;
    for (let u2 = 0; u2 < 64; u2++) {
      const h5 = gt2(f7, 6) ^ gt2(f7, 11) ^ gt2(f7, 25), g4 = c6 + h5 + Mi(f7, a3, l6) + qi[u2] + _t2[u2] | 0, y4 = (gt2(r3, 2) ^ gt2(r3, 13) ^ gt2(r3, 22)) + Vi(r3, o4, s3) | 0;
      c6 = l6, l6 = a3, a3 = f7, f7 = i4 + g4 | 0, i4 = s3, s3 = o4, o4 = r3, r3 = g4 + y4 | 0;
    }
    r3 = r3 + this.A | 0, o4 = o4 + this.B | 0, s3 = s3 + this.C | 0, i4 = i4 + this.D | 0, f7 = f7 + this.E | 0, a3 = a3 + this.F | 0, l6 = l6 + this.G | 0, c6 = c6 + this.H | 0, this.set(r3, o4, s3, i4, f7, a3, l6, c6);
  }
  roundClean() {
    ut2(_t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut2(this.buffer);
  }
};
var $r2 = wr2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var Fi = $r2[0];
var zi = $r2[1];
var Tt2 = new Uint32Array(80);
var Rt2 = new Uint32Array(80);
var cn = class extends Rr2 {
  constructor(e2 = 64) {
    super(128, e2, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e2, Al: n5, Bh: r3, Bl: o4, Ch: s3, Cl: i4, Dh: f7, Dl: a3, Eh: l6, El: c6, Fh: u2, Fl: h5, Gh: g4, Gl: w3, Hh: y4, Hl: x5 } = this;
    return [e2, n5, r3, o4, s3, i4, f7, a3, l6, c6, u2, h5, g4, w3, y4, x5];
  }
  set(e2, n5, r3, o4, s3, i4, f7, a3, l6, c6, u2, h5, g4, w3, y4, x5) {
    this.Ah = e2 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o4 | 0, this.Ch = s3 | 0, this.Cl = i4 | 0, this.Dh = f7 | 0, this.Dl = a3 | 0, this.Eh = l6 | 0, this.El = c6 | 0, this.Fh = u2 | 0, this.Fl = h5 | 0, this.Gh = g4 | 0, this.Gl = w3 | 0, this.Hh = y4 | 0, this.Hl = x5 | 0;
  }
  process(e2, n5) {
    for (let L2 = 0; L2 < 16; L2++, n5 += 4) Tt2[L2] = e2.getUint32(n5), Rt2[L2] = e2.getUint32(n5 += 4);
    for (let L2 = 16; L2 < 80; L2++) {
      const V4 = Tt2[L2 - 15] | 0, _3 = Rt2[L2 - 15] | 0, k5 = At(V4, _3, 1) ^ At(V4, _3, 8) ^ xr2(V4, _3, 7), j3 = St2(V4, _3, 1) ^ St2(V4, _3, 8) ^ vr2(V4, _3, 7), $2 = Tt2[L2 - 2] | 0, d5 = Rt2[L2 - 2] | 0, m3 = At($2, d5, 19) ^ se($2, d5, 61) ^ xr2($2, d5, 6), p3 = St2($2, d5, 19) ^ ie($2, d5, 61) ^ vr2($2, d5, 6), b4 = Ei(j3, p3, Rt2[L2 - 7], Rt2[L2 - 16]), v5 = Bi(b4, k5, m3, Tt2[L2 - 7], Tt2[L2 - 16]);
      Tt2[L2] = v5 | 0, Rt2[L2] = b4 | 0;
    }
    let { Ah: r3, Al: o4, Bh: s3, Bl: i4, Ch: f7, Cl: a3, Dh: l6, Dl: c6, Eh: u2, El: h5, Fh: g4, Fl: w3, Gh: y4, Gl: x5, Hh: R4, Hl: M5 } = this;
    for (let L2 = 0; L2 < 80; L2++) {
      const V4 = At(u2, h5, 14) ^ At(u2, h5, 18) ^ se(u2, h5, 41), _3 = St2(u2, h5, 14) ^ St2(u2, h5, 18) ^ ie(u2, h5, 41), k5 = u2 & g4 ^ ~u2 & y4, j3 = h5 & w3 ^ ~h5 & x5, $2 = Ii(M5, _3, j3, zi[L2], Rt2[L2]), d5 = Ai($2, R4, V4, k5, Fi[L2], Tt2[L2]), m3 = $2 | 0, p3 = At(r3, o4, 28) ^ se(r3, o4, 34) ^ se(r3, o4, 39), b4 = St2(r3, o4, 28) ^ ie(r3, o4, 34) ^ ie(r3, o4, 39), v5 = r3 & s3 ^ r3 & f7 ^ s3 & f7, B3 = o4 & i4 ^ o4 & a3 ^ i4 & a3;
      R4 = y4 | 0, M5 = x5 | 0, y4 = g4 | 0, x5 = w3 | 0, g4 = u2 | 0, w3 = h5 | 0, { h: u2, l: h5 } = dt2(l6 | 0, c6 | 0, d5 | 0, m3 | 0), l6 = f7 | 0, c6 = a3 | 0, f7 = s3 | 0, a3 = i4 | 0, s3 = r3 | 0, i4 = o4 | 0;
      const E3 = tn(m3, b4, B3);
      r3 = en2(E3, d5, p3, v5), o4 = E3 | 0;
    }
    ({ h: r3, l: o4 } = dt2(this.Ah | 0, this.Al | 0, r3 | 0, o4 | 0)), { h: s3, l: i4 } = dt2(this.Bh | 0, this.Bl | 0, s3 | 0, i4 | 0), { h: f7, l: a3 } = dt2(this.Ch | 0, this.Cl | 0, f7 | 0, a3 | 0), { h: l6, l: c6 } = dt2(this.Dh | 0, this.Dl | 0, l6 | 0, c6 | 0), { h: u2, l: h5 } = dt2(this.Eh | 0, this.El | 0, u2 | 0, h5 | 0), { h: g4, l: w3 } = dt2(this.Fh | 0, this.Fl | 0, g4 | 0, w3 | 0), { h: y4, l: x5 } = dt2(this.Gh | 0, this.Gl | 0, y4 | 0, x5 | 0), { h: R4, l: M5 } = dt2(this.Hh | 0, this.Hl | 0, R4 | 0, M5 | 0), this.set(r3, o4, s3, i4, f7, a3, l6, c6, u2, h5, g4, w3, y4, x5, R4, M5);
  }
  roundClean() {
    ut2(Tt2, Rt2);
  }
  destroy() {
    ut2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Gi = class extends cn {
  constructor() {
    super(48), this.Ah = W2[0] | 0, this.Al = W2[1] | 0, this.Bh = W2[2] | 0, this.Bl = W2[3] | 0, this.Ch = W2[4] | 0, this.Cl = W2[5] | 0, this.Dh = W2[6] | 0, this.Dl = W2[7] | 0, this.Eh = W2[8] | 0, this.El = W2[9] | 0, this.Fh = W2[10] | 0, this.Fl = W2[11] | 0, this.Gh = W2[12] | 0, this.Gl = W2[13] | 0, this.Hh = W2[14] | 0, this.Hl = W2[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var Zi = class extends cn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae2 = ae(() => new Ki());
var Wi = ae(() => new cn());
var Yi = ae(() => new Gi());
var Xi = ae(() => new Zi());
var Ji = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N10 = new Uint32Array(32);
function $t2(t, e2, n5, r3, o4, s3) {
  const i4 = o4[s3], f7 = o4[s3 + 1];
  let a3 = N10[2 * t], l6 = N10[2 * t + 1], c6 = N10[2 * e2], u2 = N10[2 * e2 + 1], h5 = N10[2 * n5], g4 = N10[2 * n5 + 1], w3 = N10[2 * r3], y4 = N10[2 * r3 + 1], x5 = tn(a3, c6, i4);
  l6 = en2(x5, l6, u2, f7), a3 = x5 | 0, { Dh: y4, Dl: w3 } = { Dh: y4 ^ l6, Dl: w3 ^ a3 }, { Dh: y4, Dl: w3 } = { Dh: bi(y4, w3), Dl: yi(y4) }, { h: g4, l: h5 } = dt2(g4, h5, y4, w3), { Bh: u2, Bl: c6 } = { Bh: u2 ^ g4, Bl: c6 ^ h5 }, { Bh: u2, Bl: c6 } = { Bh: At(u2, c6, 24), Bl: St2(u2, c6, 24) }, N10[2 * t] = a3, N10[2 * t + 1] = l6, N10[2 * e2] = c6, N10[2 * e2 + 1] = u2, N10[2 * n5] = h5, N10[2 * n5 + 1] = g4, N10[2 * r3] = w3, N10[2 * r3 + 1] = y4;
}
function Ct(t, e2, n5, r3, o4, s3) {
  const i4 = o4[s3], f7 = o4[s3 + 1];
  let a3 = N10[2 * t], l6 = N10[2 * t + 1], c6 = N10[2 * e2], u2 = N10[2 * e2 + 1], h5 = N10[2 * n5], g4 = N10[2 * n5 + 1], w3 = N10[2 * r3], y4 = N10[2 * r3 + 1], x5 = tn(a3, c6, i4);
  l6 = en2(x5, l6, u2, f7), a3 = x5 | 0, { Dh: y4, Dl: w3 } = { Dh: y4 ^ l6, Dl: w3 ^ a3 }, { Dh: y4, Dl: w3 } = { Dh: At(y4, w3, 16), Dl: St2(y4, w3, 16) }, { h: g4, l: h5 } = dt2(g4, h5, y4, w3), { Bh: u2, Bl: c6 } = { Bh: u2 ^ g4, Bl: c6 ^ h5 }, { Bh: u2, Bl: c6 } = { Bh: se(u2, c6, 63), Bl: ie(u2, c6, 63) }, N10[2 * t] = a3, N10[2 * t + 1] = l6, N10[2 * e2] = c6, N10[2 * e2 + 1] = u2, N10[2 * n5] = h5, N10[2 * n5 + 1] = g4, N10[2 * r3] = w3, N10[2 * r3 + 1] = y4;
}
function Qi(t, e2 = {}, n5, r3, o4) {
  if (mt(n5), t < 0 || t > n5) throw new Error("outputLen bigger than keyLen");
  const { key: s3, salt: i4, personalization: f7 } = e2;
  if (s3 !== void 0 && (s3.length < 1 || s3.length > n5)) throw new Error("key length must be undefined or 1.." + n5);
  if (i4 !== void 0 && i4.length !== r3) throw new Error("salt must be undefined or " + r3);
  if (f7 !== void 0 && f7.length !== o4) throw new Error("personalization must be undefined or " + o4);
}
var tf = class extends Ie2 {
  constructor(e2, n5) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e2), mt(n5), this.blockLen = e2, this.outputLen = n5, this.buffer = new Uint8Array(e2), this.buffer32 = fe2(this.buffer);
  }
  update(e2) {
    Nt2(this), e2 = ht2(e2), at(e2);
    const { blockLen: n5, buffer: r3, buffer32: o4 } = this, s3 = e2.length, i4 = e2.byteOffset, f7 = e2.buffer;
    for (let a3 = 0; a3 < s3; ) {
      this.pos === n5 && (Ot2(o4), this.compress(o4, 0, false), Ot2(o4), this.pos = 0);
      const l6 = Math.min(n5 - this.pos, s3 - a3), c6 = i4 + a3;
      if (l6 === n5 && !(c6 % 4) && a3 + l6 < s3) {
        const u2 = new Uint32Array(f7, c6, Math.floor((s3 - a3) / 4));
        Ot2(u2);
        for (let h5 = 0; a3 + n5 < s3; h5 += o4.length, a3 += n5) this.length += n5, this.compress(u2, h5, false);
        Ot2(u2);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + l6), this.pos), this.pos += l6, this.length += l6, a3 += l6;
    }
    return this;
  }
  digestInto(e2) {
    Nt2(this), on2(e2, this);
    const { pos: n5, buffer32: r3 } = this;
    this.finished = true, ut2(this.buffer.subarray(n5)), Ot2(r3), this.compress(r3, 0, true), Ot2(r3);
    const o4 = fe2(e2);
    this.get().forEach((s3, i4) => o4[i4] = wt2(s3));
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    const { buffer: n5, length: r3, finished: o4, destroyed: s3, outputLen: i4, pos: f7 } = this;
    return e2 || (e2 = new this.constructor({ dkLen: i4 })), e2.set(...this.get()), e2.buffer.set(n5), e2.destroyed = s3, e2.finished = o4, e2.length = r3, e2.pos = f7, e2.outputLen = i4, e2;
  }
  clone() {
    return this._cloneInto();
  }
};
var ef = class extends tf {
  constructor(e2 = {}) {
    const n5 = e2.dkLen === void 0 ? 64 : e2.dkLen;
    super(128, n5), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Qi(n5, e2, 64, 16, 16);
    let { key: r3, personalization: o4, salt: s3 } = e2, i4 = 0;
    if (r3 !== void 0 && (r3 = ht2(r3), i4 = r3.length), this.v0l ^= this.outputLen | i4 << 8 | 65536 | 1 << 24, s3 !== void 0) {
      s3 = ht2(s3);
      const f7 = fe2(s3);
      this.v4l ^= wt2(f7[0]), this.v4h ^= wt2(f7[1]), this.v5l ^= wt2(f7[2]), this.v5h ^= wt2(f7[3]);
    }
    if (o4 !== void 0) {
      o4 = ht2(o4);
      const f7 = fe2(o4);
      this.v6l ^= wt2(f7[0]), this.v6h ^= wt2(f7[1]), this.v7l ^= wt2(f7[2]), this.v7h ^= wt2(f7[3]);
    }
    if (r3 !== void 0) {
      const f7 = new Uint8Array(this.blockLen);
      f7.set(r3), this.update(f7);
    }
  }
  get() {
    let { v0l: e2, v0h: n5, v1l: r3, v1h: o4, v2l: s3, v2h: i4, v3l: f7, v3h: a3, v4l: l6, v4h: c6, v5l: u2, v5h: h5, v6l: g4, v6h: w3, v7l: y4, v7h: x5 } = this;
    return [e2, n5, r3, o4, s3, i4, f7, a3, l6, c6, u2, h5, g4, w3, y4, x5];
  }
  set(e2, n5, r3, o4, s3, i4, f7, a3, l6, c6, u2, h5, g4, w3, y4, x5) {
    this.v0l = e2 | 0, this.v0h = n5 | 0, this.v1l = r3 | 0, this.v1h = o4 | 0, this.v2l = s3 | 0, this.v2h = i4 | 0, this.v3l = f7 | 0, this.v3h = a3 | 0, this.v4l = l6 | 0, this.v4h = c6 | 0, this.v5l = u2 | 0, this.v5h = h5 | 0, this.v6l = g4 | 0, this.v6h = w3 | 0, this.v7l = y4 | 0, this.v7h = x5 | 0;
  }
  compress(e2, n5, r3) {
    this.get().forEach((a3, l6) => N10[l6] = a3), N10.set(F, 16);
    let { h: o4, l: s3 } = mr2(BigInt(this.length));
    N10[24] = F[8] ^ s3, N10[25] = F[9] ^ o4, r3 && (N10[28] = ~N10[28], N10[29] = ~N10[29]);
    let i4 = 0;
    const f7 = Ji;
    for (let a3 = 0; a3 < 12; a3++) $t2(0, 4, 8, 12, e2, n5 + 2 * f7[i4++]), Ct(0, 4, 8, 12, e2, n5 + 2 * f7[i4++]), $t2(1, 5, 9, 13, e2, n5 + 2 * f7[i4++]), Ct(1, 5, 9, 13, e2, n5 + 2 * f7[i4++]), $t2(2, 6, 10, 14, e2, n5 + 2 * f7[i4++]), Ct(2, 6, 10, 14, e2, n5 + 2 * f7[i4++]), $t2(3, 7, 11, 15, e2, n5 + 2 * f7[i4++]), Ct(3, 7, 11, 15, e2, n5 + 2 * f7[i4++]), $t2(0, 5, 10, 15, e2, n5 + 2 * f7[i4++]), Ct(0, 5, 10, 15, e2, n5 + 2 * f7[i4++]), $t2(1, 6, 11, 12, e2, n5 + 2 * f7[i4++]), Ct(1, 6, 11, 12, e2, n5 + 2 * f7[i4++]), $t2(2, 7, 8, 13, e2, n5 + 2 * f7[i4++]), Ct(2, 7, 8, 13, e2, n5 + 2 * f7[i4++]), $t2(3, 4, 9, 14, e2, n5 + 2 * f7[i4++]), Ct(3, 4, 9, 14, e2, n5 + 2 * f7[i4++]);
    this.v0l ^= N10[0] ^ N10[16], this.v0h ^= N10[1] ^ N10[17], this.v1l ^= N10[2] ^ N10[18], this.v1h ^= N10[3] ^ N10[19], this.v2l ^= N10[4] ^ N10[20], this.v2h ^= N10[5] ^ N10[21], this.v3l ^= N10[6] ^ N10[22], this.v3h ^= N10[7] ^ N10[23], this.v4l ^= N10[8] ^ N10[24], this.v4h ^= N10[9] ^ N10[25], this.v5l ^= N10[10] ^ N10[26], this.v5h ^= N10[11] ^ N10[27], this.v6l ^= N10[12] ^ N10[28], this.v6h ^= N10[13] ^ N10[29], this.v7l ^= N10[14] ^ N10[30], this.v7h ^= N10[15] ^ N10[31], ut2(N10);
  }
  destroy() {
    this.destroyed = true, ut2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var nf = Ui((t) => new ef(t));
var rf = "https://rpc.walletconnect.org/v1";
function an(t) {
  const e2 = `Ethereum Signed Message:
${t.length}`, n5 = new TextEncoder().encode(e2 + t);
  return "0x" + Buffer.from(Hi(n5)).toString("hex");
}
async function Cr2(t, e2, n5, r3, o4, s3) {
  switch (n5.t) {
    case "eip191":
      return await Lr2(t, e2, n5.s);
    case "eip1271":
      return await jr2(t, e2, n5.s, r3, o4, s3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n5.t}`);
  }
}
async function Lr2(t, e2, n5) {
  return (await recoverAddress({ hash: an(e2), signature: n5 })).toLowerCase() === t.toLowerCase();
}
async function jr2(t, e2, n5, r3, o4, s3) {
  const i4 = Fe(r3);
  if (!i4.namespace || !i4.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r3}`);
  try {
    const f7 = "0x1626ba7e", a3 = "0000000000000000000000000000000000000000000000000000000000000040", l6 = n5.substring(2), c6 = (l6.length / 2).toString(16).padStart(64, "0"), u2 = (e2.startsWith("0x") ? e2 : an(e2)).substring(2), h5 = f7 + u2 + a3 + c6 + l6, g4 = await fetch(`${s3 || rf}/?chainId=${r3}&projectId=${o4}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: of(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h5 }, "latest"] }) }), { result: w3 } = await g4.json();
    return w3 ? w3.slice(0, f7.length).toLowerCase() === f7.toLowerCase() : false;
  } catch (f7) {
    return console.error("isValidEip1271Signature: ", f7), false;
  }
}
function of() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function sf(t) {
  const e2 = atob(t), n5 = new Uint8Array(e2.length);
  for (let i4 = 0; i4 < e2.length; i4++) n5[i4] = e2.charCodeAt(i4);
  const r3 = n5[0];
  if (r3 === 0) throw new Error("No signatures found");
  const o4 = 1 + r3 * 64;
  if (n5.length < o4) throw new Error("Transaction data too short for claimed signature count");
  if (n5.length < 100) throw new Error("Transaction too short");
  const s3 = Buffer.from(t, "base64").slice(1, 65);
  return esm_default2.encode(s3);
}
function ff(t) {
  const e2 = new Uint8Array(Buffer.from(t, "base64")), n5 = Array.from("TransactionData::").map((s3) => s3.charCodeAt(0)), r3 = new Uint8Array(n5.length + e2.length);
  r3.set(n5), r3.set(e2, n5.length);
  const o4 = nf(r3, { dkLen: 32 });
  return esm_default2.encode(o4);
}
function cf(t) {
  const e2 = new Uint8Array(Ae2(kr2(t)));
  return esm_default2.encode(e2);
}
function kr2(t) {
  if (t instanceof Uint8Array) return t;
  if (Array.isArray(t)) return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data) return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t) return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function af(t) {
  const e2 = Buffer.from(t, "base64"), n5 = decode2(e2).txn;
  if (!n5) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r3 = encode4(n5), o4 = Buffer.from("TX"), s3 = Buffer.concat([o4, Buffer.from(r3)]), i4 = Xi(s3);
  return base32.encode(i4).replace(/=+$/, "");
}
function un(t) {
  const e2 = [];
  let n5 = BigInt(t);
  for (; n5 >= BigInt(128); ) e2.push(Number(n5 & BigInt(127) | BigInt(128))), n5 >>= BigInt(7);
  return e2.push(Number(n5)), Buffer.from(e2);
}
function uf(t) {
  const e2 = Buffer.from(t.signed.bodyBytes, "base64"), n5 = Buffer.from(t.signed.authInfoBytes, "base64"), r3 = Buffer.from(t.signature.signature, "base64"), o4 = [];
  o4.push(Buffer.from([10])), o4.push(un(e2.length)), o4.push(e2), o4.push(Buffer.from([18])), o4.push(un(n5.length)), o4.push(n5), o4.push(Buffer.from([26])), o4.push(un(r3.length)), o4.push(r3);
  const s3 = Buffer.concat(o4), i4 = Ae2(s3);
  return Buffer.from(i4).toString("hex").toUpperCase();
}
var lf = Object.defineProperty;
var df = Object.defineProperties;
var hf = Object.getOwnPropertyDescriptors;
var Pr2 = Object.getOwnPropertySymbols;
var pf = Object.prototype.hasOwnProperty;
var gf = Object.prototype.propertyIsEnumerable;
var Hr2 = (t, e2, n5) => e2 in t ? lf(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var ln = (t, e2) => {
  for (var n5 in e2 || (e2 = {})) pf.call(e2, n5) && Hr2(t, n5, e2[n5]);
  if (Pr2) for (var n5 of Pr2(e2)) gf.call(e2, n5) && Hr2(t, n5, e2[n5]);
  return t;
};
var Dr2 = (t, e2) => df(t, hf(e2));
var bf = "did:pkh:";
var Se2 = (t) => t == null ? void 0 : t.split(":");
var Mr2 = (t) => {
  const e2 = t && Se2(t);
  if (e2) return t.includes(bf) ? e2[3] : e2[1];
};
var Vr2 = (t) => {
  const e2 = t && Se2(t);
  if (e2) return e2[2] + ":" + e2[3];
};
var dn = (t) => {
  const e2 = t && Se2(t);
  if (e2) return e2.pop();
};
async function yf(t) {
  const { cacao: e2, projectId: n5 } = t, { s: r3, p: o4 } = e2, s3 = qr2(o4, o4.iss), i4 = dn(o4.iss);
  return await Cr2(i4, s3, r3, Vr2(o4.iss), n5);
}
var qr2 = (t, e2) => {
  const n5 = `${t.domain} wants you to sign in with your Ethereum account:`, r3 = dn(e2);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o4 = t.statement || void 0;
  const s3 = `URI: ${t.aud || t.uri}`, i4 = `Version: ${t.version}`, f7 = `Chain ID: ${Mr2(e2)}`, a3 = `Nonce: ${t.nonce}`, l6 = `Issued At: ${t.iat}`, c6 = t.exp ? `Expiration Time: ${t.exp}` : void 0, u2 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h5 = t.requestId ? `Request ID: ${t.requestId}` : void 0, g4 = t.resources ? `Resources:${t.resources.map((y4) => `
- ${y4}`).join("")}` : void 0, w3 = Oe2(t.resources);
  if (w3) {
    const y4 = Lt2(w3);
    o4 = gn2(o4, y4);
  }
  return [n5, r3, "", o4, "", s3, i4, f7, a3, l6, c6, u2, h5, g4].filter((y4) => y4 != null).join(`
`);
};
function Gr2(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function Zr2(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function bt2(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e2 = Object.keys(t.att);
  if (!(e2 != null && e2.length)) throw new Error("No resources found in `att` property");
  e2.forEach((n5) => {
    const r3 = t.att[n5];
    if (Array.isArray(r3)) throw new Error(`Resource must be an object: ${n5}`);
    if (typeof r3 != "object") throw new Error(`Resource must be an object: ${n5}`);
    if (!Object.keys(r3).length) throw new Error(`Resource object is empty: ${n5}`);
    Object.keys(r3).forEach((o4) => {
      const s3 = r3[o4];
      if (!Array.isArray(s3)) throw new Error(`Ability limits ${o4} must be an array of objects, found: ${s3}`);
      if (!s3.length) throw new Error(`Value of ${o4} is empty array, must be an array with objects`);
      s3.forEach((i4) => {
        if (typeof i4 != "object") throw new Error(`Ability limits (${o4}) must be an array of objects, found: ${i4}`);
      });
    });
  });
}
function Wr2(t, e2, n5, r3 = {}) {
  return n5 == null ? void 0 : n5.sort((o4, s3) => o4.localeCompare(s3)), { att: { [t]: hn(e2, n5, r3) } };
}
function hn(t, e2, n5 = {}) {
  e2 = e2 == null ? void 0 : e2.sort((o4, s3) => o4.localeCompare(s3));
  const r3 = e2.map((o4) => ({ [`${t}/${o4}`]: [n5] }));
  return Object.assign({}, ...r3);
}
function Ne2(t) {
  return bt2(t), `urn:recap:${Gr2(t).replace(/=/g, "")}`;
}
function Lt2(t) {
  const e2 = Zr2(t.replace("urn:recap:", ""));
  return bt2(e2), e2;
}
function Ef(t, e2, n5) {
  const r3 = Wr2(t, e2, n5);
  return Ne2(r3);
}
function pn(t) {
  return t && t.includes("urn:recap:");
}
function Bf(t, e2) {
  const n5 = Lt2(t), r3 = Lt2(e2), o4 = Xr2(n5, r3);
  return Ne2(o4);
}
function Xr2(t, e2) {
  bt2(t), bt2(e2);
  const n5 = Object.keys(t.att).concat(Object.keys(e2.att)).sort((o4, s3) => o4.localeCompare(s3)), r3 = { att: {} };
  return n5.forEach((o4) => {
    var s3, i4;
    Object.keys(((s3 = t.att) == null ? void 0 : s3[o4]) || {}).concat(Object.keys(((i4 = e2.att) == null ? void 0 : i4[o4]) || {})).sort((f7, a3) => f7.localeCompare(a3)).forEach((f7) => {
      var a3, l6;
      r3.att[o4] = Dr2(ln({}, r3.att[o4]), { [f7]: ((a3 = t.att[o4]) == null ? void 0 : a3[f7]) || ((l6 = e2.att[o4]) == null ? void 0 : l6[f7]) });
    });
  }), r3;
}
function gn2(t = "", e2) {
  bt2(e2);
  const n5 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n5)) return t;
  const r3 = [];
  let o4 = 0;
  Object.keys(e2.att).forEach((f7) => {
    const a3 = Object.keys(e2.att[f7]).map((u2) => ({ ability: u2.split("/")[0], action: u2.split("/")[1] }));
    a3.sort((u2, h5) => u2.action.localeCompare(h5.action));
    const l6 = {};
    a3.forEach((u2) => {
      l6[u2.ability] || (l6[u2.ability] = []), l6[u2.ability].push(u2.action);
    });
    const c6 = Object.keys(l6).map((u2) => (o4++, `(${o4}) '${u2}': '${l6[u2].join("', '")}' for '${f7}'.`));
    r3.push(c6.join(", ").replace(".,", "."));
  });
  const s3 = r3.join(" "), i4 = `${n5}${s3}`;
  return `${t ? t + " " : ""}${i4}`;
}
function If(t) {
  var e2;
  const n5 = Lt2(t);
  bt2(n5);
  const r3 = (e2 = n5.att) == null ? void 0 : e2.eip155;
  return r3 ? Object.keys(r3).map((o4) => o4.split("/")[1]) : [];
}
function Af(t) {
  const e2 = Lt2(t);
  bt2(e2);
  const n5 = [];
  return Object.values(e2.att).forEach((r3) => {
    Object.values(r3).forEach((o4) => {
      var s3;
      (s3 = o4 == null ? void 0 : o4[0]) != null && s3.chains && n5.push(o4[0].chains);
    });
  }), [...new Set(n5.flat())];
}
function Oe2(t) {
  if (!t) return;
  const e2 = t == null ? void 0 : t[t.length - 1];
  return pn(e2) ? e2 : void 0;
}
function Qr2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function bn2(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
function yn2(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function nt2(t, ...e2) {
  if (!Qr2(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function to2(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function Sf(t, e2) {
  nt2(t);
  const n5 = e2.outputLen;
  if (t.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jt2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Wt2(...t) {
  for (let e2 = 0; e2 < t.length; e2++) t[e2].fill(0);
}
function Nf(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Of = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Uf(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function mn2(t) {
  if (typeof t == "string") t = Uf(t);
  else if (Qr2(t)) t = wn(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function _f(t, e2) {
  if (e2 == null || typeof e2 != "object") throw new Error("options must be defined");
  return Object.assign(t, e2);
}
function Tf(t, e2) {
  if (t.length !== e2.length) return false;
  let n5 = 0;
  for (let r3 = 0; r3 < t.length; r3++) n5 |= t[r3] ^ e2[r3];
  return n5 === 0;
}
var Rf = (t, e2) => {
  function n5(r3, ...o4) {
    if (nt2(r3), !Of) throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const c6 = o4[0];
      if (!c6) throw new Error("nonce / iv required");
      t.varSizeNonce ? nt2(c6) : nt2(c6, t.nonceLength);
    }
    const s3 = t.tagLength;
    s3 && o4[1] !== void 0 && nt2(o4[1]);
    const i4 = e2(r3, ...o4), f7 = (c6, u2) => {
      if (u2 !== void 0) {
        if (c6 !== 2) throw new Error("cipher output not supported");
        nt2(u2);
      }
    };
    let a3 = false;
    return { encrypt(c6, u2) {
      if (a3) throw new Error("cannot encrypt() twice with same key + nonce");
      return a3 = true, nt2(c6), f7(i4.encrypt.length, u2), i4.encrypt(c6, u2);
    }, decrypt(c6, u2) {
      if (nt2(c6), s3 && c6.length < s3) throw new Error("invalid ciphertext length: smaller than tagLength=" + s3);
      return f7(i4.decrypt.length, u2), i4.decrypt(c6, u2);
    } };
  }
  return Object.assign(n5, t), n5;
};
function eo2(t, e2, n5 = true) {
  if (e2 === void 0) return new Uint8Array(t);
  if (e2.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e2.length);
  if (n5 && !Cf(e2)) throw new Error("invalid output, must be aligned");
  return e2;
}
function no2(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o4 & s3), f7 = Number(n5 & s3), a3 = r3 ? 4 : 0, l6 = r3 ? 0 : 4;
  t.setUint32(e2 + a3, i4, r3), t.setUint32(e2 + l6, f7, r3);
}
function $f(t, e2, n5) {
  bn2(n5);
  const r3 = new Uint8Array(16), o4 = Nf(r3);
  return no2(o4, 0, BigInt(e2), n5), no2(o4, 8, BigInt(t), n5), r3;
}
function Cf(t) {
  return t.byteOffset % 4 === 0;
}
function wn(t) {
  return Uint8Array.from(t);
}
var ro2 = (t) => Uint8Array.from(t.split("").map((e2) => e2.charCodeAt(0)));
var Lf = ro2("expand 16-byte k");
var jf = ro2("expand 32-byte k");
var kf = jt2(Lf);
var Pf = jt2(jf);
function D2(t, e2) {
  return t << e2 | t >>> 32 - e2;
}
function xn2(t) {
  return t.byteOffset % 4 === 0;
}
var Ue2 = 64;
var Hf = 16;
var oo2 = 2 ** 32 - 1;
var so2 = new Uint32Array();
function Df(t, e2, n5, r3, o4, s3, i4, f7) {
  const a3 = o4.length, l6 = new Uint8Array(Ue2), c6 = jt2(l6), u2 = xn2(o4) && xn2(s3), h5 = u2 ? jt2(o4) : so2, g4 = u2 ? jt2(s3) : so2;
  for (let w3 = 0; w3 < a3; i4++) {
    if (t(e2, n5, r3, c6, i4, f7), i4 >= oo2) throw new Error("arx: counter overflow");
    const y4 = Math.min(Ue2, a3 - w3);
    if (u2 && y4 === Ue2) {
      const x5 = w3 / 4;
      if (w3 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let R4 = 0, M5; R4 < Hf; R4++) M5 = x5 + R4, g4[M5] = h5[M5] ^ c6[R4];
      w3 += Ue2;
      continue;
    }
    for (let x5 = 0, R4; x5 < y4; x5++) R4 = w3 + x5, s3[R4] = o4[R4] ^ l6[x5];
    w3 += y4;
  }
}
function Mf(t, e2) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o4, counterRight: s3, rounds: i4 } = _f({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e2);
  if (typeof t != "function") throw new Error("core must be a function");
  return yn2(o4), yn2(i4), bn2(s3), bn2(n5), (f7, a3, l6, c6, u2 = 0) => {
    nt2(f7), nt2(a3), nt2(l6);
    const h5 = l6.length;
    if (c6 === void 0 && (c6 = new Uint8Array(h5)), nt2(c6), yn2(u2), u2 < 0 || u2 >= oo2) throw new Error("arx: counter overflow");
    if (c6.length < h5) throw new Error(`arx: output (${c6.length}) is shorter than data (${h5})`);
    const g4 = [];
    let w3 = f7.length, y4, x5;
    if (w3 === 32) g4.push(y4 = wn(f7)), x5 = Pf;
    else if (w3 === 16 && n5) y4 = new Uint8Array(32), y4.set(f7), y4.set(f7, 16), x5 = kf, g4.push(y4);
    else throw new Error(`arx: invalid 32-byte key, got length=${w3}`);
    xn2(a3) || g4.push(a3 = wn(a3));
    const R4 = jt2(y4);
    if (r3) {
      if (a3.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(x5, R4, jt2(a3.subarray(0, 16)), R4), a3 = a3.subarray(16);
    }
    const M5 = 16 - o4;
    if (M5 !== a3.length) throw new Error(`arx: nonce must be ${M5} or 16 bytes`);
    if (M5 !== 12) {
      const V4 = new Uint8Array(12);
      V4.set(a3, s3 ? 0 : 12 - a3.length), a3 = V4, g4.push(a3);
    }
    const L2 = jt2(a3);
    return Df(t, x5, R4, L2, l6, c6, u2, i4), Wt2(...g4), c6;
  };
}
var G2 = (t, e2) => t[e2++] & 255 | (t[e2++] & 255) << 8;
var Vf = class {
  constructor(e2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e2 = mn2(e2), nt2(e2, 32);
    const n5 = G2(e2, 0), r3 = G2(e2, 2), o4 = G2(e2, 4), s3 = G2(e2, 6), i4 = G2(e2, 8), f7 = G2(e2, 10), a3 = G2(e2, 12), l6 = G2(e2, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o4 << 6) & 7939, this.r[3] = (o4 >>> 7 | s3 << 9) & 8191, this.r[4] = (s3 >>> 4 | i4 << 12) & 255, this.r[5] = i4 >>> 1 & 8190, this.r[6] = (i4 >>> 14 | f7 << 2) & 8191, this.r[7] = (f7 >>> 11 | a3 << 5) & 8065, this.r[8] = (a3 >>> 8 | l6 << 8) & 8191, this.r[9] = l6 >>> 5 & 127;
    for (let c6 = 0; c6 < 8; c6++) this.pad[c6] = G2(e2, 16 + 2 * c6);
  }
  process(e2, n5, r3 = false) {
    const o4 = r3 ? 0 : 2048, { h: s3, r: i4 } = this, f7 = i4[0], a3 = i4[1], l6 = i4[2], c6 = i4[3], u2 = i4[4], h5 = i4[5], g4 = i4[6], w3 = i4[7], y4 = i4[8], x5 = i4[9], R4 = G2(e2, n5 + 0), M5 = G2(e2, n5 + 2), L2 = G2(e2, n5 + 4), V4 = G2(e2, n5 + 6), _3 = G2(e2, n5 + 8), k5 = G2(e2, n5 + 10), j3 = G2(e2, n5 + 12), $2 = G2(e2, n5 + 14);
    let d5 = s3[0] + (R4 & 8191), m3 = s3[1] + ((R4 >>> 13 | M5 << 3) & 8191), p3 = s3[2] + ((M5 >>> 10 | L2 << 6) & 8191), b4 = s3[3] + ((L2 >>> 7 | V4 << 9) & 8191), v5 = s3[4] + ((V4 >>> 4 | _3 << 12) & 8191), B3 = s3[5] + (_3 >>> 1 & 8191), E3 = s3[6] + ((_3 >>> 14 | k5 << 2) & 8191), I3 = s3[7] + ((k5 >>> 11 | j3 << 5) & 8191), S3 = s3[8] + ((j3 >>> 8 | $2 << 8) & 8191), O5 = s3[9] + ($2 >>> 5 | o4), A3 = 0, T3 = A3 + d5 * f7 + m3 * (5 * x5) + p3 * (5 * y4) + b4 * (5 * w3) + v5 * (5 * g4);
    A3 = T3 >>> 13, T3 &= 8191, T3 += B3 * (5 * h5) + E3 * (5 * u2) + I3 * (5 * c6) + S3 * (5 * l6) + O5 * (5 * a3), A3 += T3 >>> 13, T3 &= 8191;
    let U3 = A3 + d5 * a3 + m3 * f7 + p3 * (5 * x5) + b4 * (5 * y4) + v5 * (5 * w3);
    A3 = U3 >>> 13, U3 &= 8191, U3 += B3 * (5 * g4) + E3 * (5 * h5) + I3 * (5 * u2) + S3 * (5 * c6) + O5 * (5 * l6), A3 += U3 >>> 13, U3 &= 8191;
    let C4 = A3 + d5 * l6 + m3 * a3 + p3 * f7 + b4 * (5 * x5) + v5 * (5 * y4);
    A3 = C4 >>> 13, C4 &= 8191, C4 += B3 * (5 * w3) + E3 * (5 * g4) + I3 * (5 * h5) + S3 * (5 * u2) + O5 * (5 * c6), A3 += C4 >>> 13, C4 &= 8191;
    let H2 = A3 + d5 * c6 + m3 * l6 + p3 * a3 + b4 * f7 + v5 * (5 * x5);
    A3 = H2 >>> 13, H2 &= 8191, H2 += B3 * (5 * y4) + E3 * (5 * w3) + I3 * (5 * g4) + S3 * (5 * h5) + O5 * (5 * u2), A3 += H2 >>> 13, H2 &= 8191;
    let q2 = A3 + d5 * u2 + m3 * c6 + p3 * l6 + b4 * a3 + v5 * f7;
    A3 = q2 >>> 13, q2 &= 8191, q2 += B3 * (5 * x5) + E3 * (5 * y4) + I3 * (5 * w3) + S3 * (5 * g4) + O5 * (5 * h5), A3 += q2 >>> 13, q2 &= 8191;
    let P5 = A3 + d5 * h5 + m3 * u2 + p3 * c6 + b4 * l6 + v5 * a3;
    A3 = P5 >>> 13, P5 &= 8191, P5 += B3 * f7 + E3 * (5 * x5) + I3 * (5 * y4) + S3 * (5 * w3) + O5 * (5 * g4), A3 += P5 >>> 13, P5 &= 8191;
    let K5 = A3 + d5 * g4 + m3 * h5 + p3 * u2 + b4 * c6 + v5 * l6;
    A3 = K5 >>> 13, K5 &= 8191, K5 += B3 * a3 + E3 * f7 + I3 * (5 * x5) + S3 * (5 * y4) + O5 * (5 * w3), A3 += K5 >>> 13, K5 &= 8191;
    let et2 = A3 + d5 * w3 + m3 * g4 + p3 * h5 + b4 * u2 + v5 * c6;
    A3 = et2 >>> 13, et2 &= 8191, et2 += B3 * l6 + E3 * a3 + I3 * f7 + S3 * (5 * x5) + O5 * (5 * y4), A3 += et2 >>> 13, et2 &= 8191;
    let Z = A3 + d5 * y4 + m3 * w3 + p3 * g4 + b4 * h5 + v5 * u2;
    A3 = Z >>> 13, Z &= 8191, Z += B3 * c6 + E3 * l6 + I3 * a3 + S3 * f7 + O5 * (5 * x5), A3 += Z >>> 13, Z &= 8191;
    let z4 = A3 + d5 * x5 + m3 * y4 + p3 * w3 + b4 * g4 + v5 * h5;
    A3 = z4 >>> 13, z4 &= 8191, z4 += B3 * u2 + E3 * c6 + I3 * l6 + S3 * a3 + O5 * f7, A3 += z4 >>> 13, z4 &= 8191, A3 = (A3 << 2) + A3 | 0, A3 = A3 + T3 | 0, T3 = A3 & 8191, A3 = A3 >>> 13, U3 += A3, s3[0] = T3, s3[1] = U3, s3[2] = C4, s3[3] = H2, s3[4] = q2, s3[5] = P5, s3[6] = K5, s3[7] = et2, s3[8] = Z, s3[9] = z4;
  }
  finalize() {
    const { h: e2, pad: n5 } = this, r3 = new Uint16Array(10);
    let o4 = e2[1] >>> 13;
    e2[1] &= 8191;
    for (let f7 = 2; f7 < 10; f7++) e2[f7] += o4, o4 = e2[f7] >>> 13, e2[f7] &= 8191;
    e2[0] += o4 * 5, o4 = e2[0] >>> 13, e2[0] &= 8191, e2[1] += o4, o4 = e2[1] >>> 13, e2[1] &= 8191, e2[2] += o4, r3[0] = e2[0] + 5, o4 = r3[0] >>> 13, r3[0] &= 8191;
    for (let f7 = 1; f7 < 10; f7++) r3[f7] = e2[f7] + o4, o4 = r3[f7] >>> 13, r3[f7] &= 8191;
    r3[9] -= 8192;
    let s3 = (o4 ^ 1) - 1;
    for (let f7 = 0; f7 < 10; f7++) r3[f7] &= s3;
    s3 = ~s3;
    for (let f7 = 0; f7 < 10; f7++) e2[f7] = e2[f7] & s3 | r3[f7];
    e2[0] = (e2[0] | e2[1] << 13) & 65535, e2[1] = (e2[1] >>> 3 | e2[2] << 10) & 65535, e2[2] = (e2[2] >>> 6 | e2[3] << 7) & 65535, e2[3] = (e2[3] >>> 9 | e2[4] << 4) & 65535, e2[4] = (e2[4] >>> 12 | e2[5] << 1 | e2[6] << 14) & 65535, e2[5] = (e2[6] >>> 2 | e2[7] << 11) & 65535, e2[6] = (e2[7] >>> 5 | e2[8] << 8) & 65535, e2[7] = (e2[8] >>> 8 | e2[9] << 5) & 65535;
    let i4 = e2[0] + n5[0];
    e2[0] = i4 & 65535;
    for (let f7 = 1; f7 < 8; f7++) i4 = (e2[f7] + n5[f7] | 0) + (i4 >>> 16) | 0, e2[f7] = i4 & 65535;
    Wt2(r3);
  }
  update(e2) {
    to2(this), e2 = mn2(e2), nt2(e2);
    const { buffer: n5, blockLen: r3 } = this, o4 = e2.length;
    for (let s3 = 0; s3 < o4; ) {
      const i4 = Math.min(r3 - this.pos, o4 - s3);
      if (i4 === r3) {
        for (; r3 <= o4 - s3; s3 += r3) this.process(e2, s3);
        continue;
      }
      n5.set(e2.subarray(s3, s3 + i4), this.pos), this.pos += i4, s3 += i4, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e2) {
    to2(this), Sf(e2, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o4 } = this;
    if (o4) {
      for (n5[o4++] = 1; o4 < 16; o4++) n5[o4] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s3 = 0;
    for (let i4 = 0; i4 < 8; i4++) e2[s3++] = r3[i4] >>> 0, e2[s3++] = r3[i4] >>> 8;
    return e2;
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
};
function qf(t) {
  const e2 = (r3, o4) => t(o4).update(mn2(r3)).digest(), n5 = t(new Uint8Array(32));
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = (r3) => t(r3), e2;
}
var Kf = qf((t) => new Vf(t));
function Ff(t, e2, n5, r3, o4, s3 = 20) {
  let i4 = t[0], f7 = t[1], a3 = t[2], l6 = t[3], c6 = e2[0], u2 = e2[1], h5 = e2[2], g4 = e2[3], w3 = e2[4], y4 = e2[5], x5 = e2[6], R4 = e2[7], M5 = o4, L2 = n5[0], V4 = n5[1], _3 = n5[2], k5 = i4, j3 = f7, $2 = a3, d5 = l6, m3 = c6, p3 = u2, b4 = h5, v5 = g4, B3 = w3, E3 = y4, I3 = x5, S3 = R4, O5 = M5, A3 = L2, T3 = V4, U3 = _3;
  for (let H2 = 0; H2 < s3; H2 += 2) k5 = k5 + m3 | 0, O5 = D2(O5 ^ k5, 16), B3 = B3 + O5 | 0, m3 = D2(m3 ^ B3, 12), k5 = k5 + m3 | 0, O5 = D2(O5 ^ k5, 8), B3 = B3 + O5 | 0, m3 = D2(m3 ^ B3, 7), j3 = j3 + p3 | 0, A3 = D2(A3 ^ j3, 16), E3 = E3 + A3 | 0, p3 = D2(p3 ^ E3, 12), j3 = j3 + p3 | 0, A3 = D2(A3 ^ j3, 8), E3 = E3 + A3 | 0, p3 = D2(p3 ^ E3, 7), $2 = $2 + b4 | 0, T3 = D2(T3 ^ $2, 16), I3 = I3 + T3 | 0, b4 = D2(b4 ^ I3, 12), $2 = $2 + b4 | 0, T3 = D2(T3 ^ $2, 8), I3 = I3 + T3 | 0, b4 = D2(b4 ^ I3, 7), d5 = d5 + v5 | 0, U3 = D2(U3 ^ d5, 16), S3 = S3 + U3 | 0, v5 = D2(v5 ^ S3, 12), d5 = d5 + v5 | 0, U3 = D2(U3 ^ d5, 8), S3 = S3 + U3 | 0, v5 = D2(v5 ^ S3, 7), k5 = k5 + p3 | 0, U3 = D2(U3 ^ k5, 16), I3 = I3 + U3 | 0, p3 = D2(p3 ^ I3, 12), k5 = k5 + p3 | 0, U3 = D2(U3 ^ k5, 8), I3 = I3 + U3 | 0, p3 = D2(p3 ^ I3, 7), j3 = j3 + b4 | 0, O5 = D2(O5 ^ j3, 16), S3 = S3 + O5 | 0, b4 = D2(b4 ^ S3, 12), j3 = j3 + b4 | 0, O5 = D2(O5 ^ j3, 8), S3 = S3 + O5 | 0, b4 = D2(b4 ^ S3, 7), $2 = $2 + v5 | 0, A3 = D2(A3 ^ $2, 16), B3 = B3 + A3 | 0, v5 = D2(v5 ^ B3, 12), $2 = $2 + v5 | 0, A3 = D2(A3 ^ $2, 8), B3 = B3 + A3 | 0, v5 = D2(v5 ^ B3, 7), d5 = d5 + m3 | 0, T3 = D2(T3 ^ d5, 16), E3 = E3 + T3 | 0, m3 = D2(m3 ^ E3, 12), d5 = d5 + m3 | 0, T3 = D2(T3 ^ d5, 8), E3 = E3 + T3 | 0, m3 = D2(m3 ^ E3, 7);
  let C4 = 0;
  r3[C4++] = i4 + k5 | 0, r3[C4++] = f7 + j3 | 0, r3[C4++] = a3 + $2 | 0, r3[C4++] = l6 + d5 | 0, r3[C4++] = c6 + m3 | 0, r3[C4++] = u2 + p3 | 0, r3[C4++] = h5 + b4 | 0, r3[C4++] = g4 + v5 | 0, r3[C4++] = w3 + B3 | 0, r3[C4++] = y4 + E3 | 0, r3[C4++] = x5 + I3 | 0, r3[C4++] = R4 + S3 | 0, r3[C4++] = M5 + O5 | 0, r3[C4++] = L2 + A3 | 0, r3[C4++] = V4 + T3 | 0, r3[C4++] = _3 + U3 | 0;
}
var zf = Mf(Ff, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Gf = new Uint8Array(16);
var io2 = (t, e2) => {
  t.update(e2);
  const n5 = e2.length % 16;
  n5 && t.update(Gf.subarray(n5));
};
var Zf = new Uint8Array(32);
function fo2(t, e2, n5, r3, o4) {
  const s3 = t(e2, n5, Zf), i4 = Kf.create(s3);
  o4 && io2(i4, o4), io2(i4, r3);
  const f7 = $f(r3.length, o4 ? o4.length : 0, true);
  i4.update(f7);
  const a3 = i4.digest();
  return Wt2(s3, f7), a3;
}
var Wf = (t) => (e2, n5, r3) => ({ encrypt(s3, i4) {
  const f7 = s3.length;
  i4 = eo2(f7 + 16, i4, false), i4.set(s3);
  const a3 = i4.subarray(0, -16);
  t(e2, n5, a3, a3, 1);
  const l6 = fo2(t, e2, n5, a3, r3);
  return i4.set(l6, f7), Wt2(l6), i4;
}, decrypt(s3, i4) {
  i4 = eo2(s3.length - 16, i4, false);
  const f7 = s3.subarray(0, -16), a3 = s3.subarray(-16), l6 = fo2(t, e2, n5, f7, r3);
  if (!Tf(a3, l6)) throw new Error("invalid tag");
  return i4.set(s3.subarray(0, -16)), t(e2, n5, i4, i4, 1), Wt2(l6), i4;
} });
var co2 = Rf({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Wf(zf));
var ao2 = class extends Ie2 {
  constructor(e2, n5) {
    super(), this.finished = false, this.destroyed = false, rn2(e2);
    const r3 = ht2(n5);
    if (this.iHash = e2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o4 = this.blockLen, s3 = new Uint8Array(o4);
    s3.set(r3.length > o4 ? e2.create().update(r3).digest() : r3);
    for (let i4 = 0; i4 < s3.length; i4++) s3[i4] ^= 54;
    this.iHash.update(s3), this.oHash = e2.create();
    for (let i4 = 0; i4 < s3.length; i4++) s3[i4] ^= 106;
    this.oHash.update(s3), ut2(s3);
  }
  update(e2) {
    return Nt2(this), this.iHash.update(e2), this;
  }
  digestInto(e2) {
    Nt2(this), at(e2, this.outputLen), this.finished = true, this.iHash.digestInto(e2), this.oHash.update(e2), this.oHash.digestInto(e2), this.destroy();
  }
  digest() {
    const e2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e2), e2;
  }
  _cloneInto(e2) {
    e2 || (e2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o4, destroyed: s3, blockLen: i4, outputLen: f7 } = this;
    return e2 = e2, e2.finished = o4, e2.destroyed = s3, e2.blockLen = i4, e2.outputLen = f7, e2.oHash = n5._cloneInto(e2.oHash), e2.iHash = r3._cloneInto(e2.iHash), e2;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e2 = (t, e2, n5) => new ao2(t, e2).update(n5).digest();
_e2.create = (t, e2) => new ao2(t, e2);
function Yf(t, e2, n5) {
  return rn2(t), n5 === void 0 && (n5 = new Uint8Array(t.outputLen)), _e2(t, ht2(n5), ht2(e2));
}
var vn2 = Uint8Array.from([0]);
var uo2 = Uint8Array.of();
function Xf(t, e2, n5, r3 = 32) {
  rn2(t), mt(r3);
  const o4 = t.outputLen;
  if (r3 > 255 * o4) throw new Error("Length should be <= 255*HashLen");
  const s3 = Math.ceil(r3 / o4);
  n5 === void 0 && (n5 = uo2);
  const i4 = new Uint8Array(s3 * o4), f7 = _e2.create(t, e2), a3 = f7._cloneInto(), l6 = new Uint8Array(f7.outputLen);
  for (let c6 = 0; c6 < s3; c6++) vn2[0] = c6 + 1, a3.update(c6 === 0 ? uo2 : l6).update(n5).update(vn2).digestInto(l6), i4.set(l6, o4 * c6), f7._cloneInto(a3);
  return f7.destroy(), a3.destroy(), ut2(l6, vn2), i4.slice(0, r3);
}
var Jf = (t, e2, n5, r3, o4) => Xf(t, Yf(t, e2, n5), r3, o4);
var Te2 = Ae2;
var En2 = BigInt(0);
var Bn2 = BigInt(1);
function Re2(t, e2) {
  if (typeof e2 != "boolean") throw new Error(t + " boolean expected, got " + e2);
}
function $e2(t) {
  const e2 = t.toString(16);
  return e2.length & 1 ? "0" + e2 : e2;
}
function lo2(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? En2 : BigInt("0x" + t);
}
function Ce2(t) {
  return lo2(ce(t));
}
function Le2(t) {
  return at(t), lo2(ce(Uint8Array.from(t).reverse()));
}
function In2(t, e2) {
  return fn(t.toString(16).padStart(e2 * 2, "0"));
}
function An2(t, e2) {
  return In2(t, e2).reverse();
}
function rt2(t, e2, n5) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = fn(e2);
  } catch (s3) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s3);
  }
  else if (nn2(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o4 = r3.length;
  if (typeof n5 == "number" && o4 !== n5) throw new Error(t + " of length " + n5 + " expected, got " + o4);
  return r3;
}
var Sn2 = (t) => typeof t == "bigint" && En2 <= t;
function Qf(t, e2, n5) {
  return Sn2(t) && Sn2(e2) && Sn2(n5) && e2 <= t && t < n5;
}
function Nn2(t, e2, n5, r3) {
  if (!Qf(e2, n5, r3)) throw new Error("expected valid " + t + ": " + n5 + " <= n < " + r3 + ", got " + e2);
}
function tc(t) {
  let e2;
  for (e2 = 0; t > En2; t >>= Bn2, e2 += 1) ;
  return e2;
}
var je2 = (t) => (Bn2 << BigInt(t)) - Bn2;
function ec(t, e2, n5) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e2 != "number" || e2 < 2) throw new Error("qByteLen must be a number");
  if (typeof n5 != "function") throw new Error("hmacFn must be a function");
  const r3 = (g4) => new Uint8Array(g4), o4 = (g4) => Uint8Array.of(g4);
  let s3 = r3(t), i4 = r3(t), f7 = 0;
  const a3 = () => {
    s3.fill(1), i4.fill(0), f7 = 0;
  }, l6 = (...g4) => n5(i4, s3, ...g4), c6 = (g4 = r3(0)) => {
    i4 = l6(o4(0), g4), s3 = l6(), g4.length !== 0 && (i4 = l6(o4(1), g4), s3 = l6());
  }, u2 = () => {
    if (f7++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let g4 = 0;
    const w3 = [];
    for (; g4 < e2; ) {
      s3 = l6();
      const y4 = s3.slice();
      w3.push(y4), g4 += s3.length;
    }
    return Ht2(...w3);
  };
  return (g4, w3) => {
    a3(), c6(g4);
    let y4;
    for (; !(y4 = w3(u2())); ) c6();
    return a3(), y4;
  };
}
function ke2(t, e2, n5 = {}) {
  if (!t || typeof t != "object") throw new Error("expected valid options object");
  function r3(o4, s3, i4) {
    const f7 = t[o4];
    if (i4 && f7 === void 0) return;
    const a3 = typeof f7;
    if (a3 !== s3 || f7 === null) throw new Error(`param "${o4}" is invalid: expected ${s3}, got ${a3}`);
  }
  Object.entries(e2).forEach(([o4, s3]) => r3(o4, s3, false)), Object.entries(n5).forEach(([o4, s3]) => r3(o4, s3, true));
}
function ho2(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o4 = e2.get(n5);
    if (o4 !== void 0) return o4;
    const s3 = t(n5, ...r3);
    return e2.set(n5, s3), s3;
  };
}
var ot = BigInt(0);
var Q2 = BigInt(1);
var Dt2 = BigInt(2);
var nc = BigInt(3);
var po2 = BigInt(4);
var go2 = BigInt(5);
var bo2 = BigInt(8);
function lt2(t, e2) {
  const n5 = t % e2;
  return n5 >= ot ? n5 : e2 + n5;
}
function pt(t, e2, n5) {
  let r3 = t;
  for (; e2-- > ot; ) r3 *= r3, r3 %= n5;
  return r3;
}
function yo2(t, e2) {
  if (t === ot) throw new Error("invert: expected non-zero number");
  if (e2 <= ot) throw new Error("invert: expected positive modulus, got " + e2);
  let n5 = lt2(t, e2), r3 = e2, o4 = ot, s3 = Q2;
  for (; n5 !== ot; ) {
    const f7 = r3 / n5, a3 = r3 % n5, l6 = o4 - s3 * f7;
    r3 = n5, n5 = a3, o4 = s3, s3 = l6;
  }
  if (r3 !== Q2) throw new Error("invert: does not exist");
  return lt2(o4, e2);
}
function mo2(t, e2) {
  const n5 = (t.ORDER + Q2) / po2, r3 = t.pow(e2, n5);
  if (!t.eql(t.sqr(r3), e2)) throw new Error("Cannot find square root");
  return r3;
}
function rc(t, e2) {
  const n5 = (t.ORDER - go2) / bo2, r3 = t.mul(e2, Dt2), o4 = t.pow(r3, n5), s3 = t.mul(e2, o4), i4 = t.mul(t.mul(s3, Dt2), o4), f7 = t.mul(s3, t.sub(i4, t.ONE));
  if (!t.eql(t.sqr(f7), e2)) throw new Error("Cannot find square root");
  return f7;
}
function oc(t) {
  if (t < BigInt(3)) throw new Error("sqrt is not defined for small field");
  let e2 = t - Q2, n5 = 0;
  for (; e2 % Dt2 === ot; ) e2 /= Dt2, n5++;
  let r3 = Dt2;
  const o4 = Yt2(t);
  for (; xo2(o4, r3) === 1; ) if (r3++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n5 === 1) return mo2;
  let s3 = o4.pow(r3, e2);
  const i4 = (e2 + Q2) / Dt2;
  return function(a3, l6) {
    if (a3.is0(l6)) return l6;
    if (xo2(a3, l6) !== 1) throw new Error("Cannot find square root");
    let c6 = n5, u2 = a3.mul(a3.ONE, s3), h5 = a3.pow(l6, e2), g4 = a3.pow(l6, i4);
    for (; !a3.eql(h5, a3.ONE); ) {
      if (a3.is0(h5)) return a3.ZERO;
      let w3 = 1, y4 = a3.sqr(h5);
      for (; !a3.eql(y4, a3.ONE); ) if (w3++, y4 = a3.sqr(y4), w3 === c6) throw new Error("Cannot find square root");
      const x5 = Q2 << BigInt(c6 - w3 - 1), R4 = a3.pow(u2, x5);
      c6 = w3, u2 = a3.sqr(R4), h5 = a3.mul(h5, u2), g4 = a3.mul(g4, R4);
    }
    return g4;
  };
}
function sc(t) {
  return t % po2 === nc ? mo2 : t % bo2 === go2 ? rc : oc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function fc(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n5 = ic.reduce((r3, o4) => (r3[o4] = "function", r3), e2);
  return ke2(t, n5), t;
}
function cc(t, e2, n5) {
  if (n5 < ot) throw new Error("invalid exponent, negatives unsupported");
  if (n5 === ot) return t.ONE;
  if (n5 === Q2) return e2;
  let r3 = t.ONE, o4 = e2;
  for (; n5 > ot; ) n5 & Q2 && (r3 = t.mul(r3, o4)), o4 = t.sqr(o4), n5 >>= Q2;
  return r3;
}
function wo2(t, e2, n5 = false) {
  const r3 = new Array(e2.length).fill(n5 ? t.ZERO : void 0), o4 = e2.reduce((i4, f7, a3) => t.is0(f7) ? i4 : (r3[a3] = i4, t.mul(i4, f7)), t.ONE), s3 = t.inv(o4);
  return e2.reduceRight((i4, f7, a3) => t.is0(f7) ? i4 : (r3[a3] = t.mul(i4, r3[a3]), t.mul(i4, f7)), s3), r3;
}
function xo2(t, e2) {
  const n5 = (t.ORDER - Q2) / Dt2, r3 = t.pow(e2, n5), o4 = t.eql(r3, t.ONE), s3 = t.eql(r3, t.ZERO), i4 = t.eql(r3, t.neg(t.ONE));
  if (!o4 && !s3 && !i4) throw new Error("invalid Legendre symbol result");
  return o4 ? 1 : s3 ? 0 : -1;
}
function ac(t, e2) {
  e2 !== void 0 && mt(e2);
  const n5 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function Yt2(t, e2, n5 = false, r3 = {}) {
  if (t <= ot) throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o4, s3;
  if (typeof e2 == "object" && e2 != null) {
    if (r3.sqrt || n5) throw new Error("cannot specify opts in two arguments");
    const c6 = e2;
    c6.BITS && (o4 = c6.BITS), c6.sqrt && (s3 = c6.sqrt), typeof c6.isLE == "boolean" && (n5 = c6.isLE);
  } else typeof e2 == "number" && (o4 = e2), r3.sqrt && (s3 = r3.sqrt);
  const { nBitLength: i4, nByteLength: f7 } = ac(t, o4);
  if (f7 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const l6 = Object.freeze({ ORDER: t, isLE: n5, BITS: i4, BYTES: f7, MASK: je2(i4), ZERO: ot, ONE: Q2, create: (c6) => lt2(c6, t), isValid: (c6) => {
    if (typeof c6 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof c6);
    return ot <= c6 && c6 < t;
  }, is0: (c6) => c6 === ot, isValidNot0: (c6) => !l6.is0(c6) && l6.isValid(c6), isOdd: (c6) => (c6 & Q2) === Q2, neg: (c6) => lt2(-c6, t), eql: (c6, u2) => c6 === u2, sqr: (c6) => lt2(c6 * c6, t), add: (c6, u2) => lt2(c6 + u2, t), sub: (c6, u2) => lt2(c6 - u2, t), mul: (c6, u2) => lt2(c6 * u2, t), pow: (c6, u2) => cc(l6, c6, u2), div: (c6, u2) => lt2(c6 * yo2(u2, t), t), sqrN: (c6) => c6 * c6, addN: (c6, u2) => c6 + u2, subN: (c6, u2) => c6 - u2, mulN: (c6, u2) => c6 * u2, inv: (c6) => yo2(c6, t), sqrt: s3 || ((c6) => (a3 || (a3 = sc(t)), a3(l6, c6))), toBytes: (c6) => n5 ? An2(c6, f7) : In2(c6, f7), fromBytes: (c6) => {
    if (c6.length !== f7) throw new Error("Field.fromBytes: expected " + f7 + " bytes, got " + c6.length);
    return n5 ? Le2(c6) : Ce2(c6);
  }, invertBatch: (c6) => wo2(l6, c6), cmov: (c6, u2, h5) => h5 ? u2 : c6 });
  return Object.freeze(l6);
}
function vo2(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e2 = t.toString(2).length;
  return Math.ceil(e2 / 8);
}
function Eo2(t) {
  const e2 = vo2(t);
  return e2 + Math.ceil(e2 / 2);
}
function uc(t, e2, n5 = false) {
  const r3 = t.length, o4 = vo2(e2), s3 = Eo2(e2);
  if (r3 < 16 || r3 < s3 || r3 > 1024) throw new Error("expected " + s3 + "-1024 bytes of input, got " + r3);
  const i4 = n5 ? Le2(t) : Ce2(t), f7 = lt2(i4, e2 - Q2) + Q2;
  return n5 ? An2(f7, o4) : In2(f7, o4);
}
var Xt2 = BigInt(0);
var Mt2 = BigInt(1);
function le2(t, e2) {
  const n5 = e2.negate();
  return t ? n5 : e2;
}
function lc(t, e2, n5) {
  const r3 = e2 === "pz" ? (i4) => i4.pz : (i4) => i4.ez, o4 = wo2(t.Fp, n5.map(r3));
  return n5.map((i4, f7) => i4.toAffine(o4[f7])).map(t.fromAffine);
}
function Bo2(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function On2(t, e2) {
  Bo2(t, e2);
  const n5 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1), o4 = 2 ** t, s3 = je2(t), i4 = BigInt(t);
  return { windows: n5, windowSize: r3, mask: s3, maxNumber: o4, shiftBy: i4 };
}
function Io2(t, e2, n5) {
  const { windowSize: r3, mask: o4, maxNumber: s3, shiftBy: i4 } = n5;
  let f7 = Number(t & o4), a3 = t >> i4;
  f7 > r3 && (f7 -= s3, a3 += Mt2);
  const l6 = e2 * r3, c6 = l6 + Math.abs(f7) - 1, u2 = f7 === 0, h5 = f7 < 0, g4 = e2 % 2 !== 0;
  return { nextN: a3, offset: c6, isZero: u2, isNeg: h5, isNegF: g4, offsetF: l6 };
}
function dc(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n5, r3) => {
    if (!(n5 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function hc(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n5, r3) => {
    if (!e2.isValid(n5)) throw new Error("invalid scalar at index " + r3);
  });
}
var Un2 = /* @__PURE__ */ new WeakMap();
var Ao2 = /* @__PURE__ */ new WeakMap();
function _n2(t) {
  return Ao2.get(t) || 1;
}
function So2(t) {
  if (t !== Xt2) throw new Error("invalid wNAF");
}
function pc(t, e2) {
  return { constTimeNegate: le2, hasPrecomputes(n5) {
    return _n2(n5) !== 1;
  }, unsafeLadder(n5, r3, o4 = t.ZERO) {
    let s3 = n5;
    for (; r3 > Xt2; ) r3 & Mt2 && (o4 = o4.add(s3)), s3 = s3.double(), r3 >>= Mt2;
    return o4;
  }, precomputeWindow(n5, r3) {
    const { windows: o4, windowSize: s3 } = On2(r3, e2), i4 = [];
    let f7 = n5, a3 = f7;
    for (let l6 = 0; l6 < o4; l6++) {
      a3 = f7, i4.push(a3);
      for (let c6 = 1; c6 < s3; c6++) a3 = a3.add(f7), i4.push(a3);
      f7 = a3.double();
    }
    return i4;
  }, wNAF(n5, r3, o4) {
    let s3 = t.ZERO, i4 = t.BASE;
    const f7 = On2(n5, e2);
    for (let a3 = 0; a3 < f7.windows; a3++) {
      const { nextN: l6, offset: c6, isZero: u2, isNeg: h5, isNegF: g4, offsetF: w3 } = Io2(o4, a3, f7);
      o4 = l6, u2 ? i4 = i4.add(le2(g4, r3[w3])) : s3 = s3.add(le2(h5, r3[c6]));
    }
    return So2(o4), { p: s3, f: i4 };
  }, wNAFUnsafe(n5, r3, o4, s3 = t.ZERO) {
    const i4 = On2(n5, e2);
    for (let f7 = 0; f7 < i4.windows && o4 !== Xt2; f7++) {
      const { nextN: a3, offset: l6, isZero: c6, isNeg: u2 } = Io2(o4, f7, i4);
      if (o4 = a3, !c6) {
        const h5 = r3[l6];
        s3 = s3.add(u2 ? h5.negate() : h5);
      }
    }
    return So2(o4), s3;
  }, getPrecomputes(n5, r3, o4) {
    let s3 = Un2.get(r3);
    return s3 || (s3 = this.precomputeWindow(r3, n5), n5 !== 1 && (typeof o4 == "function" && (s3 = o4(s3)), Un2.set(r3, s3))), s3;
  }, wNAFCached(n5, r3, o4) {
    const s3 = _n2(n5);
    return this.wNAF(s3, this.getPrecomputes(s3, n5, o4), r3);
  }, wNAFCachedUnsafe(n5, r3, o4, s3) {
    const i4 = _n2(n5);
    return i4 === 1 ? this.unsafeLadder(n5, r3, s3) : this.wNAFUnsafe(i4, this.getPrecomputes(i4, n5, o4), r3, s3);
  }, setWindowSize(n5, r3) {
    Bo2(r3, e2), Ao2.set(n5, r3), Un2.delete(n5);
  } };
}
function gc(t, e2, n5, r3) {
  let o4 = e2, s3 = t.ZERO, i4 = t.ZERO;
  for (; n5 > Xt2 || r3 > Xt2; ) n5 & Mt2 && (s3 = s3.add(o4)), r3 & Mt2 && (i4 = i4.add(o4)), o4 = o4.double(), n5 >>= Mt2, r3 >>= Mt2;
  return { p1: s3, p2: i4 };
}
function bc(t, e2, n5, r3) {
  dc(n5, t), hc(r3, e2);
  const o4 = n5.length, s3 = r3.length;
  if (o4 !== s3) throw new Error("arrays of points and scalars must have equal length");
  const i4 = t.ZERO, f7 = tc(BigInt(o4));
  let a3 = 1;
  f7 > 12 ? a3 = f7 - 3 : f7 > 4 ? a3 = f7 - 2 : f7 > 0 && (a3 = 2);
  const l6 = je2(a3), c6 = new Array(Number(l6) + 1).fill(i4), u2 = Math.floor((e2.BITS - 1) / a3) * a3;
  let h5 = i4;
  for (let g4 = u2; g4 >= 0; g4 -= a3) {
    c6.fill(i4);
    for (let y4 = 0; y4 < s3; y4++) {
      const x5 = r3[y4], R4 = Number(x5 >> BigInt(g4) & l6);
      c6[R4] = c6[R4].add(n5[y4]);
    }
    let w3 = i4;
    for (let y4 = c6.length - 1, x5 = i4; y4 > 0; y4--) x5 = x5.add(c6[y4]), w3 = w3.add(x5);
    if (h5 = h5.add(w3), g4 !== 0) for (let y4 = 0; y4 < a3; y4++) h5 = h5.double();
  }
  return h5;
}
function No2(t, e2) {
  if (e2) {
    if (e2.ORDER !== t) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return fc(e2), e2;
  } else return Yt2(t);
}
function yc(t, e2, n5 = {}) {
  if (!e2 || typeof e2 != "object") throw new Error(`expected valid ${t} CURVE object`);
  for (const f7 of ["p", "n", "h"]) {
    const a3 = e2[f7];
    if (!(typeof a3 == "bigint" && a3 > Xt2)) throw new Error(`CURVE.${f7} must be positive bigint`);
  }
  const r3 = No2(e2.p, n5.Fp), o4 = No2(e2.n, n5.Fn), i4 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f7 of i4) if (!r3.isValid(e2[f7])) throw new Error(`CURVE.${f7} must be valid field element of CURVE.Fp`);
  return { Fp: r3, Fn: o4 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de2 = BigInt(0);
var Jt2 = BigInt(1);
var Pe2 = BigInt(2);
function mc(t) {
  return ke2(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function wc(t) {
  const e2 = mc(t), { P: n5, type: r3, adjustScalarBytes: o4, powPminus2: s3, randomBytes: i4 } = e2, f7 = r3 === "x25519";
  if (!f7 && r3 !== "x448") throw new Error("invalid type");
  const a3 = i4 || Zt2, l6 = f7 ? 255 : 448, c6 = f7 ? 32 : 56, u2 = BigInt(f7 ? 9 : 5), h5 = BigInt(f7 ? 121665 : 39081), g4 = f7 ? Pe2 ** BigInt(254) : Pe2 ** BigInt(447), w3 = f7 ? BigInt(8) * Pe2 ** BigInt(251) - Jt2 : BigInt(4) * Pe2 ** BigInt(445) - Jt2, y4 = g4 + w3 + Jt2, x5 = (d5) => lt2(d5, n5), R4 = M5(u2);
  function M5(d5) {
    return An2(x5(d5), c6);
  }
  function L2(d5) {
    const m3 = rt2("u coordinate", d5, c6);
    return f7 && (m3[31] &= 127), x5(Le2(m3));
  }
  function V4(d5) {
    return Le2(o4(rt2("scalar", d5, c6)));
  }
  function _3(d5, m3) {
    const p3 = $2(L2(m3), V4(d5));
    if (p3 === de2) throw new Error("invalid private or public key received");
    return M5(p3);
  }
  function k5(d5) {
    return _3(d5, R4);
  }
  function j3(d5, m3, p3) {
    const b4 = x5(d5 * (m3 - p3));
    return m3 = x5(m3 - b4), p3 = x5(p3 + b4), { x_2: m3, x_3: p3 };
  }
  function $2(d5, m3) {
    Nn2("u", d5, de2, n5), Nn2("scalar", m3, g4, y4);
    const p3 = m3, b4 = d5;
    let v5 = Jt2, B3 = de2, E3 = d5, I3 = Jt2, S3 = de2;
    for (let A3 = BigInt(l6 - 1); A3 >= de2; A3--) {
      const T3 = p3 >> A3 & Jt2;
      S3 ^= T3, { x_2: v5, x_3: E3 } = j3(S3, v5, E3), { x_2: B3, x_3: I3 } = j3(S3, B3, I3), S3 = T3;
      const U3 = v5 + B3, C4 = x5(U3 * U3), H2 = v5 - B3, q2 = x5(H2 * H2), P5 = C4 - q2, K5 = E3 + I3, et2 = E3 - I3, Z = x5(et2 * U3), z4 = x5(K5 * H2), Ft3 = Z + z4, yt3 = Z - z4;
      E3 = x5(Ft3 * Ft3), I3 = x5(b4 * x5(yt3 * yt3)), v5 = x5(C4 * q2), B3 = x5(P5 * (C4 + x5(h5 * P5)));
    }
    ({ x_2: v5, x_3: E3 } = j3(S3, v5, E3)), { x_2: B3, x_3: I3 } = j3(S3, B3, I3);
    const O5 = s3(B3);
    return x5(v5 * O5);
  }
  return { scalarMult: _3, scalarMultBase: k5, getSharedSecret: (d5, m3) => _3(d5, m3), getPublicKey: (d5) => k5(d5), utils: { randomPrivateKey: () => a3(c6) }, GuBytes: R4.slice() };
}
BigInt(0);
var xc = BigInt(1);
var Oo2 = BigInt(2);
var vc = BigInt(3);
var Ec = BigInt(5);
var Bc = BigInt(8);
var Uo2 = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Bc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ic(t) {
  const e2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o4 = BigInt(80), s3 = Uo2.p, f7 = t * t % s3 * t % s3, a3 = pt(f7, Oo2, s3) * f7 % s3, l6 = pt(a3, xc, s3) * t % s3, c6 = pt(l6, Ec, s3) * l6 % s3, u2 = pt(c6, e2, s3) * c6 % s3, h5 = pt(u2, n5, s3) * u2 % s3, g4 = pt(h5, r3, s3) * h5 % s3, w3 = pt(g4, o4, s3) * g4 % s3, y4 = pt(w3, o4, s3) * g4 % s3, x5 = pt(y4, e2, s3) * c6 % s3;
  return { pow_p_5_8: pt(x5, Oo2, s3) * t % s3, b2: f7 };
}
function Ac(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Tn2 = (() => {
  const t = Uo2.p;
  return wc({ P: t, type: "x25519", powPminus2: (e2) => {
    const { pow_p_5_8: n5, b2: r3 } = Ic(e2);
    return lt2(pt(n5, vc, t) * r3, t);
  }, adjustScalarBytes: Ac });
})();
function _o2(t) {
  t.lowS !== void 0 && Re2("lowS", t.lowS), t.prehash !== void 0 && Re2("prehash", t.prehash);
}
var Sc = class extends Error {
  constructor(e2 = "") {
    super(e2);
  }
};
var vt2 = { Err: Sc, _tlv: { encode: (t, e2) => {
  const { Err: n5 } = vt2;
  if (t < 0 || t > 256) throw new n5("tlv.encode: wrong tag");
  if (e2.length & 1) throw new n5("tlv.encode: unpadded data");
  const r3 = e2.length / 2, o4 = $e2(r3);
  if (o4.length / 2 & 128) throw new n5("tlv.encode: long form length too big");
  const s3 = r3 > 127 ? $e2(o4.length / 2 | 128) : "";
  return $e2(t) + s3 + o4 + e2;
}, decode(t, e2) {
  const { Err: n5 } = vt2;
  let r3 = 0;
  if (t < 0 || t > 256) throw new n5("tlv.encode: wrong tag");
  if (e2.length < 2 || e2[r3++] !== t) throw new n5("tlv.decode: wrong tlv");
  const o4 = e2[r3++], s3 = !!(o4 & 128);
  let i4 = 0;
  if (!s3) i4 = o4;
  else {
    const a3 = o4 & 127;
    if (!a3) throw new n5("tlv.decode(long): indefinite length not supported");
    if (a3 > 4) throw new n5("tlv.decode(long): byte length is too big");
    const l6 = e2.subarray(r3, r3 + a3);
    if (l6.length !== a3) throw new n5("tlv.decode: length bytes not complete");
    if (l6[0] === 0) throw new n5("tlv.decode(long): zero leftmost byte");
    for (const c6 of l6) i4 = i4 << 8 | c6;
    if (r3 += a3, i4 < 128) throw new n5("tlv.decode(long): not minimal encoding");
  }
  const f7 = e2.subarray(r3, r3 + i4);
  if (f7.length !== i4) throw new n5("tlv.decode: wrong value length");
  return { v: f7, l: e2.subarray(r3 + i4) };
} }, _int: { encode(t) {
  const { Err: e2 } = vt2;
  if (t < he2) throw new e2("integer: negative integers are not allowed");
  let n5 = $e2(t);
  if (Number.parseInt(n5[0], 16) & 8 && (n5 = "00" + n5), n5.length & 1) throw new e2("unexpected DER parsing assertion: unpadded hex");
  return n5;
}, decode(t) {
  const { Err: e2 } = vt2;
  if (t[0] & 128) throw new e2("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e2("invalid signature integer: unnecessary leading zero");
  return Ce2(t);
} }, toSig(t) {
  const { Err: e2, _int: n5, _tlv: r3 } = vt2, o4 = rt2("signature", t), { v: s3, l: i4 } = r3.decode(48, o4);
  if (i4.length) throw new e2("invalid signature: left bytes after parsing");
  const { v: f7, l: a3 } = r3.decode(2, s3), { v: l6, l: c6 } = r3.decode(2, a3);
  if (c6.length) throw new e2("invalid signature: left bytes after parsing");
  return { r: n5.decode(f7), s: n5.decode(l6) };
}, hexFromSig(t) {
  const { _tlv: e2, _int: n5 } = vt2, r3 = e2.encode(2, n5.encode(t.r)), o4 = e2.encode(2, n5.encode(t.s)), s3 = r3 + o4;
  return e2.encode(48, s3);
} };
var he2 = BigInt(0);
var pe2 = BigInt(1);
var Nc = BigInt(2);
var He2 = BigInt(3);
var Oc = BigInt(4);
function Uc(t, e2, n5) {
  function r3(o4) {
    const s3 = t.sqr(o4), i4 = t.mul(s3, o4);
    return t.add(t.add(i4, t.mul(o4, e2)), n5);
  }
  return r3;
}
function To2(t, e2, n5) {
  const { BYTES: r3 } = t;
  function o4(s3) {
    let i4;
    if (typeof s3 == "bigint") i4 = s3;
    else {
      let f7 = rt2("private key", s3);
      if (e2) {
        if (!e2.includes(f7.length * 2)) throw new Error("invalid private key");
        const a3 = new Uint8Array(r3);
        a3.set(f7, a3.length - f7.length), f7 = a3;
      }
      try {
        i4 = t.fromBytes(f7);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r3}, got ${typeof s3}`);
      }
    }
    if (n5 && (i4 = t.create(i4)), !t.isValidNot0(i4)) throw new Error("invalid private key: out of range [1..N-1]");
    return i4;
  }
  return o4;
}
function _c(t, e2 = {}) {
  const { Fp: n5, Fn: r3 } = yc("weierstrass", t, e2), { h: o4, n: s3 } = t;
  ke2(e2, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i4 } = e2;
  if (i4 && (!n5.is0(t.a) || typeof i4.beta != "bigint" || typeof i4.splitScalar != "function")) throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f7() {
    if (!n5.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function a3($2, d5, m3) {
    const { x: p3, y: b4 } = d5.toAffine(), v5 = n5.toBytes(p3);
    if (Re2("isCompressed", m3), m3) {
      f7();
      const B3 = !n5.isOdd(b4);
      return Ht2(Ro2(B3), v5);
    } else return Ht2(Uint8Array.of(4), v5, n5.toBytes(b4));
  }
  function l6($2) {
    at($2);
    const d5 = n5.BYTES, m3 = d5 + 1, p3 = 2 * d5 + 1, b4 = $2.length, v5 = $2[0], B3 = $2.subarray(1);
    if (b4 === m3 && (v5 === 2 || v5 === 3)) {
      const E3 = n5.fromBytes(B3);
      if (!n5.isValid(E3)) throw new Error("bad point: is not on curve, wrong x");
      const I3 = h5(E3);
      let S3;
      try {
        S3 = n5.sqrt(I3);
      } catch (T3) {
        const U3 = T3 instanceof Error ? ": " + T3.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U3);
      }
      f7();
      const O5 = n5.isOdd(S3);
      return (v5 & 1) === 1 !== O5 && (S3 = n5.neg(S3)), { x: E3, y: S3 };
    } else if (b4 === p3 && v5 === 4) {
      const E3 = n5.fromBytes(B3.subarray(d5 * 0, d5 * 1)), I3 = n5.fromBytes(B3.subarray(d5 * 1, d5 * 2));
      if (!g4(E3, I3)) throw new Error("bad point: is not on curve");
      return { x: E3, y: I3 };
    } else throw new Error(`bad point: got length ${b4}, expected compressed=${m3} or uncompressed=${p3}`);
  }
  const c6 = e2.toBytes || a3, u2 = e2.fromBytes || l6, h5 = Uc(n5, t.a, t.b);
  function g4($2, d5) {
    const m3 = n5.sqr(d5), p3 = h5($2);
    return n5.eql(m3, p3);
  }
  if (!g4(t.Gx, t.Gy)) throw new Error("bad curve params: generator point");
  const w3 = n5.mul(n5.pow(t.a, He2), Oc), y4 = n5.mul(n5.sqr(t.b), BigInt(27));
  if (n5.is0(n5.add(w3, y4))) throw new Error("bad curve params: a or b");
  function x5($2, d5, m3 = false) {
    if (!n5.isValid(d5) || m3 && n5.is0(d5)) throw new Error(`bad point coordinate ${$2}`);
    return d5;
  }
  function R4($2) {
    if (!($2 instanceof _3)) throw new Error("ProjectivePoint expected");
  }
  const M5 = ho2(($2, d5) => {
    const { px: m3, py: p3, pz: b4 } = $2;
    if (n5.eql(b4, n5.ONE)) return { x: m3, y: p3 };
    const v5 = $2.is0();
    d5 == null && (d5 = v5 ? n5.ONE : n5.inv(b4));
    const B3 = n5.mul(m3, d5), E3 = n5.mul(p3, d5), I3 = n5.mul(b4, d5);
    if (v5) return { x: n5.ZERO, y: n5.ZERO };
    if (!n5.eql(I3, n5.ONE)) throw new Error("invZ was invalid");
    return { x: B3, y: E3 };
  }), L2 = ho2(($2) => {
    if ($2.is0()) {
      if (e2.allowInfinityPoint && !n5.is0($2.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d5, y: m3 } = $2.toAffine();
    if (!n5.isValid(d5) || !n5.isValid(m3)) throw new Error("bad point: x or y not field elements");
    if (!g4(d5, m3)) throw new Error("bad point: equation left != right");
    if (!$2.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function V4($2, d5, m3, p3, b4) {
    return m3 = new _3(n5.mul(m3.px, $2), m3.py, m3.pz), d5 = le2(p3, d5), m3 = le2(b4, m3), d5.add(m3);
  }
  class _3 {
    constructor(d5, m3, p3) {
      this.px = x5("x", d5), this.py = x5("y", m3, true), this.pz = x5("z", p3), Object.freeze(this);
    }
    static fromAffine(d5) {
      const { x: m3, y: p3 } = d5 || {};
      if (!d5 || !n5.isValid(m3) || !n5.isValid(p3)) throw new Error("invalid affine point");
      if (d5 instanceof _3) throw new Error("projective point not allowed");
      return n5.is0(m3) && n5.is0(p3) ? _3.ZERO : new _3(m3, p3, n5.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d5) {
      return lc(_3, "pz", d5);
    }
    static fromBytes(d5) {
      return at(d5), _3.fromHex(d5);
    }
    static fromHex(d5) {
      const m3 = _3.fromAffine(u2(rt2("pointHex", d5)));
      return m3.assertValidity(), m3;
    }
    static fromPrivateKey(d5) {
      const m3 = To2(r3, e2.allowedPrivateKeyLengths, e2.wrapPrivateKey);
      return _3.BASE.multiply(m3(d5));
    }
    static msm(d5, m3) {
      return bc(_3, r3, d5, m3);
    }
    precompute(d5 = 8, m3 = true) {
      return j3.setWindowSize(this, d5), m3 || this.multiply(He2), this;
    }
    _setWindowSize(d5) {
      this.precompute(d5);
    }
    assertValidity() {
      L2(this);
    }
    hasEvenY() {
      const { y: d5 } = this.toAffine();
      if (!n5.isOdd) throw new Error("Field doesn't support isOdd");
      return !n5.isOdd(d5);
    }
    equals(d5) {
      R4(d5);
      const { px: m3, py: p3, pz: b4 } = this, { px: v5, py: B3, pz: E3 } = d5, I3 = n5.eql(n5.mul(m3, E3), n5.mul(v5, b4)), S3 = n5.eql(n5.mul(p3, E3), n5.mul(B3, b4));
      return I3 && S3;
    }
    negate() {
      return new _3(this.px, n5.neg(this.py), this.pz);
    }
    double() {
      const { a: d5, b: m3 } = t, p3 = n5.mul(m3, He2), { px: b4, py: v5, pz: B3 } = this;
      let E3 = n5.ZERO, I3 = n5.ZERO, S3 = n5.ZERO, O5 = n5.mul(b4, b4), A3 = n5.mul(v5, v5), T3 = n5.mul(B3, B3), U3 = n5.mul(b4, v5);
      return U3 = n5.add(U3, U3), S3 = n5.mul(b4, B3), S3 = n5.add(S3, S3), E3 = n5.mul(d5, S3), I3 = n5.mul(p3, T3), I3 = n5.add(E3, I3), E3 = n5.sub(A3, I3), I3 = n5.add(A3, I3), I3 = n5.mul(E3, I3), E3 = n5.mul(U3, E3), S3 = n5.mul(p3, S3), T3 = n5.mul(d5, T3), U3 = n5.sub(O5, T3), U3 = n5.mul(d5, U3), U3 = n5.add(U3, S3), S3 = n5.add(O5, O5), O5 = n5.add(S3, O5), O5 = n5.add(O5, T3), O5 = n5.mul(O5, U3), I3 = n5.add(I3, O5), T3 = n5.mul(v5, B3), T3 = n5.add(T3, T3), O5 = n5.mul(T3, U3), E3 = n5.sub(E3, O5), S3 = n5.mul(T3, A3), S3 = n5.add(S3, S3), S3 = n5.add(S3, S3), new _3(E3, I3, S3);
    }
    add(d5) {
      R4(d5);
      const { px: m3, py: p3, pz: b4 } = this, { px: v5, py: B3, pz: E3 } = d5;
      let I3 = n5.ZERO, S3 = n5.ZERO, O5 = n5.ZERO;
      const A3 = t.a, T3 = n5.mul(t.b, He2);
      let U3 = n5.mul(m3, v5), C4 = n5.mul(p3, B3), H2 = n5.mul(b4, E3), q2 = n5.add(m3, p3), P5 = n5.add(v5, B3);
      q2 = n5.mul(q2, P5), P5 = n5.add(U3, C4), q2 = n5.sub(q2, P5), P5 = n5.add(m3, b4);
      let K5 = n5.add(v5, E3);
      return P5 = n5.mul(P5, K5), K5 = n5.add(U3, H2), P5 = n5.sub(P5, K5), K5 = n5.add(p3, b4), I3 = n5.add(B3, E3), K5 = n5.mul(K5, I3), I3 = n5.add(C4, H2), K5 = n5.sub(K5, I3), O5 = n5.mul(A3, P5), I3 = n5.mul(T3, H2), O5 = n5.add(I3, O5), I3 = n5.sub(C4, O5), O5 = n5.add(C4, O5), S3 = n5.mul(I3, O5), C4 = n5.add(U3, U3), C4 = n5.add(C4, U3), H2 = n5.mul(A3, H2), P5 = n5.mul(T3, P5), C4 = n5.add(C4, H2), H2 = n5.sub(U3, H2), H2 = n5.mul(A3, H2), P5 = n5.add(P5, H2), U3 = n5.mul(C4, P5), S3 = n5.add(S3, U3), U3 = n5.mul(K5, P5), I3 = n5.mul(q2, I3), I3 = n5.sub(I3, U3), U3 = n5.mul(q2, C4), O5 = n5.mul(K5, O5), O5 = n5.add(O5, U3), new _3(I3, S3, O5);
    }
    subtract(d5) {
      return this.add(d5.negate());
    }
    is0() {
      return this.equals(_3.ZERO);
    }
    multiply(d5) {
      const { endo: m3 } = e2;
      if (!r3.isValidNot0(d5)) throw new Error("invalid scalar: out of range");
      let p3, b4;
      const v5 = (B3) => j3.wNAFCached(this, B3, _3.normalizeZ);
      if (m3) {
        const { k1neg: B3, k1: E3, k2neg: I3, k2: S3 } = m3.splitScalar(d5), { p: O5, f: A3 } = v5(E3), { p: T3, f: U3 } = v5(S3);
        b4 = A3.add(U3), p3 = V4(m3.beta, O5, T3, B3, I3);
      } else {
        const { p: B3, f: E3 } = v5(d5);
        p3 = B3, b4 = E3;
      }
      return _3.normalizeZ([p3, b4])[0];
    }
    multiplyUnsafe(d5) {
      const { endo: m3 } = e2, p3 = this;
      if (!r3.isValid(d5)) throw new Error("invalid scalar: out of range");
      if (d5 === he2 || p3.is0()) return _3.ZERO;
      if (d5 === pe2) return p3;
      if (j3.hasPrecomputes(this)) return this.multiply(d5);
      if (m3) {
        const { k1neg: b4, k1: v5, k2neg: B3, k2: E3 } = m3.splitScalar(d5), { p1: I3, p2: S3 } = gc(_3, p3, v5, E3);
        return V4(m3.beta, I3, S3, b4, B3);
      } else return j3.wNAFCachedUnsafe(p3, d5);
    }
    multiplyAndAddUnsafe(d5, m3, p3) {
      const b4 = this.multiplyUnsafe(m3).add(d5.multiplyUnsafe(p3));
      return b4.is0() ? void 0 : b4;
    }
    toAffine(d5) {
      return M5(this, d5);
    }
    isTorsionFree() {
      const { isTorsionFree: d5 } = e2;
      return o4 === pe2 ? true : d5 ? d5(_3, this) : j3.wNAFCachedUnsafe(this, s3).is0();
    }
    clearCofactor() {
      const { clearCofactor: d5 } = e2;
      return o4 === pe2 ? this : d5 ? d5(_3, this) : this.multiplyUnsafe(o4);
    }
    toBytes(d5 = true) {
      return Re2("isCompressed", d5), this.assertValidity(), c6(_3, this, d5);
    }
    toRawBytes(d5 = true) {
      return this.toBytes(d5);
    }
    toHex(d5 = true) {
      return ce(this.toBytes(d5));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _3.BASE = new _3(t.Gx, t.Gy, n5.ONE), _3.ZERO = new _3(n5.ZERO, n5.ONE, n5.ZERO), _3.Fp = n5, _3.Fn = r3;
  const k5 = r3.BITS, j3 = pc(_3, e2.endo ? Math.ceil(k5 / 2) : k5);
  return _3;
}
function Ro2(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Tc(t, e2, n5 = {}) {
  ke2(e2, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r3 = e2.randomBytes || Zt2, o4 = e2.hmac || ((p3, ...b4) => _e2(e2.hash, p3, Ht2(...b4))), { Fp: s3, Fn: i4 } = t, { ORDER: f7, BITS: a3 } = i4;
  function l6(p3) {
    const b4 = f7 >> pe2;
    return p3 > b4;
  }
  function c6(p3) {
    return l6(p3) ? i4.neg(p3) : p3;
  }
  function u2(p3, b4) {
    if (!i4.isValidNot0(b4)) throw new Error(`invalid signature ${p3}: out of range 1..CURVE.n`);
  }
  class h5 {
    constructor(b4, v5, B3) {
      u2("r", b4), u2("s", v5), this.r = b4, this.s = v5, B3 != null && (this.recovery = B3), Object.freeze(this);
    }
    static fromCompact(b4) {
      const v5 = i4.BYTES, B3 = rt2("compactSignature", b4, v5 * 2);
      return new h5(i4.fromBytes(B3.subarray(0, v5)), i4.fromBytes(B3.subarray(v5, v5 * 2)));
    }
    static fromDER(b4) {
      const { r: v5, s: B3 } = vt2.toSig(rt2("DER", b4));
      return new h5(v5, B3);
    }
    assertValidity() {
    }
    addRecoveryBit(b4) {
      return new h5(this.r, this.s, b4);
    }
    recoverPublicKey(b4) {
      const v5 = s3.ORDER, { r: B3, s: E3, recovery: I3 } = this;
      if (I3 == null || ![0, 1, 2, 3].includes(I3)) throw new Error("recovery id invalid");
      if (f7 * Nc < v5 && I3 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const O5 = I3 === 2 || I3 === 3 ? B3 + f7 : B3;
      if (!s3.isValid(O5)) throw new Error("recovery id 2 or 3 invalid");
      const A3 = s3.toBytes(O5), T3 = t.fromHex(Ht2(Ro2((I3 & 1) === 0), A3)), U3 = i4.inv(O5), C4 = L2(rt2("msgHash", b4)), H2 = i4.create(-C4 * U3), q2 = i4.create(E3 * U3), P5 = t.BASE.multiplyUnsafe(H2).add(T3.multiplyUnsafe(q2));
      if (P5.is0()) throw new Error("point at infinify");
      return P5.assertValidity(), P5;
    }
    hasHighS() {
      return l6(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h5(this.r, i4.neg(this.s), this.recovery) : this;
    }
    toBytes(b4) {
      if (b4 === "compact") return Ht2(i4.toBytes(this.r), i4.toBytes(this.s));
      if (b4 === "der") return fn(vt2.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g4 = To2(i4, n5.allowedPrivateKeyLengths, n5.wrapPrivateKey), w3 = { isValidPrivateKey(p3) {
    try {
      return g4(p3), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g4, randomPrivateKey: () => {
    const p3 = f7;
    return uc(r3(Eo2(p3)), p3);
  }, precompute(p3 = 8, b4 = t.BASE) {
    return b4.precompute(p3, false);
  } };
  function y4(p3, b4 = true) {
    return t.fromPrivateKey(p3).toBytes(b4);
  }
  function x5(p3) {
    if (typeof p3 == "bigint") return false;
    if (p3 instanceof t) return true;
    const v5 = rt2("key", p3).length, B3 = s3.BYTES, E3 = B3 + 1, I3 = 2 * B3 + 1;
    if (!(n5.allowedPrivateKeyLengths || i4.BYTES === E3)) return v5 === E3 || v5 === I3;
  }
  function R4(p3, b4, v5 = true) {
    if (x5(p3) === true) throw new Error("first arg must be private key");
    if (x5(b4) === false) throw new Error("second arg must be public key");
    return t.fromHex(b4).multiply(g4(p3)).toBytes(v5);
  }
  const M5 = e2.bits2int || function(p3) {
    if (p3.length > 8192) throw new Error("input is too large");
    const b4 = Ce2(p3), v5 = p3.length * 8 - a3;
    return v5 > 0 ? b4 >> BigInt(v5) : b4;
  }, L2 = e2.bits2int_modN || function(p3) {
    return i4.create(M5(p3));
  }, V4 = je2(a3);
  function _3(p3) {
    return Nn2("num < 2^" + a3, p3, he2, V4), i4.toBytes(p3);
  }
  function k5(p3, b4, v5 = j3) {
    if (["recovered", "canonical"].some((q2) => q2 in v5)) throw new Error("sign() legacy options not supported");
    const { hash: B3 } = e2;
    let { lowS: E3, prehash: I3, extraEntropy: S3 } = v5;
    E3 == null && (E3 = true), p3 = rt2("msgHash", p3), _o2(v5), I3 && (p3 = rt2("prehashed msgHash", B3(p3)));
    const O5 = L2(p3), A3 = g4(b4), T3 = [_3(A3), _3(O5)];
    if (S3 != null && S3 !== false) {
      const q2 = S3 === true ? r3(s3.BYTES) : S3;
      T3.push(rt2("extraEntropy", q2));
    }
    const U3 = Ht2(...T3), C4 = O5;
    function H2(q2) {
      const P5 = M5(q2);
      if (!i4.isValidNot0(P5)) return;
      const K5 = i4.inv(P5), et2 = t.BASE.multiply(P5).toAffine(), Z = i4.create(et2.x);
      if (Z === he2) return;
      const z4 = i4.create(K5 * i4.create(C4 + Z * A3));
      if (z4 === he2) return;
      let Ft3 = (et2.x === Z ? 0 : 2) | Number(et2.y & pe2), yt3 = z4;
      return E3 && l6(z4) && (yt3 = c6(z4), Ft3 ^= 1), new h5(Z, yt3, Ft3);
    }
    return { seed: U3, k2sig: H2 };
  }
  const j3 = { lowS: e2.lowS, prehash: false }, $2 = { lowS: e2.lowS, prehash: false };
  function d5(p3, b4, v5 = j3) {
    const { seed: B3, k2sig: E3 } = k5(p3, b4, v5);
    return ec(e2.hash.outputLen, i4.BYTES, o4)(B3, E3);
  }
  t.BASE.precompute(8);
  function m3(p3, b4, v5, B3 = $2) {
    const E3 = p3;
    b4 = rt2("msgHash", b4), v5 = rt2("publicKey", v5), _o2(B3);
    const { lowS: I3, prehash: S3, format: O5 } = B3;
    if ("strict" in B3) throw new Error("options.strict was renamed to lowS");
    if (O5 !== void 0 && !["compact", "der", "js"].includes(O5)) throw new Error('format must be "compact", "der" or "js"');
    const A3 = typeof E3 == "string" || nn2(E3), T3 = !A3 && !O5 && typeof E3 == "object" && E3 !== null && typeof E3.r == "bigint" && typeof E3.s == "bigint";
    if (!A3 && !T3) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U3, C4;
    try {
      if (T3) if (O5 === void 0 || O5 === "js") U3 = new h5(E3.r, E3.s);
      else throw new Error("invalid format");
      if (A3) {
        try {
          O5 !== "compact" && (U3 = h5.fromDER(E3));
        } catch (yt3) {
          if (!(yt3 instanceof vt2.Err)) throw yt3;
        }
        !U3 && O5 !== "der" && (U3 = h5.fromCompact(E3));
      }
      C4 = t.fromHex(v5);
    } catch {
      return false;
    }
    if (!U3 || I3 && U3.hasHighS()) return false;
    S3 && (b4 = e2.hash(b4));
    const { r: H2, s: q2 } = U3, P5 = L2(b4), K5 = i4.inv(q2), et2 = i4.create(P5 * K5), Z = i4.create(H2 * K5), z4 = t.BASE.multiplyUnsafe(et2).add(C4.multiplyUnsafe(Z));
    return z4.is0() ? false : i4.create(z4.x) === H2;
  }
  return Object.freeze({ getPublicKey: y4, getSharedSecret: R4, sign: d5, verify: m3, utils: w3, Point: t, Signature: h5 });
}
function Rc(t) {
  const e2 = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n5 = t.Fp, r3 = Yt2(e2.n, t.nBitLength), o4 = { Fp: n5, Fn: r3, allowedPrivateKeyLengths: t.allowedPrivateKeyLengths, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, wrapPrivateKey: t.wrapPrivateKey, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e2, curveOpts: o4 };
}
function $c(t) {
  const { CURVE: e2, curveOpts: n5 } = Rc(t), r3 = { hash: t.hash, hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e2, curveOpts: n5, ecdsaOpts: r3 };
}
function Cc(t, e2) {
  return Object.assign({}, e2, { ProjectivePoint: e2.Point, CURVE: t });
}
function Lc(t) {
  const { CURVE: e2, curveOpts: n5, ecdsaOpts: r3 } = $c(t), o4 = _c(e2, n5), s3 = Tc(o4, r3, n5);
  return Cc(t, s3);
}
function Rn2(t, e2) {
  const n5 = (r3) => Lc({ ...t, hash: r3 });
  return { ...n5(e2), create: n5 };
}
var $o2 = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Co2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Lo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var jc = Yt2($o2.p);
var kc = Yt2(Co2.p);
var Pc = Yt2(Lo2.p);
var Hc = Rn2({ ...$o2, Fp: jc, lowS: false }, Ae2);
Rn2({ ...Co2, Fp: kc, lowS: false }, Yi), Rn2({ ...Lo2, Fp: Pc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Wi);
var Dc = Hc;
var $n2 = "base10";
var tt = "base16";
var Qt2 = "base64pad";
var De2 = "base64url";
var te2 = "utf8";
var Cn2 = 0;
var ee = 1;
var ge2 = 2;
var Mc = 0;
var jo2 = 1;
var be2 = 12;
var Ln2 = 32;
function Vc() {
  const t = Tn2.utils.randomPrivateKey(), e2 = Tn2.getPublicKey(t);
  return { privateKey: toString3(t, tt), publicKey: toString3(e2, tt) };
}
function qc() {
  const t = Zt2(Ln2);
  return toString3(t, tt);
}
function Kc(t, e2) {
  const n5 = Tn2.getSharedSecret(fromString4(t, tt), fromString4(e2, tt)), r3 = Jf(Te2, n5, void 0, void 0, Ln2);
  return toString3(r3, tt);
}
function Fc(t) {
  const e2 = Te2(fromString4(t, tt));
  return toString3(e2, tt);
}
function zc(t) {
  const e2 = Te2(fromString4(t, te2));
  return toString3(e2, tt);
}
function jn2(t) {
  return fromString4(`${t}`, $n2);
}
function Vt2(t) {
  return Number(toString3(t, $n2));
}
function ko2(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function Po2(t) {
  const e2 = t.replace(/-/g, "+").replace(/_/g, "/"), n5 = (4 - e2.length % 4) % 4;
  return e2 + "=".repeat(n5);
}
function Gc(t) {
  const e2 = jn2(typeof t.type < "u" ? t.type : Cn2);
  if (Vt2(e2) === ee && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n5 = typeof t.senderPublicKey < "u" ? fromString4(t.senderPublicKey, tt) : void 0, r3 = typeof t.iv < "u" ? fromString4(t.iv, tt) : Zt2(be2), o4 = fromString4(t.symKey, tt), s3 = co2(o4, r3).encrypt(fromString4(t.message, te2)), i4 = kn2({ type: e2, sealed: s3, iv: r3, senderPublicKey: n5 });
  return t.encoding === De2 ? ko2(i4) : i4;
}
function Zc(t) {
  const e2 = fromString4(t.symKey, tt), { sealed: n5, iv: r3 } = Me2({ encoded: t.encoded, encoding: t.encoding }), o4 = co2(e2, r3).decrypt(n5);
  if (o4 === null) throw new Error("Failed to decrypt");
  return toString3(o4, te2);
}
function Wc(t, e2) {
  const n5 = jn2(ge2), r3 = Zt2(be2), o4 = fromString4(t, te2), s3 = kn2({ type: n5, sealed: o4, iv: r3 });
  return e2 === De2 ? ko2(s3) : s3;
}
function Yc(t, e2) {
  const { sealed: n5 } = Me2({ encoded: t, encoding: e2 });
  return toString3(n5, te2);
}
function kn2(t) {
  if (Vt2(t.type) === ge2) return toString3(concat3([t.type, t.sealed]), Qt2);
  if (Vt2(t.type) === ee) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([t.type, t.senderPublicKey, t.iv, t.sealed]), Qt2);
  }
  return toString3(concat3([t.type, t.iv, t.sealed]), Qt2);
}
function Me2(t) {
  const e2 = (t.encoding || Qt2) === De2 ? Po2(t.encoded) : t.encoded, n5 = fromString4(e2, Qt2), r3 = n5.slice(Mc, jo2), o4 = jo2;
  if (Vt2(r3) === ee) {
    const a3 = o4 + Ln2, l6 = a3 + be2, c6 = n5.slice(o4, a3), u2 = n5.slice(a3, l6), h5 = n5.slice(l6);
    return { type: r3, sealed: h5, iv: u2, senderPublicKey: c6 };
  }
  if (Vt2(r3) === ge2) {
    const a3 = n5.slice(o4), l6 = Zt2(be2);
    return { type: r3, sealed: a3, iv: l6 };
  }
  const s3 = o4 + be2, i4 = n5.slice(o4, s3), f7 = n5.slice(s3);
  return { type: r3, sealed: f7, iv: i4 };
}
function Xc(t, e2) {
  const n5 = Me2({ encoded: t, encoding: e2 == null ? void 0 : e2.encoding });
  return Ho2({ type: Vt2(n5.type), senderPublicKey: typeof n5.senderPublicKey < "u" ? toString3(n5.senderPublicKey, tt) : void 0, receiverPublicKey: e2 == null ? void 0 : e2.receiverPublicKey });
}
function Ho2(t) {
  const e2 = (t == null ? void 0 : t.type) || Cn2;
  if (e2 === ee) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e2, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Jc(t) {
  return t.type === ee && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Qc(t) {
  return t.type === ge2;
}
function Do2(t) {
  const e2 = Buffer.from(t.x, "base64"), n5 = Buffer.from(t.y, "base64");
  return concat3([new Uint8Array([4]), e2, n5]);
}
function ta(t, e2) {
  const [n5, r3, o4] = t.split("."), s3 = Buffer.from(Po2(o4), "base64");
  if (s3.length !== 64) throw new Error("Invalid signature length");
  const i4 = s3.slice(0, 32), f7 = s3.slice(32, 64), a3 = `${n5}.${r3}`, l6 = Te2(a3), c6 = Do2(e2);
  if (!Dc.verify(concat3([i4, f7]), l6, c6)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var Mo2 = "irn";
function ea(t) {
  return (t == null ? void 0 : t.relay) || { protocol: Mo2 };
}
function na(t) {
  const e2 = C2[t];
  if (typeof e2 > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e2;
}
function Vo2(t, e2 = "-") {
  const n5 = {}, r3 = "relay" + e2;
  return Object.keys(t).forEach((o4) => {
    if (o4.startsWith(r3)) {
      const s3 = o4.replace(r3, ""), i4 = t[o4];
      n5[s3] = i4;
    }
  }), n5;
}
function ra(t) {
  if (!t.includes("wc:")) {
    const l6 = Qe2(t);
    l6 != null && l6.includes("wc:") && (t = l6);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e2 = t.indexOf(":"), n5 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r3 = t.substring(0, e2), o4 = t.substring(e2 + 1, n5).split("@"), s3 = typeof n5 < "u" ? t.substring(n5) : "", i4 = new URLSearchParams(s3), f7 = {};
  i4.forEach((l6, c6) => {
    f7[c6] = l6;
  });
  const a3 = typeof f7.methods == "string" ? f7.methods.split(",") : void 0;
  return { protocol: r3, topic: qo2(o4[0]), version: parseInt(o4[1], 10), symKey: f7.symKey, relay: Vo2(f7), methods: a3, expiryTimestamp: f7.expiryTimestamp ? parseInt(f7.expiryTimestamp, 10) : void 0 };
}
function qo2(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function Ko2(t, e2 = "-") {
  const n5 = "relay", r3 = {};
  return Object.keys(t).forEach((o4) => {
    const s3 = o4, i4 = n5 + e2 + s3;
    t[s3] && (r3[i4] = t[s3]);
  }), r3;
}
function oa(t) {
  const e2 = new URLSearchParams(), n5 = Ko2(t.relay);
  Object.keys(n5).sort().forEach((o4) => {
    e2.set(o4, n5[o4]);
  }), e2.set("symKey", t.symKey), t.expiryTimestamp && e2.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e2.set("methods", t.methods.join(","));
  const r3 = e2.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r3}`;
}
function sa(t, e2, n5) {
  return `${t}?wc_ev=${n5}&topic=${e2}`;
}
var ia = Object.defineProperty;
var fa = Object.defineProperties;
var ca = Object.getOwnPropertyDescriptors;
var Fo2 = Object.getOwnPropertySymbols;
var aa = Object.prototype.hasOwnProperty;
var ua = Object.prototype.propertyIsEnumerable;
var zo2 = (t, e2, n5) => e2 in t ? ia(t, e2, { enumerable: true, configurable: true, writable: true, value: n5 }) : t[e2] = n5;
var la = (t, e2) => {
  for (var n5 in e2 || (e2 = {})) aa.call(e2, n5) && zo2(t, n5, e2[n5]);
  if (Fo2) for (var n5 of Fo2(e2)) ua.call(e2, n5) && zo2(t, n5, e2[n5]);
  return t;
};
var da = (t, e2) => fa(t, ca(e2));
function qt2(t) {
  const e2 = [];
  return t.forEach((n5) => {
    const [r3, o4] = n5.split(":");
    e2.push(`${r3}:${o4}`);
  }), e2;
}
function Go2(t) {
  const e2 = [];
  return Object.values(t).forEach((n5) => {
    e2.push(...qt2(n5.accounts));
  }), e2;
}
function Zo2(t, e2) {
  const n5 = [];
  return Object.values(t).forEach((r3) => {
    qt2(r3.accounts).includes(e2) && n5.push(...r3.methods);
  }), n5;
}
function Wo2(t, e2) {
  const n5 = [];
  return Object.values(t).forEach((r3) => {
    qt2(r3.accounts).includes(e2) && n5.push(...r3.events);
  }), n5;
}
function Pn2(t) {
  return t.includes(":");
}
function Yo2(t) {
  return Pn2(t) ? t.split(":")[0] : t;
}
function ye2(t) {
  var e2, n5, r3;
  const o4 = {};
  if (!Ve2(t)) return o4;
  for (const [s3, i4] of Object.entries(t)) {
    const f7 = Pn2(s3) ? [s3] : i4.chains, a3 = i4.methods || [], l6 = i4.events || [], c6 = Yo2(s3);
    o4[c6] = da(la({}, o4[c6]), { chains: ct2(f7, (e2 = o4[c6]) == null ? void 0 : e2.chains), methods: ct2(a3, (n5 = o4[c6]) == null ? void 0 : n5.methods), events: ct2(l6, (r3 = o4[c6]) == null ? void 0 : r3.events) });
  }
  return o4;
}
function Xo(t) {
  const e2 = {};
  return t == null ? void 0 : t.forEach((n5) => {
    var r3;
    const [o4, s3] = n5.split(":");
    e2[o4] || (e2[o4] = { accounts: [], chains: [], events: [], methods: [] }), e2[o4].accounts.push(n5), (r3 = e2[o4].chains) == null || r3.push(`${o4}:${s3}`);
  }), e2;
}
function ga(t, e2) {
  e2 = e2.map((r3) => r3.replace("did:pkh:", ""));
  const n5 = Xo(e2);
  for (const [r3, o4] of Object.entries(n5)) o4.methods ? o4.methods = ct2(o4.methods, t) : o4.methods = t, o4.events = ["chainChanged", "accountsChanged"];
  return n5;
}
function ba(t, e2) {
  var n5, r3, o4, s3, i4, f7;
  const a3 = ye2(t), l6 = ye2(e2), c6 = {}, u2 = Object.keys(a3).concat(Object.keys(l6));
  for (const h5 of u2) c6[h5] = { chains: ct2((n5 = a3[h5]) == null ? void 0 : n5.chains, (r3 = l6[h5]) == null ? void 0 : r3.chains), methods: ct2((o4 = a3[h5]) == null ? void 0 : o4.methods, (s3 = l6[h5]) == null ? void 0 : s3.methods), events: ct2((i4 = a3[h5]) == null ? void 0 : i4.events, (f7 = l6[h5]) == null ? void 0 : f7.events) };
  return c6;
}
var Jo2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Qo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et2(t, e2) {
  const { message: n5, code: r3 } = Qo2[t];
  return { message: e2 ? `${n5} ${e2}` : n5, code: r3 };
}
function Kt2(t, e2) {
  const { message: n5, code: r3 } = Jo2[t];
  return { message: e2 ? `${n5} ${e2}` : n5, code: r3 };
}
function me2(t, e2) {
  return Array.isArray(t) ? typeof e2 < "u" && t.length ? t.every(e2) : true : false;
}
function Ve2(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function kt2(t) {
  return typeof t > "u";
}
function it2(t, e2) {
  return e2 && kt2(t) ? true : typeof t == "string" && !!t.trim().length;
}
function qe2(t, e2) {
  return e2 && kt2(t) ? true : typeof t == "number" && !isNaN(t);
}
function ya(t, e2) {
  const { requiredNamespaces: n5 } = e2, r3 = Object.keys(t.namespaces), o4 = Object.keys(n5);
  let s3 = true;
  return It2(o4, r3) ? (r3.forEach((i4) => {
    const { accounts: f7, methods: a3, events: l6 } = t.namespaces[i4], c6 = qt2(f7), u2 = n5[i4];
    (!It2(ve2(i4, u2), c6) || !It2(u2.methods, a3) || !It2(u2.events, l6)) && (s3 = false);
  }), s3) : false;
}
function we2(t) {
  return it2(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function ts(t) {
  if (it2(t, false) && t.includes(":")) {
    const e2 = t.split(":");
    if (e2.length === 3) {
      const n5 = e2[0] + ":" + e2[1];
      return !!e2[2] && we2(n5);
    }
  }
  return false;
}
function ma(t) {
  function e2(n5) {
    try {
      return typeof new URL(n5) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it2(t, false)) {
      if (e2(t)) return true;
      const n5 = Qe2(t);
      return e2(n5);
    }
  } catch {
  }
  return false;
}
function wa(t) {
  var e2;
  return (e2 = t == null ? void 0 : t.proposer) == null ? void 0 : e2.publicKey;
}
function xa(t) {
  return t == null ? void 0 : t.topic;
}
function va(t, e2) {
  let n5 = null;
  return it2(t == null ? void 0 : t.publicKey, false) || (n5 = Et2("MISSING_OR_INVALID", `${e2} controller public key should be a string`)), n5;
}
function Hn2(t) {
  let e2 = true;
  return me2(t) ? t.length && (e2 = t.every((n5) => it2(n5, false))) : e2 = false, e2;
}
function es(t, e2, n5) {
  let r3 = null;
  return me2(e2) && e2.length ? e2.forEach((o4) => {
    r3 || we2(o4) || (r3 = Kt2("UNSUPPORTED_CHAINS", `${n5}, chain ${o4} should be a string and conform to "namespace:chainId" format`));
  }) : we2(t) || (r3 = Kt2("UNSUPPORTED_CHAINS", `${n5}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r3;
}
function ns(t, e2, n5) {
  let r3 = null;
  return Object.entries(t).forEach(([o4, s3]) => {
    if (r3) return;
    const i4 = es(o4, ve2(o4, s3), `${e2} ${n5}`);
    i4 && (r3 = i4);
  }), r3;
}
function rs(t, e2) {
  let n5 = null;
  return me2(t) ? t.forEach((r3) => {
    n5 || ts(r3) || (n5 = Kt2("UNSUPPORTED_ACCOUNTS", `${e2}, account ${r3} should be a string and conform to "namespace:chainId:address" format`));
  }) : n5 = Kt2("UNSUPPORTED_ACCOUNTS", `${e2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n5;
}
function os(t, e2) {
  let n5 = null;
  return Object.values(t).forEach((r3) => {
    if (n5) return;
    const o4 = rs(r3 == null ? void 0 : r3.accounts, `${e2} namespace`);
    o4 && (n5 = o4);
  }), n5;
}
function ss(t, e2) {
  let n5 = null;
  return Hn2(t == null ? void 0 : t.methods) ? Hn2(t == null ? void 0 : t.events) || (n5 = Kt2("UNSUPPORTED_EVENTS", `${e2}, events should be an array of strings or empty array for no events`)) : n5 = Kt2("UNSUPPORTED_METHODS", `${e2}, methods should be an array of strings or empty array for no methods`), n5;
}
function Dn(t, e2) {
  let n5 = null;
  return Object.values(t).forEach((r3) => {
    if (n5) return;
    const o4 = ss(r3, `${e2}, namespace`);
    o4 && (n5 = o4);
  }), n5;
}
function Ea(t, e2, n5) {
  let r3 = null;
  if (t && Ve2(t)) {
    const o4 = Dn(t, e2);
    o4 && (r3 = o4);
    const s3 = ns(t, e2, n5);
    s3 && (r3 = s3);
  } else r3 = Et2("MISSING_OR_INVALID", `${e2}, ${n5} should be an object with data`);
  return r3;
}
function is(t, e2) {
  let n5 = null;
  if (t && Ve2(t)) {
    const r3 = Dn(t, e2);
    r3 && (n5 = r3);
    const o4 = os(t, e2);
    o4 && (n5 = o4);
  } else n5 = Et2("MISSING_OR_INVALID", `${e2}, namespaces should be an object with data`);
  return n5;
}
function fs(t) {
  return it2(t.protocol, true);
}
function Ba(t, e2) {
  let n5 = false;
  return e2 && !t ? n5 = true : t && me2(t) && t.length && t.forEach((r3) => {
    n5 = fs(r3);
  }), n5;
}
function Ia(t) {
  return typeof t == "number";
}
function Aa(t) {
  return typeof t < "u" && typeof t !== null;
}
function Sa(t) {
  return !(!t || typeof t != "object" || !t.code || !qe2(t.code, false) || !t.message || !it2(t.message, false));
}
function Na(t) {
  return !(kt2(t) || !it2(t.method, false));
}
function Oa(t) {
  return !(kt2(t) || kt2(t.result) && kt2(t.error) || !qe2(t.id, false) || !it2(t.jsonrpc, false));
}
function Ua(t) {
  return !(kt2(t) || !it2(t.name, false));
}
function _a(t, e2) {
  return !(!we2(e2) || !Go2(t).includes(e2));
}
function Ta(t, e2, n5) {
  return it2(n5, false) ? Zo2(t, e2).includes(n5) : false;
}
function Ra(t, e2, n5) {
  return it2(n5, false) ? Wo2(t, e2).includes(n5) : false;
}
function cs(t, e2, n5) {
  let r3 = null;
  const o4 = $a(t), s3 = Ca(e2), i4 = Object.keys(o4), f7 = Object.keys(s3), a3 = as(Object.keys(t)), l6 = as(Object.keys(e2)), c6 = a3.filter((u2) => !l6.includes(u2));
  return c6.length && (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces keys don't satisfy requiredNamespaces.
      Required: ${c6.toString()}
      Received: ${Object.keys(e2).toString()}`)), It2(i4, f7) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces chains don't satisfy required namespaces.
      Required: ${i4.toString()}
      Approved: ${f7.toString()}`)), Object.keys(e2).forEach((u2) => {
    if (!u2.includes(":") || r3) return;
    const h5 = qt2(e2[u2].accounts);
    h5.includes(u2) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces accounts don't satisfy namespace accounts for ${u2}
        Required: ${u2}
        Approved: ${h5.toString()}`));
  }), i4.forEach((u2) => {
    r3 || (It2(o4[u2].methods, s3[u2].methods) ? It2(o4[u2].events, s3[u2].events) || (r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces events don't satisfy namespace events for ${u2}`)) : r3 = Et2("NON_CONFORMING_NAMESPACES", `${n5} namespaces methods don't satisfy namespace methods for ${u2}`));
  }), r3;
}
function $a(t) {
  const e2 = {};
  return Object.keys(t).forEach((n5) => {
    var r3;
    n5.includes(":") ? e2[n5] = t[n5] : (r3 = t[n5].chains) == null || r3.forEach((o4) => {
      e2[o4] = { methods: t[n5].methods, events: t[n5].events };
    });
  }), e2;
}
function as(t) {
  return [...new Set(t.map((e2) => e2.includes(":") ? e2.split(":")[0] : e2))];
}
function Ca(t) {
  const e2 = {};
  return Object.keys(t).forEach((n5) => {
    if (n5.includes(":")) e2[n5] = t[n5];
    else {
      const r3 = qt2(t[n5].accounts);
      r3 == null ? void 0 : r3.forEach((o4) => {
        e2[o4] = { accounts: t[n5].accounts.filter((s3) => s3.includes(`${o4}:`)), methods: t[n5].methods, events: t[n5].events };
      });
    }
  }), e2;
}
function La(t, e2) {
  return qe2(t, false) && t <= e2.max && t >= e2.min;
}
function ja() {
  const t = Pt2();
  return new Promise((e2) => {
    switch (t) {
      case J3.browser:
        e2(us());
        break;
      case J3.reactNative:
        e2(ls());
        break;
      case J3.node:
        e2(ds());
        break;
      default:
        e2(true);
    }
  });
}
function us() {
  return zt2() && (navigator == null ? void 0 : navigator.onLine);
}
async function ls() {
  if (Bt2() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function ds() {
  return true;
}
function ka(t) {
  switch (Pt2()) {
    case J3.browser:
      hs(t);
      break;
    case J3.reactNative:
      ps(t);
      break;
    case J3.node:
      break;
  }
}
function hs(t) {
  !Bt2() && zt2() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function ps(t) {
  Bt2() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e2) => t(e2 == null ? void 0 : e2.isConnected)));
}
function Pa() {
  var t;
  return zt2() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Mn2 = {};
var Ha = class {
  static get(e2) {
    return Mn2[e2];
  }
  static set(e2, n5) {
    Mn2[e2] = n5;
  }
  static delete(e2) {
    delete Mn2[e2];
  }
};
function gs(t) {
  const e2 = esm_default2.decode(t);
  if (e2.length < 33) throw new Error("Too short to contain a public key");
  return e2.slice(1, 33);
}
function bs({ publicKey: t, signature: e2, payload: n5 }) {
  var r3;
  const o4 = Vn2(n5.method), s3 = 128 | parseInt(((r3 = n5.version) == null ? void 0 : r3.toString()) || "4"), i4 = Ma(n5.address), f7 = n5.era === "00" ? new Uint8Array([0]) : Vn2(n5.era);
  if (f7.length !== 1 && f7.length !== 2) throw new Error("Invalid era length");
  const a3 = parseInt(n5.nonce, 16), l6 = new Uint8Array([a3 & 255, a3 >> 8 & 255]), c6 = BigInt(`0x${Da(n5.tip)}`), u2 = qa(c6), h5 = new Uint8Array([0, ...t, i4, ...e2, ...f7, ...l6, ...u2, ...o4]), g4 = Va(h5.length + 1);
  return new Uint8Array([...g4, s3, ...h5]);
}
function ys(t) {
  const e2 = Vn2(t), n5 = (0, import_blakejs.blake2b)(e2, void 0, 32);
  return "0x" + Buffer.from(n5).toString("hex");
}
function Vn2(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e2) => parseInt(e2, 16)));
}
function Da(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function Ma(t) {
  const e2 = esm_default2.decode(t)[0];
  return e2 === 42 ? 0 : e2 === 60 ? 2 : 1;
}
function Va(t) {
  if (t < 64) return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e2 = t << 2 | 1;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e2 = t << 2 | 2;
    return new Uint8Array([e2 & 255, e2 >> 8 & 255, e2 >> 16 & 255, e2 >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function qa(t) {
  if (t < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e2 = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e2 = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e2 & BigInt(255)), Number(e2 >> BigInt(8) & BigInt(255)), Number(e2 >> BigInt(16) & BigInt(255)), Number(e2 >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function Ka(t) {
  const e2 = Uint8Array.from(Buffer.from(t.signature, "hex")), n5 = gs(t.transaction.address), r3 = bs({ publicKey: n5, signature: e2, payload: t.transaction }), o4 = Buffer.from(r3).toString("hex");
  return ys(o4);
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n4,
  IEvents: () => e,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r2,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e2) => e2.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e2, url, type) {
  return e2.message.includes("getaddrinfo ENOTFOUND") || e2.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e2;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x5) => x5.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e = class {
};
var o2 = class extends e {
  constructor(c6) {
    super();
  }
};
var n4 = class extends e {
  constructor() {
    super();
  }
};
var r2 = class extends n4 {
  constructor(c6) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o3 = class extends r2 {
  constructor(t) {
    super(t), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();
  }
  async connect(t = this.connection) {
    await this.open(t);
  }
  async disconnect() {
    await this.close();
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async request(t, e2) {
    return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e2);
  }
  async requestStrict(t, e2) {
    return new Promise(async (i4, s3) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n5) {
        s3(n5);
      }
      this.events.on(`${t.id}`, (n5) => {
        isJsonRpcError(n5) ? s3(n5.error) : i4(n5.result);
      });
      try {
        await this.connection.send(t, e2);
      } catch (n5) {
        s3(n5);
      }
    });
  }
  setConnection(t = this.connection) {
    return t;
  }
  onPayload(t) {
    this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
  }
  onClose(t) {
    t && t.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t = this.connection) {
    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == "string" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t) => this.onPayload(t)), this.connection.on("close", (t) => this.onClose(t)), this.connection.on("error", (t) => this.events.emit("error", t)), this.connection.on("register_error", (t) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r3) => r3.split("?")[0];
var h4 = 10;
var b3 = v3();
var f4 = class {
  constructor(e2) {
    if (this.url = e2, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    this.url = e2;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async open(e2 = this.url) {
    await this.register(e2);
  }
  async close() {
    return new Promise((e2, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n5) => {
        this.onClose(n5), e2();
      }, this.socket.close();
    });
  }
  async send(e2) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e2));
    } catch (t) {
      this.onError(e2.id, t);
    }
  }
  register(e2 = this.url) {
    if (!isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n5, s3) => {
        this.events.once("register_error", (o4) => {
          this.resetMaxListeners(), s3(o4);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s3(new Error("WebSocket connection is missing or invalid"));
          n5(this.socket);
        });
      });
    }
    return this.url = e2, this.registering = true, new Promise((t, n5) => {
      const s3 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e2) }, o4 = new b3(e2, [], s3);
      w2() ? o4.onerror = (i4) => {
        const a3 = i4;
        n5(this.emitError(a3.error));
      } : o4.on("error", (i4) => {
        n5(this.emitError(i4));
      }), o4.onopen = () => {
        this.onOpen(o4), t(o4);
      };
    });
  }
  onOpen(e2) {
    e2.onmessage = (t) => this.onPayload(t), e2.onclose = (t) => this.onClose(t), this.socket = e2, this.registering = false, this.events.emit("open");
  }
  onClose(e2) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e2);
  }
  onPayload(e2) {
    if (typeof e2.data > "u") return;
    const t = typeof e2.data == "string" ? safeJsonParse(e2.data) : e2.data;
    this.events.emit("payload", t);
  }
  onError(e2, t) {
    const n5 = this.parseError(t), s3 = n5.message || n5.toString(), o4 = formatJsonRpcError(e2, s3);
    this.events.emit("payload", o4);
  }
  parseError(e2, t = this.url) {
    return parseConnectionError(e2, d3(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h4 && this.events.setMaxListeners(h4);
  }
  emitError(e2) {
    const t = this.parseError(new Error((e2 == null ? void 0 : e2.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var Ue3 = "wc";
var Fe2 = 2;
var pe3 = "core";
var W3 = `${Ue3}@2:${pe3}:`;
var It3 = { name: pe3, logger: "error" };
var Tt3 = { database: ":memory:" };
var Ct2 = "crypto";
var Me3 = "client_ed25519_seed";
var Pt3 = import_time4.ONE_DAY;
var St3 = "keychain";
var Ot3 = "0.3";
var Rt3 = "messages";
var At2 = "0.3";
var xt3 = import_time4.SIX_HOURS;
var Nt3 = "publisher";
var $t3 = "irn";
var zt3 = "error";
var Ke3 = "wss://relay.walletconnect.org";
var Lt3 = "relayer";
var C3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var kt3 = "_subscription";
var M3 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var jt3 = 0.1;
var Pe3 = "2.21.8";
var ee2 = { link_mode: "link_mode", relay: "relay" };
var ye3 = { inbound: "inbound", outbound: "outbound" };
var Ut3 = "0.3";
var Ft2 = "WALLETCONNECT_CLIENT_ID";
var Be3 = "WALLETCONNECT_LINK_MODE_APPS";
var U2 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Mt3 = "subscription";
var Kt3 = "0.3";
var Qs = import_time4.FIVE_SECONDS * 1e3;
var Bt3 = "pairing";
var Vt3 = "0.3";
var oe = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var ae2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var V2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var qt3 = "history";
var Gt3 = "0.3";
var Wt3 = "expirer";
var q = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Ht3 = "0.3";
var Yt3 = "verify-api";
var ir3 = "https://verify.walletconnect.com";
var Jt3 = "https://verify.walletconnect.org";
var be3 = Jt3;
var Xt3 = `${be3}/v3`;
var Zt3 = [ir3, Jt3];
var Qt3 = "echo";
var ei2 = "https://echo.walletconnect.com";
var Y2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var X2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var rr3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var nr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var or4 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ar2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var ti = 0.1;
var ii2 = "event-client";
var si2 = 86400;
var ri2 = "https://pulse.walletconnect.org/batch";
function cr3(r3, e2) {
  if (r3.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i4 = 0; i4 < t.length; i4++) t[i4] = 255;
  for (var s3 = 0; s3 < r3.length; s3++) {
    var n5 = r3.charAt(s3), o4 = n5.charCodeAt(0);
    if (t[o4] !== 255) throw new TypeError(n5 + " is ambiguous");
    t[o4] = s3;
  }
  var a3 = r3.length, c6 = r3.charAt(0), h5 = Math.log(a3) / Math.log(256), l6 = Math.log(256) / Math.log(a3);
  function p3(u2) {
    if (u2 instanceof Uint8Array || (ArrayBuffer.isView(u2) ? u2 = new Uint8Array(u2.buffer, u2.byteOffset, u2.byteLength) : Array.isArray(u2) && (u2 = Uint8Array.from(u2))), !(u2 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u2.length === 0) return "";
    for (var m3 = 0, D3 = 0, _3 = 0, E3 = u2.length; _3 !== E3 && u2[_3] === 0; ) _3++, m3++;
    for (var L2 = (E3 - _3) * l6 + 1 >>> 0, I3 = new Uint8Array(L2); _3 !== E3; ) {
      for (var k5 = u2[_3], T3 = 0, S3 = L2 - 1; (k5 !== 0 || T3 < D3) && S3 !== -1; S3--, T3++) k5 += 256 * I3[S3] >>> 0, I3[S3] = k5 % a3 >>> 0, k5 = k5 / a3 >>> 0;
      if (k5 !== 0) throw new Error("Non-zero carry");
      D3 = T3, _3++;
    }
    for (var O5 = L2 - D3; O5 !== L2 && I3[O5] === 0; ) O5++;
    for (var te3 = c6.repeat(m3); O5 < L2; ++O5) te3 += r3.charAt(I3[O5]);
    return te3;
  }
  function y4(u2) {
    if (typeof u2 != "string") throw new TypeError("Expected String");
    if (u2.length === 0) return new Uint8Array();
    var m3 = 0;
    if (u2[m3] !== " ") {
      for (var D3 = 0, _3 = 0; u2[m3] === c6; ) D3++, m3++;
      for (var E3 = (u2.length - m3) * h5 + 1 >>> 0, L2 = new Uint8Array(E3); u2[m3]; ) {
        var I3 = t[u2.charCodeAt(m3)];
        if (I3 === 255) return;
        for (var k5 = 0, T3 = E3 - 1; (I3 !== 0 || k5 < _3) && T3 !== -1; T3--, k5++) I3 += a3 * L2[T3] >>> 0, L2[T3] = I3 % 256 >>> 0, I3 = I3 / 256 >>> 0;
        if (I3 !== 0) throw new Error("Non-zero carry");
        _3 = k5, m3++;
      }
      if (u2[m3] !== " ") {
        for (var S3 = E3 - _3; S3 !== E3 && L2[S3] === 0; ) S3++;
        for (var O5 = new Uint8Array(D3 + (E3 - S3)), te3 = D3; S3 !== E3; ) O5[te3++] = L2[S3++];
        return O5;
      }
    }
  }
  function w3(u2) {
    var m3 = y4(u2);
    if (m3) return m3;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: p3, decodeUnsafe: y4, decode: w3 };
}
var hr3 = cr3;
var lr2 = hr3;
var ni2 = (r3) => {
  if (r3 instanceof Uint8Array && r3.constructor.name === "Uint8Array") return r3;
  if (r3 instanceof ArrayBuffer) return new Uint8Array(r3);
  if (ArrayBuffer.isView(r3)) return new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ur2 = (r3) => new TextEncoder().encode(r3);
var dr3 = (r3) => new TextDecoder().decode(r3);
var gr3 = class {
  constructor(e2, t, i4) {
    this.name = e2, this.prefix = t, this.baseEncode = i4;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var pr3 = class {
  constructor(e2, t, i4) {
    if (this.name = e2, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i4;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return oi2(this, e2);
  }
};
var yr3 = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return oi2(this, e2);
  }
  decode(e2) {
    const t = e2[0], i4 = this.decoders[t];
    if (i4) return i4.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var oi2 = (r3, e2) => new yr3({ ...r3.decoders || { [r3.prefix]: r3 }, ...e2.decoders || { [e2.prefix]: e2 } });
var br3 = class {
  constructor(e2, t, i4, s3) {
    this.name = e2, this.prefix = t, this.baseEncode = i4, this.baseDecode = s3, this.encoder = new gr3(e2, t, i4), this.decoder = new pr3(e2, t, s3);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Se3 = ({ name: r3, prefix: e2, encode: t, decode: i4 }) => new br3(r3, e2, t, i4);
var me3 = ({ prefix: r3, name: e2, alphabet: t }) => {
  const { encode: i4, decode: s3 } = lr2(t, e2);
  return Se3({ prefix: r3, name: e2, encode: i4, decode: (n5) => ni2(s3(n5)) });
};
var mr3 = (r3, e2, t, i4) => {
  const s3 = {};
  for (let l6 = 0; l6 < e2.length; ++l6) s3[e2[l6]] = l6;
  let n5 = r3.length;
  for (; r3[n5 - 1] === "="; ) --n5;
  const o4 = new Uint8Array(n5 * t / 8 | 0);
  let a3 = 0, c6 = 0, h5 = 0;
  for (let l6 = 0; l6 < n5; ++l6) {
    const p3 = s3[r3[l6]];
    if (p3 === void 0) throw new SyntaxError(`Non-${i4} character`);
    c6 = c6 << t | p3, a3 += t, a3 >= 8 && (a3 -= 8, o4[h5++] = 255 & c6 >> a3);
  }
  if (a3 >= t || 255 & c6 << 8 - a3) throw new SyntaxError("Unexpected end of data");
  return o4;
};
var fr3 = (r3, e2, t) => {
  const i4 = e2[e2.length - 1] === "=", s3 = (1 << t) - 1;
  let n5 = "", o4 = 0, a3 = 0;
  for (let c6 = 0; c6 < r3.length; ++c6) for (a3 = a3 << 8 | r3[c6], o4 += 8; o4 > t; ) o4 -= t, n5 += e2[s3 & a3 >> o4];
  if (o4 && (n5 += e2[s3 & a3 << t - o4]), i4) for (; n5.length * t & 7; ) n5 += "=";
  return n5;
};
var A2 = ({ name: r3, prefix: e2, bitsPerChar: t, alphabet: i4 }) => Se3({ prefix: e2, name: r3, encode(s3) {
  return fr3(s3, i4, t);
}, decode(s3) {
  return mr3(s3, i4, t, r3);
} });
var Dr3 = Se3({ prefix: "\0", name: "identity", encode: (r3) => dr3(r3), decode: (r3) => ur2(r3) });
var vr3 = Object.freeze({ __proto__: null, identity: Dr3 });
var wr3 = A2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var _r3 = Object.freeze({ __proto__: null, base2: wr3 });
var Er3 = A2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Ir3 = Object.freeze({ __proto__: null, base8: Er3 });
var Tr3 = me3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Cr3 = Object.freeze({ __proto__: null, base10: Tr3 });
var Pr3 = A2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Sr3 = A2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Or3 = Object.freeze({ __proto__: null, base16: Pr3, base16upper: Sr3 });
var Rr3 = A2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ar3 = A2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var xr3 = A2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Nr3 = A2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var $r3 = A2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var zr2 = A2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Lr3 = A2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var kr3 = A2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var jr3 = A2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ur3 = Object.freeze({ __proto__: null, base32: Rr3, base32upper: Ar3, base32pad: xr3, base32padupper: Nr3, base32hex: $r3, base32hexupper: zr2, base32hexpad: Lr3, base32hexpadupper: kr3, base32z: jr3 });
var Fr2 = me3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Mr3 = me3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Kr3 = Object.freeze({ __proto__: null, base36: Fr2, base36upper: Mr3 });
var Br3 = me3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Vr3 = me3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var qr3 = Object.freeze({ __proto__: null, base58btc: Br3, base58flickr: Vr3 });
var Gr3 = A2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Wr3 = A2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Hr3 = A2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Yr2 = A2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Jr2 = Object.freeze({ __proto__: null, base64: Gr3, base64pad: Wr3, base64url: Hr3, base64urlpad: Yr2 });
var ai2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Xr3 = ai2.reduce((r3, e2, t) => (r3[t] = e2, r3), []);
var Zr3 = ai2.reduce((r3, e2, t) => (r3[e2.codePointAt(0)] = t, r3), []);
function Qr3(r3) {
  return r3.reduce((e2, t) => (e2 += Xr3[t], e2), "");
}
function en3(r3) {
  const e2 = [];
  for (const t of r3) {
    const i4 = Zr3[t.codePointAt(0)];
    if (i4 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e2.push(i4);
  }
  return new Uint8Array(e2);
}
var tn2 = Se3({ prefix: "🚀", name: "base256emoji", encode: Qr3, decode: en3 });
var sn3 = Object.freeze({ __proto__: null, base256emoji: tn2 });
var rn3 = hi2;
var ci2 = 128;
var nn3 = 127;
var on3 = ~nn3;
var an2 = Math.pow(2, 31);
function hi2(r3, e2, t) {
  e2 = e2 || [], t = t || 0;
  for (var i4 = t; r3 >= an2; ) e2[t++] = r3 & 255 | ci2, r3 /= 128;
  for (; r3 & on3; ) e2[t++] = r3 & 255 | ci2, r3 >>>= 7;
  return e2[t] = r3 | 0, hi2.bytes = t - i4 + 1, e2;
}
var cn2 = Ve3;
var hn2 = 128;
var li2 = 127;
function Ve3(r3, i4) {
  var t = 0, i4 = i4 || 0, s3 = 0, n5 = i4, o4, a3 = r3.length;
  do {
    if (n5 >= a3) throw Ve3.bytes = 0, new RangeError("Could not decode varint");
    o4 = r3[n5++], t += s3 < 28 ? (o4 & li2) << s3 : (o4 & li2) * Math.pow(2, s3), s3 += 7;
  } while (o4 >= hn2);
  return Ve3.bytes = n5 - i4, t;
}
var ln2 = Math.pow(2, 7);
var un2 = Math.pow(2, 14);
var dn2 = Math.pow(2, 21);
var gn3 = Math.pow(2, 28);
var pn2 = Math.pow(2, 35);
var yn3 = Math.pow(2, 42);
var bn3 = Math.pow(2, 49);
var mn3 = Math.pow(2, 56);
var fn2 = Math.pow(2, 63);
var Dn2 = function(r3) {
  return r3 < ln2 ? 1 : r3 < un2 ? 2 : r3 < dn2 ? 3 : r3 < gn3 ? 4 : r3 < pn2 ? 5 : r3 < yn3 ? 6 : r3 < bn3 ? 7 : r3 < mn3 ? 8 : r3 < fn2 ? 9 : 10;
};
var vn3 = { encode: rn3, decode: cn2, encodingLength: Dn2 };
var ui2 = vn3;
var di2 = (r3, e2, t = 0) => (ui2.encode(r3, e2, t), e2);
var gi2 = (r3) => ui2.encodingLength(r3);
var qe3 = (r3, e2) => {
  const t = e2.byteLength, i4 = gi2(r3), s3 = i4 + gi2(t), n5 = new Uint8Array(s3 + t);
  return di2(r3, n5, 0), di2(t, n5, i4), n5.set(e2, s3), new wn2(r3, t, e2, n5);
};
var wn2 = class {
  constructor(e2, t, i4, s3) {
    this.code = e2, this.size = t, this.digest = i4, this.bytes = s3;
  }
};
var pi2 = ({ name: r3, code: e2, encode: t }) => new _n3(r3, e2, t);
var _n3 = class {
  constructor(e2, t, i4) {
    this.name = e2, this.code = t, this.encode = i4;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const t = this.encode(e2);
      return t instanceof Uint8Array ? qe3(this.code, t) : t.then((i4) => qe3(this.code, i4));
    } else throw Error("Unknown type, must be binary type");
  }
};
var yi2 = (r3) => async (e2) => new Uint8Array(await crypto.subtle.digest(r3, e2));
var En3 = pi2({ name: "sha2-256", code: 18, encode: yi2("SHA-256") });
var In3 = pi2({ name: "sha2-512", code: 19, encode: yi2("SHA-512") });
var Tn3 = Object.freeze({ __proto__: null, sha256: En3, sha512: In3 });
var bi2 = 0;
var Cn3 = "identity";
var mi2 = ni2;
var Pn3 = (r3) => qe3(bi2, mi2(r3));
var Sn3 = { code: bi2, name: Cn3, encode: mi2, digest: Pn3 };
var On3 = Object.freeze({ __proto__: null, identity: Sn3 });
new TextEncoder(), new TextDecoder();
var fi2 = { ...vr3, ..._r3, ...Ir3, ...Cr3, ...Or3, ...Ur3, ...Kr3, ...qr3, ...Jr2, ...sn3 };
({ ...Tn3, ...On3 });
function Di2(r3) {
  return globalThis.Buffer != null ? new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength) : r3;
}
function Rn3(r3 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Di2(globalThis.Buffer.allocUnsafe(r3)) : new Uint8Array(r3);
}
function vi2(r3, e2, t, i4) {
  return { name: r3, prefix: e2, encoder: { name: r3, prefix: e2, encode: t }, decoder: { decode: i4 } };
}
var wi2 = vi2("utf8", "u", (r3) => "u" + new TextDecoder("utf8").decode(r3), (r3) => new TextEncoder().encode(r3.substring(1)));
var Ge2 = vi2("ascii", "a", (r3) => {
  let e2 = "a";
  for (let t = 0; t < r3.length; t++) e2 += String.fromCharCode(r3[t]);
  return e2;
}, (r3) => {
  r3 = r3.substring(1);
  const e2 = Rn3(r3.length);
  for (let t = 0; t < r3.length; t++) e2[t] = r3.charCodeAt(t);
  return e2;
});
var An3 = { utf8: wi2, "utf-8": wi2, hex: fi2.base16, latin1: Ge2, ascii: Ge2, binary: Ge2, ...fi2 };
function xn3(r3, e2 = "utf8") {
  const t = An3[e2];
  if (!t) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Di2(globalThis.Buffer.from(r3, "utf-8")) : t.decoder.decode(`${t.prefix}${r3}`);
}
var Nn3 = Object.defineProperty;
var $n3 = (r3, e2, t) => e2 in r3 ? Nn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var J4 = (r3, e2, t) => $n3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var _i2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, J4(this, "keychain", /* @__PURE__ */ new Map()), J4(this, "name", St3), J4(this, "version", Ot3), J4(this, "initialized", false), J4(this, "storagePrefix", W3), J4(this, "init", async () => {
      if (!this.initialized) {
        const i4 = await this.getKeyChain();
        typeof i4 < "u" && (this.keychain = i4), this.initialized = true;
      }
    }), J4(this, "has", (i4) => (this.isInitialized(), this.keychain.has(i4))), J4(this, "set", async (i4, s3) => {
      this.isInitialized(), this.keychain.set(i4, s3), await this.persist();
    }), J4(this, "get", (i4) => {
      this.isInitialized();
      const s3 = this.keychain.get(i4);
      if (typeof s3 > "u") {
        const { message: n5 } = Et2("NO_MATCHING_KEY", `${this.name}: ${i4}`);
        throw new Error(n5);
      }
      return s3;
    }), J4(this, "del", async (i4) => {
      this.isInitialized(), this.keychain.delete(i4), await this.persist();
    }), this.core = e2, this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e2) {
    await this.core.storage.setItem(this.storageKey, Ys(e2));
  }
  async getKeyChain() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var zn3 = Object.defineProperty;
var Ln3 = (r3, e2, t) => e2 in r3 ? zn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var x4 = (r3, e2, t) => Ln3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ei2 = class {
  constructor(e2, t, i4) {
    this.core = e2, this.logger = t, x4(this, "name", Ct2), x4(this, "keychain"), x4(this, "randomSessionIdentifier", qc()), x4(this, "initialized", false), x4(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), x4(this, "hasKeys", (s3) => (this.isInitialized(), this.keychain.has(s3))), x4(this, "getClientId", async () => {
      this.isInitialized();
      const s3 = await this.getClientSeed(), n5 = Po(s3);
      return Qe(n5.publicKey);
    }), x4(this, "generateKeyPair", () => {
      this.isInitialized();
      const s3 = Vc();
      return this.setPrivateKey(s3.publicKey, s3.privateKey);
    }), x4(this, "signJWT", async (s3) => {
      this.isInitialized();
      const n5 = await this.getClientSeed(), o4 = Po(n5), a3 = this.randomSessionIdentifier, c6 = Pt3;
      return await Qo(a3, s3, c6, o4);
    }), x4(this, "generateSharedKey", (s3, n5, o4) => {
      this.isInitialized();
      const a3 = this.getPrivateKey(s3), c6 = Kc(a3, n5);
      return this.setSymKey(c6, o4);
    }), x4(this, "setSymKey", async (s3, n5) => {
      this.isInitialized();
      const o4 = n5 || Fc(s3);
      return await this.keychain.set(o4, s3), o4;
    }), x4(this, "deleteKeyPair", async (s3) => {
      this.isInitialized(), await this.keychain.del(s3);
    }), x4(this, "deleteSymKey", async (s3) => {
      this.isInitialized(), await this.keychain.del(s3);
    }), x4(this, "encode", async (s3, n5, o4) => {
      this.isInitialized();
      const a3 = Ho2(o4), c6 = safeJsonStringify(n5);
      if (Qc(a3)) return Wc(c6, o4 == null ? void 0 : o4.encoding);
      if (Jc(a3)) {
        const y4 = a3.senderPublicKey, w3 = a3.receiverPublicKey;
        s3 = await this.generateSharedKey(y4, w3);
      }
      const h5 = this.getSymKey(s3), { type: l6, senderPublicKey: p3 } = a3;
      return Gc({ type: l6, symKey: h5, message: c6, senderPublicKey: p3, encoding: o4 == null ? void 0 : o4.encoding });
    }), x4(this, "decode", async (s3, n5, o4) => {
      this.isInitialized();
      const a3 = Xc(n5, o4);
      if (Qc(a3)) {
        const c6 = Yc(n5, o4 == null ? void 0 : o4.encoding);
        return safeJsonParse(c6);
      }
      if (Jc(a3)) {
        const c6 = a3.receiverPublicKey, h5 = a3.senderPublicKey;
        s3 = await this.generateSharedKey(c6, h5);
      }
      try {
        const c6 = this.getSymKey(s3), h5 = Zc({ symKey: c6, encoded: n5, encoding: o4 == null ? void 0 : o4.encoding });
        return safeJsonParse(h5);
      } catch (c6) {
        this.logger.error(`Failed to decode message from topic: '${s3}', clientId: '${await this.getClientId()}'`), this.logger.error(c6);
      }
    }), x4(this, "getPayloadType", (s3, n5 = Qt2) => {
      const o4 = Me2({ encoded: s3, encoding: n5 });
      return Vt2(o4.type);
    }), x4(this, "getPayloadSenderPublicKey", (s3, n5 = Qt2) => {
      const o4 = Me2({ encoded: s3, encoding: n5 });
      return o4.senderPublicKey ? toString3(o4.senderPublicKey, tt) : void 0;
    }), this.core = e2, this.logger = E2(t, this.name), this.keychain = i4 || new _i2(this.core, this.logger);
  }
  get context() {
    return y2(this.logger);
  }
  async setPrivateKey(e2, t) {
    return await this.keychain.set(e2, t), e2;
  }
  getPrivateKey(e2) {
    return this.keychain.get(e2);
  }
  async getClientSeed() {
    let e2 = "";
    try {
      e2 = this.keychain.get(Me3);
    } catch {
      e2 = qc(), await this.keychain.set(Me3, e2);
    }
    return xn3(e2, "base16");
  }
  getSymKey(e2) {
    return this.keychain.get(e2);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var kn3 = Object.defineProperty;
var jn3 = Object.defineProperties;
var Un3 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Fn3 = Object.prototype.hasOwnProperty;
var Mn3 = Object.prototype.propertyIsEnumerable;
var We2 = (r3, e2, t) => e2 in r3 ? kn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Kn3 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Fn3.call(e2, t) && We2(r3, t, e2[t]);
  if (Ii2) for (var t of Ii2(e2)) Mn3.call(e2, t) && We2(r3, t, e2[t]);
  return r3;
};
var Bn3 = (r3, e2) => jn3(r3, Un3(e2));
var K4 = (r3, e2, t) => We2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ti2 = class extends y3 {
  constructor(e2, t) {
    super(e2, t), this.logger = e2, this.core = t, K4(this, "messages", /* @__PURE__ */ new Map()), K4(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), K4(this, "name", Rt3), K4(this, "version", At2), K4(this, "initialized", false), K4(this, "storagePrefix", W3), K4(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i4 = await this.getRelayerMessages();
          typeof i4 < "u" && (this.messages = i4);
          const s3 = await this.getRelayerMessagesWithoutClientAck();
          typeof s3 < "u" && (this.messagesWithoutClientAck = s3), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i4) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i4);
        } finally {
          this.initialized = true;
        }
      }
    }), K4(this, "set", async (i4, s3, n5) => {
      this.isInitialized();
      const o4 = zc(s3);
      let a3 = this.messages.get(i4);
      if (typeof a3 > "u" && (a3 = {}), typeof a3[o4] < "u") return o4;
      if (a3[o4] = s3, this.messages.set(i4, a3), n5 === ye3.inbound) {
        const c6 = this.messagesWithoutClientAck.get(i4) || {};
        this.messagesWithoutClientAck.set(i4, Bn3(Kn3({}, c6), { [o4]: s3 }));
      }
      return await this.persist(), o4;
    }), K4(this, "get", (i4) => {
      this.isInitialized();
      let s3 = this.messages.get(i4);
      return typeof s3 > "u" && (s3 = {}), s3;
    }), K4(this, "getWithoutAck", (i4) => {
      this.isInitialized();
      const s3 = {};
      for (const n5 of i4) {
        const o4 = this.messagesWithoutClientAck.get(n5) || {};
        s3[n5] = Object.values(o4);
      }
      return s3;
    }), K4(this, "has", (i4, s3) => {
      this.isInitialized();
      const n5 = this.get(i4), o4 = zc(s3);
      return typeof n5[o4] < "u";
    }), K4(this, "ack", async (i4, s3) => {
      this.isInitialized();
      const n5 = this.messagesWithoutClientAck.get(i4);
      if (typeof n5 > "u") return;
      const o4 = zc(s3);
      delete n5[o4], Object.keys(n5).length === 0 ? this.messagesWithoutClientAck.delete(i4) : this.messagesWithoutClientAck.set(i4, n5), await this.persist();
    }), K4(this, "del", async (i4) => {
      this.isInitialized(), this.messages.delete(i4), this.messagesWithoutClientAck.delete(i4), await this.persist();
    }), this.logger = E2(e2, this.name), this.core = t;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e2) {
    await this.core.storage.setItem(this.storageKey, Ys(e2));
  }
  async setRelayerMessagesWithoutClientAck(e2) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Ys(e2));
  }
  async getRelayerMessages() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e2 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e2 < "u" ? Xs(e2) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Vn3 = Object.defineProperty;
var qn3 = Object.defineProperties;
var Gn2 = Object.getOwnPropertyDescriptors;
var Ci2 = Object.getOwnPropertySymbols;
var Wn2 = Object.prototype.hasOwnProperty;
var Hn3 = Object.prototype.propertyIsEnumerable;
var He3 = (r3, e2, t) => e2 in r3 ? Vn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ce2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Wn2.call(e2, t) && He3(r3, t, e2[t]);
  if (Ci2) for (var t of Ci2(e2)) Hn3.call(e2, t) && He3(r3, t, e2[t]);
  return r3;
};
var Pi3 = (r3, e2) => qn3(r3, Gn2(e2));
var G3 = (r3, e2, t) => He3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Yn2 = class extends m2 {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, G3(this, "events", new import_events7.EventEmitter()), G3(this, "name", Nt3), G3(this, "queue", /* @__PURE__ */ new Map()), G3(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), G3(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), G3(this, "needsTransportRestart", false), G3(this, "publish", async (i4, s3, n5) => {
      var o4, a3, c6, h5, l6;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i4, message: s3, opts: n5 } });
      const p3 = (n5 == null ? void 0 : n5.ttl) || xt3, y4 = (n5 == null ? void 0 : n5.prompt) || false, w3 = (n5 == null ? void 0 : n5.tag) || 0, u2 = (n5 == null ? void 0 : n5.id) || getBigIntRpcId().toString(), m3 = na(ea().protocol), D3 = { id: u2, method: (n5 == null ? void 0 : n5.publishMethod) || m3.publish, params: ce2({ topic: i4, message: s3, ttl: p3, prompt: y4, tag: w3, attestation: n5 == null ? void 0 : n5.attestation }, (n5 == null ? void 0 : n5.tvf) && { tvf: n5.tvf }) }, _3 = `Failed to publish payload, please try again. id:${u2} tag:${w3}`;
      try {
        kt2((o4 = D3.params) == null ? void 0 : o4.prompt) && ((a3 = D3.params) == null || delete a3.prompt), kt2((c6 = D3.params) == null ? void 0 : c6.tag) && ((h5 = D3.params) == null || delete h5.tag);
        const E3 = new Promise(async (L2) => {
          const I3 = ({ id: T3 }) => {
            var S3;
            ((S3 = D3.id) == null ? void 0 : S3.toString()) === T3.toString() && (this.removeRequestFromQueue(T3), this.relayer.events.removeListener(C3.publish, I3), L2());
          };
          this.relayer.events.on(C3.publish, I3);
          const k5 = ni(new Promise((T3, S3) => {
            this.rpcPublish(D3, n5).then(T3).catch((O5) => {
              this.logger.warn(O5, O5 == null ? void 0 : O5.message), S3(O5);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${u2} tag:${w3}`);
          try {
            await k5, this.events.removeListener(C3.publish, I3);
          } catch (T3) {
            this.queue.set(u2, { request: D3, opts: n5, attempt: 1 }), this.logger.warn(T3, T3 == null ? void 0 : T3.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: u2, topic: i4, message: s3, opts: n5 } }), await ni(E3, this.publishTimeout, _3);
      } catch (E3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(E3), (l6 = n5 == null ? void 0 : n5.internal) != null && l6.throwOnFailedPublish) throw E3;
      } finally {
        this.queue.delete(u2);
      }
    }), G3(this, "publishCustom", async (i4) => {
      var s3, n5, o4, a3, c6;
      this.logger.debug("Publishing custom payload"), this.logger.trace({ type: "method", method: "publishCustom", params: i4 });
      const { payload: h5, opts: l6 = {} } = i4, { attestation: p3, tvf: y4, publishMethod: w3, prompt: u2, tag: m3, ttl: D3 = import_time4.FIVE_MINUTES } = l6, _3 = l6.id || getBigIntRpcId().toString(), E3 = na(ea().protocol), L2 = w3 || E3.publish, I3 = { id: _3, method: L2, params: ce2(Pi3(ce2({}, h5), { ttl: D3, prompt: u2, tag: m3, attestation: p3 }), y4) }, k5 = `Failed to publish custom payload, please try again. id:${_3} tag:${m3}`;
      try {
        kt2((s3 = I3.params) == null ? void 0 : s3.prompt) && ((n5 = I3.params) == null || delete n5.prompt), kt2((o4 = I3.params) == null ? void 0 : o4.tag) && ((a3 = I3.params) == null || delete a3.tag);
        const T3 = new Promise(async (S3) => {
          const O5 = ({ id: Z }) => {
            var _e4;
            ((_e4 = I3.id) == null ? void 0 : _e4.toString()) === Z.toString() && (this.removeRequestFromQueue(Z), this.relayer.events.removeListener(C3.publish, O5), S3());
          };
          this.relayer.events.on(C3.publish, O5);
          const te3 = ni(new Promise((Z, _e4) => {
            this.rpcPublish(I3, l6).then(Z).catch((Ee2) => {
              this.logger.warn(Ee2, Ee2 == null ? void 0 : Ee2.message), _e4(Ee2);
            });
          }), this.initialPublishTimeout, `Failed initial custom payload publish, retrying.... method:${L2} id:${_3} tag:${m3}`);
          try {
            await te3, this.events.removeListener(C3.publish, O5);
          } catch (Z) {
            this.queue.set(_3, { request: I3, opts: l6, attempt: 1 }), this.logger.warn(Z, Z == null ? void 0 : Z.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: _3, payload: h5, opts: l6 } }), await ni(T3, this.publishTimeout, k5);
      } catch (T3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(T3), (c6 = l6 == null ? void 0 : l6.internal) != null && c6.throwOnFailedPublish) throw T3;
      } finally {
        this.queue.delete(_3);
      }
    }), G3(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), G3(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), G3(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), G3(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.relayer = e2, this.logger = E2(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y2(this.logger);
  }
  async rpcPublish(e2, t) {
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: e2 });
    const i4 = await this.relayer.request(e2);
    return this.relayer.events.emit(C3.publish, ce2(ce2({}, e2), t)), this.logger.debug("Successfully Published Payload"), i4;
  }
  removeRequestFromQueue(e2) {
    this.queue.delete(e2);
  }
  checkQueue() {
    this.queue.forEach(async (e2, t) => {
      var i4;
      const s3 = e2.attempt + 1;
      this.queue.set(t, Pi3(ce2({}, e2), { attempt: s3 })), this.logger.warn({}, `Publisher: queue->publishing: ${e2.request.id}, tag: ${(i4 = e2.request.params) == null ? void 0 : i4.tag}, attempt: ${s3}`), await this.rpcPublish(e2.request, e2.opts), this.logger.warn({}, `Publisher: queue->published: ${e2.request.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C3.message_ack, (e2) => {
      this.removeRequestFromQueue(e2.id.toString());
    });
  }
};
var Jn3 = Object.defineProperty;
var Xn2 = (r3, e2, t) => e2 in r3 ? Jn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var he3 = (r3, e2, t) => Xn2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Zn2 = class {
  constructor() {
    he3(this, "map", /* @__PURE__ */ new Map()), he3(this, "set", (e2, t) => {
      const i4 = this.get(e2);
      this.exists(e2, t) || this.map.set(e2, [...i4, t]);
    }), he3(this, "get", (e2) => this.map.get(e2) || []), he3(this, "exists", (e2, t) => this.get(e2).includes(t)), he3(this, "delete", (e2, t) => {
      if (typeof t > "u") {
        this.map.delete(e2);
        return;
      }
      if (!this.map.has(e2)) return;
      const i4 = this.get(e2);
      if (!this.exists(e2, t)) return;
      const s3 = i4.filter((n5) => n5 !== t);
      if (!s3.length) {
        this.map.delete(e2);
        return;
      }
      this.map.set(e2, s3);
    }), he3(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Qn3 = Object.defineProperty;
var eo3 = Object.defineProperties;
var to3 = Object.getOwnPropertyDescriptors;
var Si2 = Object.getOwnPropertySymbols;
var io3 = Object.prototype.hasOwnProperty;
var so3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r3, e2, t) => e2 in r3 ? Qn3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var fe3 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) io3.call(e2, t) && Ye3(r3, t, e2[t]);
  if (Si2) for (var t of Si2(e2)) so3.call(e2, t) && Ye3(r3, t, e2[t]);
  return r3;
};
var Je2 = (r3, e2) => eo3(r3, to3(e2));
var f5 = (r3, e2, t) => Ye3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Oi2 = class extends P {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, f5(this, "subscriptions", /* @__PURE__ */ new Map()), f5(this, "topicMap", new Zn2()), f5(this, "events", new import_events7.EventEmitter()), f5(this, "name", Mt3), f5(this, "version", Kt3), f5(this, "pending", /* @__PURE__ */ new Map()), f5(this, "cached", []), f5(this, "initialized", false), f5(this, "storagePrefix", W3), f5(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f5(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f5(this, "clientId"), f5(this, "batchSubscribeTopicsLimit", 500), f5(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f5(this, "subscribe", async (i4, s3) => {
      var n5;
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s3 } });
      try {
        const o4 = ea(s3), a3 = { topic: i4, relay: o4, transportType: s3 == null ? void 0 : s3.transportType };
        (n5 = s3 == null ? void 0 : s3.internal) != null && n5.skipSubscribe || this.pending.set(i4, a3);
        const c6 = await this.rpcSubscribe(i4, o4, s3);
        return typeof c6 == "string" && (this.onSubscribe(c6, a3), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s3 } })), c6;
      } catch (o4) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(o4), o4;
      }
    }), f5(this, "unsubscribe", async (i4, s3) => {
      this.isInitialized(), typeof (s3 == null ? void 0 : s3.id) < "u" ? await this.unsubscribeById(i4, s3.id, s3) : await this.unsubscribeByTopic(i4, s3);
    }), f5(this, "isSubscribed", (i4) => new Promise((s3) => {
      s3(this.topicMap.topics.includes(i4));
    })), f5(this, "isKnownTopic", (i4) => new Promise((s3) => {
      s3(this.topicMap.topics.includes(i4) || this.pending.has(i4) || this.cached.some((n5) => n5.topic === i4));
    })), f5(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), f5(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), f5(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), f5(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), f5(this, "start", async () => {
      await this.onConnect();
    }), f5(this, "stop", async () => {
      await this.onDisconnect();
    }), f5(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f5(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i4 = [];
      this.pending.forEach((s3) => {
        i4.push(s3);
      }), await this.batchSubscribe(i4);
    }), f5(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on(U2.created, async (i4) => {
        const s3 = U2.created;
        this.logger.info(`Emitting ${s3}`), this.logger.debug({ type: "event", event: s3, data: i4 }), await this.persist();
      }), this.events.on(U2.deleted, async (i4) => {
        const s3 = U2.deleted;
        this.logger.info(`Emitting ${s3}`), this.logger.debug({ type: "event", event: s3, data: i4 }), await this.persist();
      });
    }), this.relayer = e2, this.logger = E2(t, this.name), this.clientId = "";
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e2, t) {
    let i4 = false;
    try {
      i4 = this.getSubscription(e2).topic === t;
    } catch {
    }
    return i4;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e2, t) {
    const i4 = this.topicMap.get(e2);
    await Promise.all(i4.map(async (s3) => await this.unsubscribeById(e2, s3, t)));
  }
  async unsubscribeById(e2, t, i4) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i4 } });
    try {
      const s3 = ea(i4);
      await this.restartToComplete({ topic: e2, id: t, relay: s3 }), await this.rpcUnsubscribe(e2, t, s3);
      const n5 = Kt2("USER_DISCONNECTED", `${this.name}, ${e2}`);
      await this.onUnsubscribe(e2, t, n5), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: i4 } });
    } catch (s3) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s3), s3;
    }
  }
  async rpcSubscribe(e2, t, i4) {
    var s3, n5;
    const o4 = await this.getSubscriptionId(e2);
    if ((s3 = i4 == null ? void 0 : i4.internal) != null && s3.skipSubscribe) return o4;
    (!i4 || (i4 == null ? void 0 : i4.transportType) === ee2.relay) && await this.restartToComplete({ topic: e2, id: e2, relay: t });
    const a3 = { method: na(t.protocol).subscribe, params: { topic: e2 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: a3 });
    const c6 = (n5 = i4 == null ? void 0 : i4.internal) == null ? void 0 : n5.throwOnFailedPublish;
    try {
      if ((i4 == null ? void 0 : i4.transportType) === ee2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(a3).catch((p3) => this.logger.warn(p3));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), o4;
      const h5 = new Promise(async (p3) => {
        const y4 = (w3) => {
          w3.topic === e2 && (this.events.removeListener(U2.created, y4), p3(w3.id));
        };
        this.events.on(U2.created, y4);
        try {
          const w3 = await ni(new Promise((u2, m3) => {
            this.relayer.request(a3).catch((D3) => {
              this.logger.warn(D3, D3 == null ? void 0 : D3.message), m3(D3);
            }).then(u2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e2} failed, please try again`);
          this.events.removeListener(U2.created, y4), p3(w3);
        } catch {
        }
      }), l6 = await ni(h5, this.subscribeTimeout, `Subscribing to ${e2} failed, please try again`);
      if (!l6 && c6) throw new Error(`Subscribing to ${e2} failed, please try again`);
      return l6 ? o4 : null;
    } catch (h5) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C3.connection_stalled), c6) throw h5;
    }
    return null;
  }
  async rpcBatchSubscribe(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, i4 = { method: na(t.protocol).batchSubscribe, params: { topics: e2.map((s3) => s3.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    try {
      await await ni(new Promise((s3) => {
        this.relayer.request(i4).catch((n5) => this.logger.warn(n5)).then(s3);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, i4 = { method: na(t.protocol).batchFetchMessages, params: { topics: e2.map((n5) => n5.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    let s3;
    try {
      s3 = await await ni(new Promise((n5, o4) => {
        this.relayer.request(i4).catch((a3) => {
          this.logger.warn(a3), o4(a3);
        }).then(n5);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
    return s3;
  }
  rpcUnsubscribe(e2, t, i4) {
    const s3 = { method: na(i4.protocol).unsubscribe, params: { topic: e2, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 }), this.relayer.request(s3);
  }
  onSubscribe(e2, t) {
    this.setSubscription(e2, Je2(fe3({}, t), { id: e2 })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e2) {
    e2.length && e2.forEach((t) => {
      this.setSubscription(t.id, fe3({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e2, t, i4) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e2) && this.deleteSubscription(t, i4), await this.relayer.messages.del(e2);
  }
  async setRelayerSubscriptions(e2) {
    await this.relayer.core.storage.setItem(this.storageKey, e2);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e2, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e2, subscription: t }), this.addSubscription(e2, t);
  }
  addSubscription(e2, t) {
    this.subscriptions.set(e2, fe3({}, t)), this.topicMap.set(t.topic, e2), this.events.emit(U2.created, t);
  }
  getSubscription(e2) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e2 });
    const t = this.subscriptions.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t;
  }
  deleteSubscription(e2, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e2, reason: t });
    const i4 = this.getSubscription(e2);
    this.subscriptions.delete(e2), this.topicMap.delete(i4.topic, e2), this.events.emit(U2.deleted, Je2(fe3({}, i4), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(U2.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e2 = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i4 = 0; i4 < t; i4++) {
        const s3 = e2.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s3);
      }
    }
    this.events.emit(U2.resubscribed);
  }
  async restore() {
    try {
      const e2 = await this.getRelayerSubscriptions();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.subscriptions.size && !e2.every((t) => {
        var i4;
        return t.topic === ((i4 = this.subscriptions.get(t.id)) == null ? void 0 : i4.topic);
      })) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e2);
    }
  }
  async batchSubscribe(e2) {
    e2.length && (await this.rpcBatchSubscribe(e2), this.onBatchSubscribe(await Promise.all(e2.map(async (t) => Je2(fe3({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e2) {
    if (!e2.length) return;
    this.logger.trace(`Fetching batch messages for ${e2.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e2);
    t && t.messages && (await pi((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async restartToComplete(e2) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e2), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e2) {
    return zc(e2 + await this.getClientId());
  }
};
var ro3 = Object.defineProperty;
var Ri2 = Object.getOwnPropertySymbols;
var no3 = Object.prototype.hasOwnProperty;
var oo3 = Object.prototype.propertyIsEnumerable;
var Xe3 = (r3, e2, t) => e2 in r3 ? ro3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Ai2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) no3.call(e2, t) && Xe3(r3, t, e2[t]);
  if (Ri2) for (var t of Ri2(e2)) oo3.call(e2, t) && Xe3(r3, t, e2[t]);
  return r3;
};
var g3 = (r3, e2, t) => Xe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var xi2 = class extends d2 {
  constructor(e2) {
    super(e2), g3(this, "protocol", "wc"), g3(this, "version", 2), g3(this, "core"), g3(this, "logger"), g3(this, "events", new import_events7.EventEmitter()), g3(this, "provider"), g3(this, "messages"), g3(this, "subscriber"), g3(this, "publisher"), g3(this, "name", Lt3), g3(this, "transportExplicitlyClosed", false), g3(this, "initialized", false), g3(this, "connectionAttemptInProgress", false), g3(this, "relayUrl"), g3(this, "projectId"), g3(this, "packageName"), g3(this, "bundleId"), g3(this, "hasExperiencedNetworkDisruption", false), g3(this, "pingTimeout"), g3(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), g3(this, "reconnectTimeout"), g3(this, "connectPromise"), g3(this, "reconnectInProgress", false), g3(this, "requestsInFlight", []), g3(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), g3(this, "request", async (t) => {
      var i4, s3;
      this.logger.debug("Publishing Request Payload");
      const n5 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n5, method: t.method, topic: (i4 = t.params) == null ? void 0 : i4.topic }, "relayer.request - publishing...");
        const o4 = `${n5}:${((s3 = t.params) == null ? void 0 : s3.tag) || ""}`;
        this.requestsInFlight.push(o4);
        const a3 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c6) => c6 !== o4), a3;
      } catch (o4) {
        throw this.logger.debug(`Failed to Publish Request: ${n5}`), o4;
      }
    }), g3(this, "resetPingTimeout", () => {
      Ye2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i4, s3, n5;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n5 = (s3 = (i4 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i4.socket) == null ? void 0 : s3.terminate) == null || n5.call(s3);
        } catch (o4) {
          this.logger.warn(o4, o4 == null ? void 0 : o4.message);
        }
      }, this.heartBeatTimeout));
    }), g3(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), g3(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C3.connect);
    }), g3(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), g3(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C3.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), g3(this, "registerProviderListeners", () => {
      this.provider.on(M3.payload, this.onPayloadHandler), this.provider.on(M3.connect, this.onConnectHandler), this.provider.on(M3.disconnect, this.onDisconnectHandler), this.provider.on(M3.error, this.onProviderErrorHandler);
    }), this.core = e2.core, this.logger = typeof e2.logger < "u" && typeof e2.logger != "string" ? E2(e2.logger, this.name) : (0, import_pino2.default)(k2({ level: e2.logger || zt3 })), this.messages = new Ti2(this.logger, e2.core), this.subscriber = new Oi2(this, this.logger), this.publisher = new Yn2(this, this.logger), this.projectId = e2 == null ? void 0 : e2.projectId, this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ke3, Ms() ? this.packageName = qs() : Vs() && (this.bundleId = qs()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e2) => this.logger.warn(e2, e2 == null ? void 0 : e2.message));
  }
  get context() {
    return y2(this.logger);
  }
  get connected() {
    var e2, t, i4;
    return ((i4 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i4.readyState) === 1 || false;
  }
  get connecting() {
    var e2, t, i4;
    return ((i4 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : i4.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e2, t, i4) {
    this.isInitialized(), await this.publisher.publish(e2, t, i4), await this.recordMessageEvent({ topic: e2, message: t, publishedAt: Date.now(), transportType: ee2.relay }, ye3.outbound);
  }
  async publishCustom(e2) {
    this.isInitialized(), await this.publisher.publishCustom(e2);
  }
  async subscribe(e2, t) {
    var i4, s3, n5;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o4 = typeof ((i4 = t == null ? void 0 : t.internal) == null ? void 0 : i4.throwOnFailedPublish) > "u" ? true : (s3 = t == null ? void 0 : t.internal) == null ? void 0 : s3.throwOnFailedPublish;
    let a3 = ((n5 = this.subscriber.topicMap.get(e2)) == null ? void 0 : n5[0]) || "", c6;
    const h5 = (l6) => {
      l6.topic === e2 && (this.subscriber.off(U2.created, h5), c6());
    };
    return await Promise.all([new Promise((l6) => {
      c6 = l6, this.subscriber.on(U2.created, h5);
    }), new Promise(async (l6, p3) => {
      a3 = await this.subscriber.subscribe(e2, Ai2({ internal: { throwOnFailedPublish: o4 } }, t)).catch((y4) => {
        o4 && p3(y4);
      }) || a3, l6();
    })]), a3;
  }
  async unsubscribe(e2, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e2, t);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ni(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e2) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i4) => {
      await this.connect(e2).then(t).catch(i4).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e2) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e2 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await ja()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e2) {
    if ((e2 == null ? void 0 : e2.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e2.sort((i4, s3) => i4.publishedAt - s3.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i4 of t) try {
      await this.onMessageEvent(i4);
    } catch (s3) {
      this.logger.warn(s3, "Error while processing batch message event: " + (s3 == null ? void 0 : s3.message));
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e2, t) {
    const { topic: i4 } = e2;
    if (!t.sessionExists) {
      const s3 = ii(import_time4.FIVE_MINUTES), n5 = { topic: i4, expiry: s3, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i4, n5);
    }
    this.events.emit(C3.message, e2), await this.recordMessageEvent(e2, ye3.inbound);
  }
  async connect(e2) {
    await this.confirmOnlineStateOrThrow(), e2 && e2 !== this.relayUrl && (this.relayUrl = e2, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i4, s3) => {
          const n5 = () => {
            s3(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(M3.disconnect, n5), await ni(new Promise((o4, a3) => {
            this.provider.connect().then(o4).catch(a3);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o4) => {
            s3(o4);
          }).finally(() => {
            this.provider.off(M3.disconnect, n5), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o4, a3) => {
            const c6 = () => {
              s3(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(M3.disconnect, c6), await this.subscriber.start().then(o4).catch(a3).finally(() => {
              this.provider.off(M3.disconnect, c6);
            });
          }), this.hasExperiencedNetworkDisruption = false, i4();
        });
      } catch (i4) {
        await this.subscriber.stop();
        const s3 = i4;
        this.logger.warn({}, s3.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i4) => setTimeout(i4, (0, import_time4.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e2, t, i4, s3, n5;
    if (Ye2()) try {
      (t = (e2 = this.provider) == null ? void 0 : e2.connection) != null && t.socket && ((n5 = (s3 = (i4 = this.provider) == null ? void 0 : i4.connection) == null ? void 0 : s3.socket) == null || n5.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o4) {
      this.logger.warn(o4, o4 == null ? void 0 : o4.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e2 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o3(new f4(zs({ sdkVersion: Pe3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e2, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e2, t) {
    const { topic: i4, message: s3 } = e2;
    await this.messages.set(i4, s3, t);
  }
  async shouldIgnoreMessageEvent(e2) {
    const { topic: t, message: i4 } = e2;
    if (!i4 || i4.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i4}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s3 = this.messages.has(t, i4);
    return s3 && this.logger.warn(`Ignoring duplicate message: ${i4}`), s3;
  }
  async onProviderPayload(e2) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e2 }), isJsonRpcRequest(e2)) {
      if (!e2.method.endsWith(kt3)) return;
      const t = e2.params, { topic: i4, message: s3, publishedAt: n5, attestation: o4 } = t.data, a3 = { topic: i4, message: s3, publishedAt: n5, transportType: ee2.relay, attestation: o4 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ai2({ type: "event", event: t.id }, a3)), this.events.emit(t.id, a3), await this.acknowledgePayload(e2), await this.onMessageEvent(a3);
    } else isJsonRpcResponse(e2) && this.events.emit(C3.message_ack, e2);
  }
  async onMessageEvent(e2) {
    await this.shouldIgnoreMessageEvent(e2) || (await this.recordMessageEvent(e2, ye3.inbound), this.events.emit(C3.message, e2));
  }
  async acknowledgePayload(e2) {
    const t = formatJsonRpcResult(e2.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(M3.payload, this.onPayloadHandler), this.provider.off(M3.connect, this.onConnectHandler), this.provider.off(M3.disconnect, this.onDisconnectHandler), this.provider.off(M3.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e2 = await ja();
    ka(async (t) => {
      e2 !== t && (e2 = t, t ? await this.transportOpen().catch((i4) => this.logger.error(i4, i4 == null ? void 0 : i4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Pa()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t == null ? void 0 : t.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e2) => this.logger.error(e2, e2 == null ? void 0 : e2.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(jt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ao3(r3, e2) {
  return r3 === e2 || Number.isNaN(r3) && Number.isNaN(e2);
}
function Ni2(r3) {
  return Object.getOwnPropertySymbols(r3).filter((e2) => Object.prototype.propertyIsEnumerable.call(r3, e2));
}
function $i2(r3) {
  return r3 == null ? r3 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r3);
}
var co3 = "[object RegExp]";
var ho3 = "[object String]";
var lo3 = "[object Number]";
var uo3 = "[object Boolean]";
var zi2 = "[object Arguments]";
var go3 = "[object Symbol]";
var po3 = "[object Date]";
var yo3 = "[object Map]";
var bo3 = "[object Set]";
var mo3 = "[object Array]";
var fo3 = "[object Function]";
var Do3 = "[object ArrayBuffer]";
var Ze3 = "[object Object]";
var vo3 = "[object Error]";
var wo3 = "[object DataView]";
var _o3 = "[object Uint8Array]";
var Eo3 = "[object Uint8ClampedArray]";
var Io3 = "[object Uint16Array]";
var To3 = "[object Uint32Array]";
var Co3 = "[object BigUint64Array]";
var Po3 = "[object Int8Array]";
var So3 = "[object Int16Array]";
var Oo3 = "[object Int32Array]";
var Ro3 = "[object BigInt64Array]";
var Ao3 = "[object Float32Array]";
var xo3 = "[object Float64Array]";
function No3() {
}
function Li2(r3) {
  if (!r3 || typeof r3 != "object") return false;
  const e2 = Object.getPrototypeOf(r3);
  return e2 === null || e2 === Object.prototype || Object.getPrototypeOf(e2) === null ? Object.prototype.toString.call(r3) === "[object Object]" : false;
}
function $o3(r3, e2, t) {
  return De3(r3, e2, void 0, void 0, void 0, void 0, t);
}
function De3(r3, e2, t, i4, s3, n5, o4) {
  const a3 = o4(r3, e2, t, i4, s3, n5);
  if (a3 !== void 0) return a3;
  if (typeof r3 == typeof e2) switch (typeof r3) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r3 === e2;
    case "number":
      return r3 === e2 || Object.is(r3, e2);
    case "function":
      return r3 === e2;
    case "object":
      return ve3(r3, e2, n5, o4);
  }
  return ve3(r3, e2, n5, o4);
}
function ve3(r3, e2, t, i4) {
  if (Object.is(r3, e2)) return true;
  let s3 = $i2(r3), n5 = $i2(e2);
  if (s3 === zi2 && (s3 = Ze3), n5 === zi2 && (n5 = Ze3), s3 !== n5) return false;
  switch (s3) {
    case ho3:
      return r3.toString() === e2.toString();
    case lo3: {
      const c6 = r3.valueOf(), h5 = e2.valueOf();
      return ao3(c6, h5);
    }
    case uo3:
    case po3:
    case go3:
      return Object.is(r3.valueOf(), e2.valueOf());
    case co3:
      return r3.source === e2.source && r3.flags === e2.flags;
    case fo3:
      return r3 === e2;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o4 = t.get(r3), a3 = t.get(e2);
  if (o4 != null && a3 != null) return o4 === e2;
  t.set(r3, e2), t.set(e2, r3);
  try {
    switch (s3) {
      case yo3: {
        if (r3.size !== e2.size) return false;
        for (const [c6, h5] of r3.entries()) if (!e2.has(c6) || !De3(h5, e2.get(c6), c6, r3, e2, t, i4)) return false;
        return true;
      }
      case bo3: {
        if (r3.size !== e2.size) return false;
        const c6 = Array.from(r3.values()), h5 = Array.from(e2.values());
        for (let l6 = 0; l6 < c6.length; l6++) {
          const p3 = c6[l6], y4 = h5.findIndex((w3) => De3(p3, w3, void 0, r3, e2, t, i4));
          if (y4 === -1) return false;
          h5.splice(y4, 1);
        }
        return true;
      }
      case mo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3:
      case Oo3:
      case Ro3:
      case Ao3:
      case xo3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r3) !== Buffer.isBuffer(e2) || r3.length !== e2.length) return false;
        for (let c6 = 0; c6 < r3.length; c6++) if (!De3(r3[c6], e2[c6], c6, r3, e2, t, i4)) return false;
        return true;
      }
      case Do3:
        return r3.byteLength !== e2.byteLength ? false : ve3(new Uint8Array(r3), new Uint8Array(e2), t, i4);
      case wo3:
        return r3.byteLength !== e2.byteLength || r3.byteOffset !== e2.byteOffset ? false : ve3(new Uint8Array(r3), new Uint8Array(e2), t, i4);
      case vo3:
        return r3.name === e2.name && r3.message === e2.message;
      case Ze3: {
        if (!(ve3(r3.constructor, e2.constructor, t, i4) || Li2(r3) && Li2(e2))) return false;
        const h5 = [...Object.keys(r3), ...Ni2(r3)], l6 = [...Object.keys(e2), ...Ni2(e2)];
        if (h5.length !== l6.length) return false;
        for (let p3 = 0; p3 < h5.length; p3++) {
          const y4 = h5[p3], w3 = r3[y4];
          if (!Object.hasOwn(e2, y4)) return false;
          const u2 = e2[y4];
          if (!De3(w3, u2, y4, r3, e2, t, i4)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r3), t.delete(e2);
  }
}
function zo3(r3, e2) {
  return $o3(r3, e2, No3);
}
var Lo3 = Object.defineProperty;
var ki2 = Object.getOwnPropertySymbols;
var ko3 = Object.prototype.hasOwnProperty;
var jo3 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r3, e2, t) => e2 in r3 ? Lo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var ji2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) ko3.call(e2, t) && Qe3(r3, t, e2[t]);
  if (ki2) for (var t of ki2(e2)) jo3.call(e2, t) && Qe3(r3, t, e2[t]);
  return r3;
};
var F2 = (r3, e2, t) => Qe3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ui2 = class extends f2 {
  constructor(e2, t, i4, s3 = W3, n5 = void 0) {
    super(e2, t, i4, s3), this.core = e2, this.logger = t, this.name = i4, F2(this, "map", /* @__PURE__ */ new Map()), F2(this, "version", Ut3), F2(this, "cached", []), F2(this, "initialized", false), F2(this, "getKey"), F2(this, "storagePrefix", W3), F2(this, "recentlyDeleted", []), F2(this, "recentlyDeletedLimit", 200), F2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o4) => {
        this.getKey && o4 !== null && !kt2(o4) ? this.map.set(this.getKey(o4), o4) : wa(o4) ? this.map.set(o4.id, o4) : xa(o4) && this.map.set(o4.topic, o4);
      }), this.cached = [], this.initialized = true);
    }), F2(this, "set", async (o4, a3) => {
      this.isInitialized(), this.map.has(o4) ? await this.update(o4, a3) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o4, value: a3 }), this.map.set(o4, a3), await this.persist());
    }), F2(this, "get", (o4) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o4 }), this.getData(o4))), F2(this, "getAll", (o4) => (this.isInitialized(), o4 ? this.values.filter((a3) => Object.keys(o4).every((c6) => zo3(a3[c6], o4[c6]))) : this.values)), F2(this, "update", async (o4, a3) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o4, update: a3 });
      const c6 = ji2(ji2({}, this.getData(o4)), a3);
      this.map.set(o4, c6), await this.persist();
    }), F2(this, "delete", async (o4, a3) => {
      this.isInitialized(), this.map.has(o4) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o4, reason: a3 }), this.map.delete(o4), this.addToRecentlyDeleted(o4), await this.persist());
    }), this.logger = E2(t, this.name), this.storagePrefix = s3, this.getKey = n5;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e2) {
    this.recentlyDeleted.push(e2), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e2) {
    const t = this.map.get(e2);
    if (!t) {
      if (this.recentlyDeleted.includes(e2)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e2}`);
        throw this.logger.error(s3), new Error(s3);
      }
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.error(i4), new Error(i4);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e2 = await this.getDataStore();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.map.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Uo3 = Object.defineProperty;
var Fo3 = (r3, e2, t) => e2 in r3 ? Uo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var d4 = (r3, e2, t) => Fo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Fi2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, d4(this, "name", Bt3), d4(this, "version", Vt3), d4(this, "events", new import_events7.default()), d4(this, "pairings"), d4(this, "initialized", false), d4(this, "storagePrefix", W3), d4(this, "ignoredPayloadTypes", [ee]), d4(this, "registeredMethods", []), d4(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d4(this, "register", ({ methods: i4 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i4])];
    }), d4(this, "create", async (i4) => {
      this.isInitialized();
      const s3 = qc(), n5 = await this.core.crypto.setSymKey(s3), o4 = ii(import_time4.FIVE_MINUTES), a3 = { protocol: $t3 }, c6 = { topic: n5, expiry: o4, relay: a3, active: false, methods: i4 == null ? void 0 : i4.methods }, h5 = oa({ protocol: this.core.protocol, version: this.core.version, topic: n5, symKey: s3, relay: a3, expiryTimestamp: o4, methods: i4 == null ? void 0 : i4.methods });
      return this.events.emit(ae2.create, c6), this.core.expirer.set(n5, o4), await this.pairings.set(n5, c6), await this.core.relayer.subscribe(n5, { transportType: i4 == null ? void 0 : i4.transportType, internal: i4 == null ? void 0 : i4.internal }), { topic: n5, uri: h5 };
    }), d4(this, "pair", async (i4) => {
      this.isInitialized();
      const s3 = this.core.eventClient.createEvent({ properties: { topic: i4 == null ? void 0 : i4.uri, trace: [Y2.pairing_started] } });
      this.isValidPair(i4, s3);
      const { topic: n5, symKey: o4, relay: a3, expiryTimestamp: c6, methods: h5 } = ra(i4.uri);
      s3.props.properties.topic = n5, s3.addTrace(Y2.pairing_uri_validation_success), s3.addTrace(Y2.pairing_uri_not_expired);
      let l6;
      if (this.pairings.keys.includes(n5)) {
        if (l6 = this.pairings.get(n5), s3.addTrace(Y2.existing_pairing), l6.active) throw s3.setError(X2.active_pairing_already_exists), new Error(`Pairing already exists: ${n5}. Please try again with a new connection URI.`);
        s3.addTrace(Y2.pairing_not_expired);
      }
      const p3 = c6 || ii(import_time4.FIVE_MINUTES), y4 = { topic: n5, relay: a3, expiry: p3, active: false, methods: h5 };
      this.core.expirer.set(n5, p3), await this.pairings.set(n5, y4), s3.addTrace(Y2.store_new_pairing), i4.activatePairing && await this.activate({ topic: n5 }), this.events.emit(ae2.create, y4), s3.addTrace(Y2.emit_inactive_pairing), this.core.crypto.keychain.has(n5) || await this.core.crypto.setSymKey(o4, n5), s3.addTrace(Y2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s3.setError(X2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n5, { relay: a3 });
      } catch (w3) {
        throw s3.setError(X2.subscribe_pairing_topic_failure), w3;
      }
      return s3.addTrace(Y2.subscribe_pairing_topic_success), y4;
    }), d4(this, "activate", async ({ topic: i4 }) => {
      this.isInitialized();
      const s3 = ii(import_time4.FIVE_MINUTES);
      this.core.expirer.set(i4, s3), await this.pairings.update(i4, { active: true, expiry: s3 });
    }), d4(this, "ping", async (i4) => {
      this.isInitialized(), await this.isValidPing(i4), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s3 } = i4;
      if (this.pairings.keys.includes(s3)) {
        const n5 = await this.sendRequest(s3, "wc_pairingPing", {}), { done: o4, resolve: a3, reject: c6 } = ei();
        this.events.once(ci("pairing_ping", n5), ({ error: h5 }) => {
          h5 ? c6(h5) : a3();
        }), await o4();
      }
    }), d4(this, "updateExpiry", async ({ topic: i4, expiry: s3 }) => {
      this.isInitialized(), await this.pairings.update(i4, { expiry: s3 });
    }), d4(this, "updateMetadata", async ({ topic: i4, metadata: s3 }) => {
      this.isInitialized(), await this.pairings.update(i4, { peerMetadata: s3 });
    }), d4(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d4(this, "disconnect", async (i4) => {
      this.isInitialized(), await this.isValidDisconnect(i4);
      const { topic: s3 } = i4;
      this.pairings.keys.includes(s3) && (await this.sendRequest(s3, "wc_pairingDelete", Kt2("USER_DISCONNECTED")), await this.deletePairing(s3));
    }), d4(this, "formatUriFromPairing", (i4) => {
      this.isInitialized();
      const { topic: s3, relay: n5, expiry: o4, methods: a3 } = i4, c6 = this.core.crypto.keychain.get(s3);
      return oa({ protocol: this.core.protocol, version: this.core.version, topic: s3, symKey: c6, relay: n5, expiryTimestamp: o4, methods: a3 });
    }), d4(this, "sendRequest", async (i4, s3, n5) => {
      const o4 = formatJsonRpcRequest(s3, n5), a3 = await this.core.crypto.encode(i4, o4), c6 = oe[s3].req;
      return this.core.history.set(i4, o4), this.core.relayer.publish(i4, a3, c6), o4.id;
    }), d4(this, "sendResult", async (i4, s3, n5) => {
      const o4 = formatJsonRpcResult(i4, n5), a3 = await this.core.crypto.encode(s3, o4), c6 = (await this.core.history.get(s3, i4)).request.method, h5 = oe[c6].res;
      await this.core.relayer.publish(s3, a3, h5), await this.core.history.resolve(o4);
    }), d4(this, "sendError", async (i4, s3, n5) => {
      const o4 = formatJsonRpcError(i4, n5), a3 = await this.core.crypto.encode(s3, o4), c6 = (await this.core.history.get(s3, i4)).request.method, h5 = oe[c6] ? oe[c6].res : oe.unregistered_method.res;
      await this.core.relayer.publish(s3, a3, h5), await this.core.history.resolve(o4);
    }), d4(this, "deletePairing", async (i4, s3) => {
      await this.core.relayer.unsubscribe(i4), await Promise.all([this.pairings.delete(i4, Kt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i4), s3 ? Promise.resolve() : this.core.expirer.del(i4)]);
    }), d4(this, "cleanup", async () => {
      const i4 = this.pairings.getAll().filter((s3) => fi(s3.expiry));
      await Promise.all(i4.map((s3) => this.deletePairing(s3.topic)));
    }), d4(this, "onRelayEventRequest", async (i4) => {
      const { topic: s3, payload: n5 } = i4;
      switch (n5.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s3, n5);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s3, n5);
        default:
          return await this.onUnknownRpcMethodRequest(s3, n5);
      }
    }), d4(this, "onRelayEventResponse", async (i4) => {
      const { topic: s3, payload: n5 } = i4, o4 = (await this.core.history.get(s3, n5.id)).request.method;
      switch (o4) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s3, n5);
        default:
          return this.onUnknownRpcMethodResponse(o4);
      }
    }), d4(this, "onPairingPingRequest", async (i4, s3) => {
      const { id: n5 } = s3;
      try {
        this.isValidPing({ topic: i4 }), await this.sendResult(n5, i4, true), this.events.emit(ae2.ping, { id: n5, topic: i4 });
      } catch (o4) {
        await this.sendError(n5, i4, o4), this.logger.error(o4);
      }
    }), d4(this, "onPairingPingResponse", (i4, s3) => {
      const { id: n5 } = s3;
      setTimeout(() => {
        isJsonRpcResult(s3) ? this.events.emit(ci("pairing_ping", n5), {}) : isJsonRpcError(s3) && this.events.emit(ci("pairing_ping", n5), { error: s3.error });
      }, 500);
    }), d4(this, "onPairingDeleteRequest", async (i4, s3) => {
      const { id: n5 } = s3;
      try {
        this.isValidDisconnect({ topic: i4 }), await this.deletePairing(i4), this.events.emit(ae2.delete, { id: n5, topic: i4 });
      } catch (o4) {
        await this.sendError(n5, i4, o4), this.logger.error(o4);
      }
    }), d4(this, "onUnknownRpcMethodRequest", async (i4, s3) => {
      const { id: n5, method: o4 } = s3;
      try {
        if (this.registeredMethods.includes(o4)) return;
        const a3 = Kt2("WC_METHOD_UNSUPPORTED", o4);
        await this.sendError(n5, i4, a3), this.logger.error(a3);
      } catch (a3) {
        await this.sendError(n5, i4, a3), this.logger.error(a3);
      }
    }), d4(this, "onUnknownRpcMethodResponse", (i4) => {
      this.registeredMethods.includes(i4) || this.logger.error(Kt2("WC_METHOD_UNSUPPORTED", i4));
    }), d4(this, "isValidPair", (i4, s3) => {
      var n5;
      if (!Aa(i4)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `pair() params: ${i4}`);
        throw s3.setError(X2.malformed_pairing_uri), new Error(a3);
      }
      if (!ma(i4.uri)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `pair() uri: ${i4.uri}`);
        throw s3.setError(X2.malformed_pairing_uri), new Error(a3);
      }
      const o4 = ra(i4 == null ? void 0 : i4.uri);
      if (!((n5 = o4 == null ? void 0 : o4.relay) != null && n5.protocol)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s3.setError(X2.malformed_pairing_uri), new Error(a3);
      }
      if (!(o4 != null && o4.symKey)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s3.setError(X2.malformed_pairing_uri), new Error(a3);
      }
      if (o4 != null && o4.expiryTimestamp && (0, import_time4.toMiliseconds)(o4 == null ? void 0 : o4.expiryTimestamp) < Date.now()) {
        s3.setError(X2.pairing_expired);
        const { message: a3 } = Et2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a3);
      }
    }), d4(this, "isValidPing", async (i4) => {
      if (!Aa(i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `ping() params: ${i4}`);
        throw new Error(n5);
      }
      const { topic: s3 } = i4;
      await this.isValidPairingTopic(s3);
    }), d4(this, "isValidDisconnect", async (i4) => {
      if (!Aa(i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${i4}`);
        throw new Error(n5);
      }
      const { topic: s3 } = i4;
      await this.isValidPairingTopic(s3);
    }), d4(this, "isValidPairingTopic", async (i4) => {
      if (!it2(i4, false)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${i4}`);
        throw new Error(s3);
      }
      if (!this.pairings.keys.includes(i4)) {
        const { message: s3 } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i4}`);
        throw new Error(s3);
      }
      if (fi(this.pairings.get(i4).expiry)) {
        await this.deletePairing(i4);
        const { message: s3 } = Et2("EXPIRED", `pairing topic: ${i4}`);
        throw new Error(s3);
      }
    }), this.core = e2, this.logger = E2(t, this.name), this.pairings = new Ui2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y2(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C3.message, async (e2) => {
      const { topic: t, message: i4, transportType: s3 } = e2;
      if (this.pairings.keys.includes(t) && s3 !== ee2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i4))) try {
        const n5 = await this.core.crypto.decode(t, i4);
        isJsonRpcRequest(n5) ? (this.core.history.set(t, n5), await this.onRelayEventRequest({ topic: t, payload: n5 })) : isJsonRpcResponse(n5) && (await this.core.history.resolve(n5), await this.onRelayEventResponse({ topic: t, payload: n5 }), this.core.history.delete(t, n5.id)), await this.core.relayer.messages.ack(t, i4);
      } catch (n5) {
        this.logger.error(n5);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(q.expired, async (e2) => {
      const { topic: t } = si(e2.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(ae2.expire, { topic: t }));
    });
  }
};
var Mo3 = Object.defineProperty;
var Ko3 = (r3, e2, t) => e2 in r3 ? Mo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var N11 = (r3, e2, t) => Ko3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Mi2 = class extends I2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, N11(this, "records", /* @__PURE__ */ new Map()), N11(this, "events", new import_events7.EventEmitter()), N11(this, "name", qt3), N11(this, "version", Gt3), N11(this, "cached", []), N11(this, "initialized", false), N11(this, "storagePrefix", W3), N11(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.records.set(i4.id, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), N11(this, "set", (i4, s3, n5) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i4, request: s3, chainId: n5 }), this.records.has(s3.id)) return;
      const o4 = { id: s3.id, topic: i4, request: { method: s3.method, params: s3.params || null }, chainId: n5, expiry: ii(import_time4.THIRTY_DAYS) };
      this.records.set(o4.id, o4), this.persist(), this.events.emit(V2.created, o4);
    }), N11(this, "resolve", async (i4) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i4 }), !this.records.has(i4.id)) return;
      const s3 = await this.getRecord(i4.id);
      typeof s3.response > "u" && (s3.response = isJsonRpcError(i4) ? { error: i4.error } : { result: i4.result }, this.records.set(s3.id, s3), this.persist(), this.events.emit(V2.updated, s3));
    }), N11(this, "get", async (i4, s3) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i4, id: s3 }), await this.getRecord(s3))), N11(this, "delete", (i4, s3) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s3 }), this.values.forEach((n5) => {
        if (n5.topic === i4) {
          if (typeof s3 < "u" && n5.id !== s3) return;
          this.records.delete(n5.id), this.events.emit(V2.deleted, n5);
        }
      }), this.persist();
    }), N11(this, "exists", async (i4, s3) => (this.isInitialized(), this.records.has(s3) ? (await this.getRecord(s3)).topic === i4 : false)), N11(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), N11(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), N11(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), N11(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e2 = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i4 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e2.push(i4);
    }), e2;
  }
  async setJsonRpcRecords(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e2) {
    this.isInitialized();
    const t = this.records.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(V2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getJsonRpcRecords();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.records.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e2);
    }
  }
  registerEventListeners() {
    this.events.on(V2.created, (e2) => {
      const t = V2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(V2.updated, (e2) => {
      const t = V2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(V2.deleted, (e2) => {
      const t = V2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e2 = false;
      this.records.forEach((t) => {
        (0, import_time4.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(V2.deleted, t, false), e2 = true);
      }), e2 && this.persist();
    } catch (e2) {
      this.logger.warn(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Bo3 = Object.defineProperty;
var Vo3 = (r3, e2, t) => e2 in r3 ? Bo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var z3 = (r3, e2, t) => Vo3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ki2 = class extends S2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, z3(this, "expirations", /* @__PURE__ */ new Map()), z3(this, "events", new import_events7.EventEmitter()), z3(this, "name", Wt3), z3(this, "version", Ht3), z3(this, "cached", []), z3(this, "initialized", false), z3(this, "storagePrefix", W3), z3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.expirations.set(i4.target, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), z3(this, "has", (i4) => {
      try {
        const s3 = this.formatTarget(i4);
        return typeof this.getExpiration(s3) < "u";
      } catch {
        return false;
      }
    }), z3(this, "set", (i4, s3) => {
      this.isInitialized();
      const n5 = this.formatTarget(i4), o4 = { target: n5, expiry: s3 };
      this.expirations.set(n5, o4), this.checkExpiry(n5, o4), this.events.emit(q.created, { target: n5, expiration: o4 });
    }), z3(this, "get", (i4) => {
      this.isInitialized();
      const s3 = this.formatTarget(i4);
      return this.getExpiration(s3);
    }), z3(this, "del", (i4) => {
      if (this.isInitialized(), this.has(i4)) {
        const s3 = this.formatTarget(i4), n5 = this.getExpiration(s3);
        this.expirations.delete(s3), this.events.emit(q.deleted, { target: s3, expiration: n5 });
      }
    }), z3(this, "on", (i4, s3) => {
      this.events.on(i4, s3);
    }), z3(this, "once", (i4, s3) => {
      this.events.once(i4, s3);
    }), z3(this, "off", (i4, s3) => {
      this.events.off(i4, s3);
    }), z3(this, "removeListener", (i4, s3) => {
      this.events.removeListener(i4, s3);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e2) {
    if (typeof e2 == "string") return ri(e2);
    if (typeof e2 == "number") return oi(e2);
    const { message: t } = Et2("UNKNOWN_TYPE", `Target type: ${typeof e2}`);
    throw new Error(t);
  }
  async setExpirations(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(q.sync);
  }
  async restore() {
    try {
      const e2 = await this.getExpirations();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.expirations.size) {
        const { message: t } = Et2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e2);
    }
  }
  getExpiration(e2) {
    const t = this.expirations.get(e2);
    if (!t) {
      const { message: i4 } = Et2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.warn(i4), new Error(i4);
    }
    return t;
  }
  checkExpiry(e2, t) {
    const { expiry: i4 } = t;
    (0, import_time4.toMiliseconds)(i4) - Date.now() <= 0 && this.expire(e2, t);
  }
  expire(e2, t) {
    this.expirations.delete(e2), this.events.emit(q.expired, { target: e2, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e2, t) => this.checkExpiry(t, e2));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(q.created, (e2) => {
      const t = q.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(q.expired, (e2) => {
      const t = q.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(q.deleted, (e2) => {
      const t = q.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var qo3 = Object.defineProperty;
var Go3 = (r3, e2, t) => e2 in r3 ? qo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var P3 = (r3, e2, t) => Go3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Bi2 = class extends M {
  constructor(e2, t, i4) {
    super(e2, t, i4), this.core = e2, this.logger = t, this.store = i4, P3(this, "name", Yt3), P3(this, "abortController"), P3(this, "isDevEnv"), P3(this, "verifyUrlV3", Xt3), P3(this, "storagePrefix", W3), P3(this, "version", Fe2), P3(this, "publicKey"), P3(this, "fetchPromise"), P3(this, "init", async () => {
      var s3;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((s3 = this.publicKey) == null ? void 0 : s3.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), P3(this, "register", async (s3) => {
      if (!zt2() || this.isDevEnv) return;
      const n5 = window.location.origin, { id: o4, decryptedId: a3 } = s3, c6 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n5}&id=${o4}&decryptedId=${a3}`;
      try {
        const h5 = (0, import_window_getters2.getDocument)(), l6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), p3 = await new Promise((y4, w3) => {
          const u2 = () => {
            window.removeEventListener("message", D3), h5.body.removeChild(m3), w3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u2);
          const m3 = h5.createElement("iframe");
          m3.src = c6, m3.style.display = "none", m3.addEventListener("error", u2, { signal: this.abortController.signal });
          const D3 = (_3) => {
            if (_3.data && typeof _3.data == "string") try {
              const E3 = JSON.parse(_3.data);
              if (E3.type === "verify_attestation") {
                if (sn(E3.attestation).payload.id !== o4) return;
                clearInterval(l6), h5.body.removeChild(m3), this.abortController.signal.removeEventListener("abort", u2), window.removeEventListener("message", D3), y4(E3.attestation === null ? "" : E3.attestation);
              }
            } catch (E3) {
              this.logger.warn(E3);
            }
          };
          h5.body.appendChild(m3), window.addEventListener("message", D3, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", p3), p3;
      } catch (h5) {
        this.logger.warn(h5);
      }
      return "";
    }), P3(this, "resolve", async (s3) => {
      if (this.isDevEnv) return "";
      const { attestationId: n5, hash: o4, encryptedId: a3 } = s3;
      if (n5 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n5) {
        if (sn(n5).payload.id !== a3) return;
        const h5 = await this.isValidJwtAttestation(n5);
        if (h5) {
          if (!h5.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h5;
        }
      }
      if (!o4) return;
      const c6 = this.getVerifyUrl(s3 == null ? void 0 : s3.verifyUrl);
      return this.fetchAttestation(o4, c6);
    }), P3(this, "fetchAttestation", async (s3, n5) => {
      this.logger.debug(`resolving attestation: ${s3} from url: ${n5}`);
      const o4 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a3 = await fetch(`${n5}/attestation/${s3}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o4), a3.status === 200 ? await a3.json() : void 0;
    }), P3(this, "getVerifyUrl", (s3) => {
      let n5 = s3 || be3;
      return Zt3.includes(n5) || (this.logger.info(`verify url: ${n5}, not included in trusted list, assigning default: ${be3}`), n5 = be3), n5;
    }), P3(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s3 = this.startAbortTimer(import_time4.FIVE_SECONDS), n5 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s3), await n5.json();
      } catch (s3) {
        this.logger.warn(s3);
      }
    }), P3(this, "persistPublicKey", async (s3) => {
      this.logger.debug("persisting public key to local storage", s3), await this.store.setItem(this.storeKey, s3), this.publicKey = s3;
    }), P3(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), P3(this, "isValidJwtAttestation", async (s3) => {
      const n5 = await this.getPublicKey();
      try {
        if (n5) return this.validateAttestation(s3, n5);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
      const o4 = await this.fetchAndPersistPublicKey();
      try {
        if (o4) return this.validateAttestation(s3, o4);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
    }), P3(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), P3(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n5) => {
        const o4 = await this.fetchPublicKey();
        o4 && (await this.persistPublicKey(o4), n5(o4));
      });
      const s3 = await this.fetchPromise;
      return this.fetchPromise = void 0, s3;
    }), P3(this, "validateAttestation", (s3, n5) => {
      const o4 = ta(s3, n5.publicKey), a3 = { hasExpired: (0, import_time4.toMiliseconds)(o4.exp) < Date.now(), payload: o4 };
      if (a3.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a3.payload.origin, isScam: a3.payload.isScam, isVerified: a3.payload.isVerified };
    }), this.logger = E2(t, this.name), this.abortController = new AbortController(), this.isDevEnv = hi(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y2(this.logger);
  }
  startAbortTimer(e2) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e2));
  }
};
var Wo3 = Object.defineProperty;
var Ho3 = (r3, e2, t) => e2 in r3 ? Wo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Vi2 = (r3, e2, t) => Ho3(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var qi2 = class extends O3 {
  constructor(e2, t) {
    super(e2, t), this.projectId = e2, this.logger = t, Vi2(this, "context", Qt3), Vi2(this, "registerDeviceToken", async (i4) => {
      const { clientId: s3, token: n5, notificationType: o4, enableEncrypted: a3 = false } = i4, c6 = `${ei2}/${this.projectId}/clients`;
      await fetch(c6, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s3, type: o4, token: n5, always_raw: a3 }) });
    }), this.logger = E2(t, this.context);
  }
};
var Yo3 = Object.defineProperty;
var Gi2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var et = (r3, e2, t) => e2 in r3 ? Yo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var we3 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Jo3.call(e2, t) && et(r3, t, e2[t]);
  if (Gi2) for (var t of Gi2(e2)) Xo2.call(e2, t) && et(r3, t, e2[t]);
  return r3;
};
var R2 = (r3, e2, t) => et(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Wi2 = class extends R {
  constructor(e2, t, i4 = true) {
    super(e2, t, i4), this.core = e2, this.logger = t, R2(this, "context", ii2), R2(this, "storagePrefix", W3), R2(this, "storageVersion", ti), R2(this, "events", /* @__PURE__ */ new Map()), R2(this, "shouldPersist", false), R2(this, "init", async () => {
      if (!hi()) try {
        const s3 = { eventId: di(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: cr2(this.core.relayer.protocol, this.core.relayer.version, Pe3) } } };
        await this.sendEvent([s3]);
      } catch (s3) {
        this.logger.warn(s3);
      }
    }), R2(this, "createEvent", (s3) => {
      const { event: n5 = "ERROR", type: o4 = "", properties: { topic: a3, trace: c6 } } = s3, h5 = di(), l6 = this.core.projectId || "", p3 = Date.now(), y4 = we3({ eventId: h5, timestamp: p3, props: { event: n5, type: o4, properties: { topic: a3, trace: c6 } }, bundleId: l6, domain: this.getAppDomain() }, this.setMethods(h5));
      return this.telemetryEnabled && (this.events.set(h5, y4), this.shouldPersist = true), y4;
    }), R2(this, "getEvent", (s3) => {
      const { eventId: n5, topic: o4 } = s3;
      if (n5) return this.events.get(n5);
      const a3 = Array.from(this.events.values()).find((c6) => c6.props.properties.topic === o4);
      if (a3) return we3(we3({}, a3), this.setMethods(a3.eventId));
    }), R2(this, "deleteEvent", (s3) => {
      const { eventId: n5 } = s3;
      this.events.delete(n5), this.shouldPersist = true;
    }), R2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s3) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(s3.timestamp) > si2 && (this.events.delete(s3.eventId), this.shouldPersist = true);
        });
      });
    }), R2(this, "setMethods", (s3) => ({ addTrace: (n5) => this.addTrace(s3, n5), setError: (n5) => this.setError(s3, n5) })), R2(this, "addTrace", (s3, n5) => {
      const o4 = this.events.get(s3);
      o4 && (o4.props.properties.trace.push(n5), this.events.set(s3, o4), this.shouldPersist = true);
    }), R2(this, "setError", (s3, n5) => {
      const o4 = this.events.get(s3);
      o4 && (o4.props.type = n5, o4.timestamp = Date.now(), this.events.set(s3, o4), this.shouldPersist = true);
    }), R2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), R2(this, "restore", async () => {
      try {
        const s3 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s3.length) return;
        s3.forEach((n5) => {
          this.events.set(n5.eventId, we3(we3({}, n5), this.setMethods(n5.eventId)));
        });
      } catch (s3) {
        this.logger.warn(s3);
      }
    }), R2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s3 = [];
      for (const [n5, o4] of this.events) o4.props.type && s3.push(o4);
      if (s3.length !== 0) try {
        if ((await this.sendEvent(s3)).ok) for (const n5 of s3) this.events.delete(n5.eventId), this.shouldPersist = true;
      } catch (n5) {
        this.logger.warn(n5);
      }
    }), R2(this, "sendEvent", async (s3) => {
      const n5 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ri2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Pe3}${n5}`, { method: "POST", body: JSON.stringify(s3) });
    }), R2(this, "getAppDomain", () => sr2().url), this.logger = E2(t, this.context), this.telemetryEnabled = i4, i4 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Zo3 = Object.defineProperty;
var Hi2 = Object.getOwnPropertySymbols;
var Qo3 = Object.prototype.hasOwnProperty;
var ea2 = Object.prototype.propertyIsEnumerable;
var tt2 = (r3, e2, t) => e2 in r3 ? Zo3(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var Yi2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) Qo3.call(e2, t) && tt2(r3, t, e2[t]);
  if (Hi2) for (var t of Hi2(e2)) ea2.call(e2, t) && tt2(r3, t, e2[t]);
  return r3;
};
var v4 = (r3, e2, t) => tt2(r3, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Oe3 = class _Oe extends h3 {
  constructor(e2) {
    var t;
    super(e2), v4(this, "protocol", Ue3), v4(this, "version", Fe2), v4(this, "name", pe3), v4(this, "relayUrl"), v4(this, "projectId"), v4(this, "customStoragePrefix"), v4(this, "events", new import_events7.EventEmitter()), v4(this, "logger"), v4(this, "heartbeat"), v4(this, "relayer"), v4(this, "crypto"), v4(this, "storage"), v4(this, "history"), v4(this, "expirer"), v4(this, "pairing"), v4(this, "verify"), v4(this, "echoClient"), v4(this, "linkModeSupportedApps"), v4(this, "eventClient"), v4(this, "initialized", false), v4(this, "logChunkController"), v4(this, "on", (a3, c6) => this.events.on(a3, c6)), v4(this, "once", (a3, c6) => this.events.once(a3, c6)), v4(this, "off", (a3, c6) => this.events.off(a3, c6)), v4(this, "removeListener", (a3, c6) => this.events.removeListener(a3, c6)), v4(this, "dispatchEnvelope", ({ topic: a3, message: c6, sessionExists: h5 }) => {
      if (!a3 || !c6) return;
      const l6 = { topic: a3, message: c6, publishedAt: Date.now(), transportType: ee2.link_mode };
      this.relayer.onLinkMessageEvent(l6, { sessionExists: h5 });
    });
    const i4 = this.getGlobalCore(e2 == null ? void 0 : e2.customStoragePrefix);
    if (i4) try {
      return this.customStoragePrefix = i4.customStoragePrefix, this.logger = i4.logger, this.heartbeat = i4.heartbeat, this.crypto = i4.crypto, this.history = i4.history, this.expirer = i4.expirer, this.storage = i4.storage, this.relayer = i4.relayer, this.pairing = i4.pairing, this.verify = i4.verify, this.echoClient = i4.echoClient, this.linkModeSupportedApps = i4.linkModeSupportedApps, this.eventClient = i4.eventClient, this.initialized = i4.initialized, this.logChunkController = i4.logChunkController, i4;
    } catch (a3) {
      console.warn("Failed to copy global core", a3);
    }
    this.projectId = e2 == null ? void 0 : e2.projectId, this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ke3, this.customStoragePrefix = e2 != null && e2.customStoragePrefix ? `:${e2.customStoragePrefix}` : "";
    const s3 = k2({ level: typeof (e2 == null ? void 0 : e2.logger) == "string" && e2.logger ? e2.logger : It3.logger, name: pe3 }), { logger: n5, chunkLoggerController: o4 } = A({ opts: s3, maxSizeInBytes: e2 == null ? void 0 : e2.maxLogBlobSizeInBytes, loggerOverride: e2 == null ? void 0 : e2.logger });
    this.logChunkController = o4, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a3, c6;
      (a3 = this.logChunkController) != null && a3.downloadLogsBlobInBrowser && ((c6 = this.logChunkController) == null || c6.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(n5, this.name), this.heartbeat = new i(), this.crypto = new Ei2(this, this.logger, e2 == null ? void 0 : e2.keychain), this.history = new Mi2(this, this.logger), this.expirer = new Ki2(this, this.logger), this.storage = e2 != null && e2.storage ? e2.storage : new h(Yi2(Yi2({}, Tt3), e2 == null ? void 0 : e2.storageOptions)), this.relayer = new xi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Fi2(this, this.logger), this.verify = new Bi2(this, this.logger, this.storage), this.echoClient = new qi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Wi2(this, this.logger, e2 == null ? void 0 : e2.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e2) {
    const t = new _Oe(e2);
    await t.initialize();
    const i4 = await t.crypto.getClientId();
    return await t.storage.setItem(Ft2, i4), t;
  }
  get context() {
    return y2(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e2;
    return (e2 = this.logChunkController) == null ? void 0 : e2.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e2) {
    this.linkModeSupportedApps.includes(e2) || (this.linkModeSupportedApps.push(e2), await this.storage.setItem(Be3, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Be3) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e2) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e2), this.logger.error(e2.message), e2;
    }
  }
  getGlobalCore(e2 = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e2}`, i4 = `${t}_count`;
      return globalThis[i4] = (globalThis[i4] || 0) + 1, globalThis[i4] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i4]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e2) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i4 = `_walletConnectCore_${((t = e2.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i4] = e2;
    } catch (i4) {
      console.warn("Failed to set global WalletConnect core", i4);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var ta2 = Oe3;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events8 = __toESM(require_events());
var import_time5 = __toESM(require_cjs());
var Ce3 = "wc";
var ke3 = 2;
var De4 = "client";
var we4 = `${Ce3}@${ke3}:${De4}:`;
var me4 = { name: De4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Rs = { session_proposal: "session_proposal", session_update: "session_update", session_extend: "session_extend", session_ping: "session_ping", session_delete: "session_delete", session_expire: "session_expire", session_request: "session_request", session_request_sent: "session_request_sent", session_event: "session_event", proposal_expire: "proposal_expire", session_authenticate: "session_authenticate", session_request_expire: "session_request_expire", session_connect: "session_connect" };
var vs = { database: ":memory:" };
var Le3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var Is = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Ts = "history";
var qs2 = "0.3";
var dt3 = "proposal";
var Ps2 = import_time5.THIRTY_DAYS;
var Me4 = "Proposal expired";
var ut3 = "session";
var B2 = import_time5.SEVEN_DAYS;
var gt3 = "engine";
var P4 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var M4 = { idle: "IDLE", active: "ACTIVE" };
var yt2 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var wt3 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t3 = "wc";
var Ns2 = 1.5;
var ft2 = "auth";
var Et3 = "authKeys";
var St4 = "pairingTopics";
var Rt4 = "requests";
var le4 = `${_t3}@${1.5}:${ft2}:`;
var pe4 = `${le4}:PUB_KEY`;
var Os = Object.defineProperty;
var bs2 = Object.defineProperties;
var As = Object.getOwnPropertyDescriptors;
var vt3 = Object.getOwnPropertySymbols;
var xs2 = Object.prototype.hasOwnProperty;
var Vs2 = Object.prototype.propertyIsEnumerable;
var $e3 = (E3, o4, t) => o4 in E3 ? Os(E3, o4, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o4] = t;
var R3 = (E3, o4) => {
  for (var t in o4 || (o4 = {})) xs2.call(o4, t) && $e3(E3, t, o4[t]);
  if (vt3) for (var t of vt3(o4)) Vs2.call(o4, t) && $e3(E3, t, o4[t]);
  return E3;
};
var O4 = (E3, o4) => bs2(E3, As(o4));
var c5 = (E3, o4, t) => $e3(E3, typeof o4 != "symbol" ? o4 + "" : o4, t);
var Cs2 = class extends V {
  constructor(o4) {
    super(o4), c5(this, "name", gt3), c5(this, "events", new import_events8.default()), c5(this, "initialized", false), c5(this, "requestQueue", { state: M4.idle, queue: [] }), c5(this, "sessionRequestQueue", { state: M4.idle, queue: [] }), c5(this, "emittedSessionRequests", new gi({ limit: 500 })), c5(this, "requestQueueDelay", import_time5.ONE_SECOND), c5(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedLimit", 200), c5(this, "relayMessageCache", []), c5(this, "pendingSessions", /* @__PURE__ */ new Map()), c5(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(P4) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c5(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e2 = O4(R3({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e2), e2.optionalNamespaces = ba(e2.requiredNamespaces, e2.optionalNamespaces), e2.requiredNamespaces = {};
      const { pairingTopic: s3, requiredNamespaces: i4, optionalNamespaces: r3, sessionProperties: n5, scopedProperties: a3, relays: l6 } = e2;
      let p3 = s3, h5, u2 = false;
      try {
        if (p3) {
          const T3 = this.client.core.pairing.pairings.get(p3);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u2 = T3.active;
        }
      } catch (T3) {
        throw this.client.logger.error(`connect() -> pairing.get(${p3}) failed`), T3;
      }
      if (!p3 || !u2) {
        const { topic: T3, uri: $2 } = await this.client.core.pairing.create({ internal: { skipSubscribe: true } });
        p3 = T3, h5 = $2;
      }
      if (!p3) {
        const { message: T3 } = Et2("NO_MATCHING_KEY", `connect() pairing topic: ${p3}`);
        throw new Error(T3);
      }
      const d5 = await this.client.core.crypto.generateKeyPair(), y4 = P4.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, w3 = ii(y4), m3 = O4(R3(R3({ requiredNamespaces: i4, optionalNamespaces: r3, relays: l6 ?? [{ protocol: $t3 }], proposer: { publicKey: d5, metadata: this.client.metadata }, expiryTimestamp: w3, pairingTopic: p3 }, n5 && { sessionProperties: n5 }), a3 && { scopedProperties: a3 }), { id: payloadId() }), S3 = ci("session_connect", m3.id), { reject: _3, resolve: b4, done: C4 } = ei(y4, Me4), I3 = ({ id: T3 }) => {
        T3 === m3.id && (this.client.events.off("proposal_expire", I3), this.pendingSessions.delete(m3.id), this.events.emit(S3, { error: { message: Me4, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I3), this.events.once(S3, ({ error: T3, session: $2 }) => {
        this.client.events.off("proposal_expire", I3), T3 ? _3(T3) : $2 && b4($2);
      }), await this.sendProposeSession({ proposal: m3, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: m3.id } } }), await this.setProposal(m3.id, m3), { uri: h5, approval: C4 };
    }), c5(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e2) {
        throw this.client.logger.error("pair() failed"), e2;
      }
    }), c5(this, "approve", async (t) => {
      var e2, s3, i4;
      const r3 = this.client.core.eventClient.createEvent({ properties: { topic: (e2 = t == null ? void 0 : t.id) == null ? void 0 : e2.toString(), trace: [rr3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N12) {
        throw r3.setError(nr2.no_internet_connection), N12;
      }
      try {
        await this.isValidProposalId(t == null ? void 0 : t.id);
      } catch (N12) {
        throw this.client.logger.error(`approve() -> proposal.get(${t == null ? void 0 : t.id}) failed`), r3.setError(nr2.proposal_not_found), N12;
      }
      try {
        await this.isValidApprove(t);
      } catch (N12) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r3.setError(nr2.session_approve_namespace_validation_failure), N12;
      }
      const { id: n5, relayProtocol: a3, namespaces: l6, sessionProperties: p3, scopedProperties: h5, sessionConfig: u2 } = t, d5 = this.client.proposal.get(n5);
      this.client.core.eventClient.deleteEvent({ eventId: r3.eventId });
      const { pairingTopic: y4, proposer: w3, requiredNamespaces: m3, optionalNamespaces: S3 } = d5;
      let _3 = (s3 = this.client.core.eventClient) == null ? void 0 : s3.getEvent({ topic: y4 });
      _3 || (_3 = (i4 = this.client.core.eventClient) == null ? void 0 : i4.createEvent({ type: rr3.session_approve_started, properties: { topic: y4, trace: [rr3.session_approve_started, rr3.session_namespaces_validation_success] } }));
      const b4 = await this.client.core.crypto.generateKeyPair(), C4 = w3.publicKey, I3 = await this.client.core.crypto.generateSharedKey(b4, C4), T3 = R3(R3(R3({ relay: { protocol: a3 ?? "irn" }, namespaces: l6, controller: { publicKey: b4, metadata: this.client.metadata }, expiry: ii(B2) }, p3 && { sessionProperties: p3 }), h5 && { scopedProperties: h5 }), u2 && { sessionConfig: u2 }), $2 = ee2.relay;
      _3.addTrace(rr3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I3, { transportType: $2, internal: { skipSubscribe: true } });
      } catch (N12) {
        throw _3.setError(nr2.subscribe_session_topic_failure), N12;
      }
      _3.addTrace(rr3.subscribe_session_topic_success);
      const Ee2 = O4(R3({}, T3), { topic: I3, requiredNamespaces: m3, optionalNamespaces: S3, pairingTopic: y4, acknowledged: false, self: T3.controller, peer: { publicKey: w3.publicKey, metadata: w3.metadata }, controller: b4, transportType: ee2.relay });
      await this.client.session.set(I3, Ee2), _3.addTrace(rr3.store_session);
      try {
        await this.sendApproveSession({ sessionTopic: I3, proposal: d5, pairingProposalResponse: { relay: { protocol: a3 ?? "irn" }, responderPublicKey: b4 }, sessionSettleRequest: T3, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: n5 } } }), _3.addTrace(rr3.session_approve_publish_success);
      } catch (N12) {
        throw this.client.logger.error(N12), this.client.session.delete(I3, Kt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I3), N12;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _3.eventId }), await this.client.core.pairing.updateMetadata({ topic: y4, metadata: w3.metadata }), await this.deleteProposal(n5), await this.client.core.pairing.activate({ topic: y4 }), await this.setExpiry(I3, ii(B2)), { topic: I3, acknowledged: () => Promise.resolve(this.client.session.get(I3)) };
    }), c5(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r3) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r3;
      }
      const { id: e2, reason: s3 } = t;
      let i4;
      try {
        i4 = this.client.proposal.get(e2).pairingTopic;
      } catch (r3) {
        throw this.client.logger.error(`reject() -> proposal.get(${e2}) failed`), r3;
      }
      i4 && await this.sendError({ id: e2, topic: i4, error: s3, rpcOpts: P4.wc_sessionPropose.reject }), await this.deleteProposal(e2);
    }), c5(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h5) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h5;
      }
      const { topic: e2, namespaces: s3 } = t, { done: i4, resolve: r3, reject: n5 } = ei(), a3 = payloadId(), l6 = getBigIntRpcId().toString(), p3 = this.client.session.get(e2).namespaces;
      return this.events.once(ci("session_update", a3), ({ error: h5 }) => {
        h5 ? n5(h5) : r3();
      }), await this.client.session.update(e2, { namespaces: s3 }), await this.sendRequest({ topic: e2, method: "wc_sessionUpdate", params: { namespaces: s3 }, throwOnFailedPublish: true, clientRpcId: a3, relayRpcId: l6 }).catch((h5) => {
        this.client.logger.error(h5), this.client.session.update(e2, { namespaces: p3 }), n5(h5);
      }), { acknowledged: i4 };
    }), c5(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a3) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a3;
      }
      const { topic: e2 } = t, s3 = payloadId(), { done: i4, resolve: r3, reject: n5 } = ei();
      return this.events.once(ci("session_extend", s3), ({ error: a3 }) => {
        a3 ? n5(a3) : r3();
      }), await this.setExpiry(e2, ii(B2)), this.sendRequest({ topic: e2, method: "wc_sessionExtend", params: {}, clientRpcId: s3, throwOnFailedPublish: true }).catch((a3) => {
        n5(a3);
      }), { acknowledged: i4 };
    }), c5(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (m3) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), m3;
      }
      const { chainId: e2, request: s3, topic: i4, expiry: r3 = P4.wc_sessionRequest.req.ttl } = t, n5 = this.client.session.get(i4);
      (n5 == null ? void 0 : n5.transportType) === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = payloadId(), l6 = getBigIntRpcId().toString(), { done: p3, resolve: h5, reject: u2 } = ei(r3, "Request expired. Please try again.");
      this.events.once(ci("session_request", a3), ({ error: m3, result: S3 }) => {
        m3 ? u2(m3) : h5(S3);
      });
      const d5 = "wc_sessionRequest", y4 = this.getAppLinkIfEnabled(n5.peer.metadata, n5.transportType);
      if (y4) return await this.sendRequest({ clientRpcId: a3, relayRpcId: l6, topic: i4, method: d5, params: { request: O4(R3({}, s3), { expiryTimestamp: ii(r3) }), chainId: e2 }, expiry: r3, throwOnFailedPublish: true, appLink: y4 }).catch((m3) => u2(m3)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: e2, id: a3 }), await p3();
      const w3 = { request: O4(R3({}, s3), { expiryTimestamp: ii(r3) }), chainId: e2 };
      return await Promise.all([new Promise(async (m3) => {
        await this.sendRequest({ clientRpcId: a3, relayRpcId: l6, topic: i4, method: d5, params: w3, expiry: r3, throwOnFailedPublish: true, tvf: this.getTVFParams(a3, w3) }).catch((S3) => u2(S3)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: e2, id: a3 }), m3();
      }), new Promise(async (m3) => {
        var S3;
        if (!((S3 = n5.sessionConfig) != null && S3.disableDeepLink)) {
          const _3 = await ui(this.client.core.storage, Le3);
          await ai({ id: a3, topic: i4, wcDeepLink: _3 });
        }
        m3();
      }), p3()]).then((m3) => m3[2]);
    }), c5(this, "respond", async (t) => {
      this.isInitialized(), await this.isValidRespond(t);
      const { topic: e2, response: s3 } = t, { id: i4 } = s3, r3 = this.client.session.get(e2);
      r3.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const n5 = this.getAppLinkIfEnabled(r3.peer.metadata, r3.transportType);
      isJsonRpcResult(s3) ? await this.sendResult({ id: i4, topic: e2, result: s3.result, throwOnFailedPublish: true, appLink: n5 }) : isJsonRpcError(s3) && await this.sendError({ id: i4, topic: e2, error: s3.error, appLink: n5 }), this.cleanupAfterResponse(t);
    }), c5(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s3) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s3;
      }
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2)) {
        const s3 = payloadId(), i4 = getBigIntRpcId().toString(), { done: r3, resolve: n5, reject: a3 } = ei();
        this.events.once(ci("session_ping", s3), ({ error: l6 }) => {
          l6 ? a3(l6) : n5();
        }), await Promise.all([this.sendRequest({ topic: e2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s3, relayRpcId: i4 }), r3()]);
      } else this.client.core.pairing.pairings.keys.includes(e2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e2 }));
    }), c5(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e2, event: s3, chainId: i4 } = t, r3 = getBigIntRpcId().toString(), n5 = payloadId();
      await this.sendRequest({ topic: e2, method: "wc_sessionEvent", params: { event: s3, chainId: i4 }, throwOnFailedPublish: true, relayRpcId: r3, clientRpcId: n5 });
    }), c5(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e2 } = t;
      if (this.client.session.keys.includes(e2)) await this.sendRequest({ topic: e2, method: "wc_sessionDelete", params: Kt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e2)) await this.client.core.pairing.disconnect({ topic: e2 });
      else {
        const { message: s3 } = Et2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e2}`);
        throw new Error(s3);
      }
    }), c5(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e2) => ya(e2, t)))), c5(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c5(this, "authenticate", async (t, e2) => {
      var s3;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i4 = e2 && this.client.core.linkModeSupportedApps.includes(e2) && ((s3 = this.client.metadata.redirect) == null ? void 0 : s3.linkMode), r3 = i4 ? ee2.link_mode : ee2.relay;
      r3 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n5, statement: a3 = "", uri: l6, domain: p3, nonce: h5, type: u2, exp: d5, nbf: y4, methods: w3 = [], expiry: m3 } = t, S3 = [...t.resources || []], { topic: _3, uri: b4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r3 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _3, uri: b4 } });
      const C4 = await this.client.core.crypto.generateKeyPair(), I3 = Fc(C4);
      if (await Promise.all([this.client.auth.authKeys.set(pe4, { responseTopic: I3, publicKey: C4 }), this.client.auth.pairingTopics.set(I3, { topic: I3, pairingTopic: _3 })]), await this.client.core.relayer.subscribe(I3, { transportType: r3 }), this.client.logger.info(`sending request to new pairing topic: ${_3}`), w3.length > 0) {
        const { namespace: A3 } = Fe(n5[0]);
        let k5 = Ef(A3, "request", w3);
        Oe2(S3) && (k5 = Bf(k5, S3.pop())), S3.push(k5);
      }
      const T3 = m3 && m3 > P4.wc_sessionAuthenticate.req.ttl ? m3 : P4.wc_sessionAuthenticate.req.ttl, $2 = { authPayload: { type: u2 ?? "caip122", chains: n5, statement: a3, aud: l6, domain: p3, version: "1", nonce: h5, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d5, nbf: y4, resources: S3 }, requester: { publicKey: C4, metadata: this.client.metadata }, expiryTimestamp: ii(T3) }, Ee2 = { eip155: { chains: n5, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...w3])], events: ["chainChanged", "accountsChanged"] } }, N12 = { requiredNamespaces: {}, optionalNamespaces: Ee2, relays: [{ protocol: "irn" }], pairingTopic: _3, proposer: { publicKey: C4, metadata: this.client.metadata }, expiryTimestamp: ii(P4.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt4, resolve: Ue4, reject: Se4 } = ei(T3, "Request expired"), se2 = payloadId(), he4 = ci("session_connect", N12.id), Re4 = ci("session_request", se2), de3 = async ({ error: A3, session: k5 }) => {
        this.events.off(Re4, ve4), A3 ? Se4(A3) : k5 && Ue4({ session: k5 });
      }, ve4 = async (A3) => {
        var k5, Ge3, je3;
        if (await this.deletePendingAuthRequest(se2, { message: "fulfilled", code: 0 }), A3.error) {
          const re2 = Kt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return A3.error.code === re2.code ? void 0 : (this.events.off(he4, de3), Se4(A3.error.message));
        }
        await this.deleteProposal(N12.id), this.events.off(he4, de3);
        const { cacaos: Fe3, responder: H2 } = A3.result, Te3 = [], Qe4 = [];
        for (const re2 of Fe3) {
          await yf({ cacao: re2, projectId: this.client.core.projectId }) || (this.client.logger.error(re2, "Signature verification failed"), Se4(Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = re2, Pe4 = Oe2(qe4.resources), He4 = [Vr2(qe4.iss)], qt4 = dn(qe4.iss);
          if (Pe4) {
            const Ne3 = If(Pe4), Pt4 = Af(Pe4);
            Te3.push(...Ne3), He4.push(...Pt4);
          }
          for (const Ne3 of He4) Qe4.push(`${Ne3}:${qt4}`);
        }
        const ie3 = await this.client.core.crypto.generateSharedKey(C4, H2.publicKey);
        let ue2;
        Te3.length > 0 && (ue2 = { topic: ie3, acknowledged: true, self: { publicKey: C4, metadata: this.client.metadata }, peer: H2, controller: H2.publicKey, expiry: ii(B2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _3, namespaces: ga([...new Set(Te3)], [...new Set(Qe4)]), transportType: r3 }, await this.client.core.relayer.subscribe(ie3, { transportType: r3 }), await this.client.session.set(ie3, ue2), _3 && await this.client.core.pairing.updateMetadata({ topic: _3, metadata: H2.metadata }), ue2 = this.client.session.get(ie3)), (k5 = this.client.metadata.redirect) != null && k5.linkMode && (Ge3 = H2.metadata.redirect) != null && Ge3.linkMode && (je3 = H2.metadata.redirect) != null && je3.universal && e2 && (this.client.core.addLinkModeSupportedApp(H2.metadata.redirect.universal), this.client.session.update(ie3, { transportType: ee2.link_mode })), Ue4({ auths: Fe3, session: ue2 });
      };
      this.events.once(he4, de3), this.events.once(Re4, ve4);
      let Ie3;
      try {
        if (i4) {
          const A3 = formatJsonRpcRequest("wc_sessionAuthenticate", $2, se2);
          this.client.core.history.set(_3, A3);
          const k5 = await this.client.core.crypto.encode("", A3, { type: ge2, encoding: De2 });
          Ie3 = sa(e2, _3, k5);
        } else await Promise.all([this.sendRequest({ topic: _3, method: "wc_sessionAuthenticate", params: $2, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: se2 }), this.sendRequest({ topic: _3, method: "wc_sessionPropose", params: N12, expiry: P4.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: N12.id })]);
      } catch (A3) {
        throw this.events.off(he4, de3), this.events.off(Re4, ve4), A3;
      }
      return await this.setProposal(N12.id, N12), await this.setAuthRequest(se2, { request: O4(R3({}, $2), { verifyContext: {} }), pairingTopic: _3, transportType: r3 }), { uri: Ie3 ?? b4, response: Tt4 };
    }), c5(this, "approveSessionAuthenticate", async (t) => {
      const { id: e2, auths: s3 } = t, i4 = this.client.core.eventClient.createEvent({ properties: { topic: e2.toString(), trace: [or4.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (m3) {
        throw i4.setError(ar2.no_internet_connection), m3;
      }
      const r3 = this.getPendingAuthRequest(e2);
      if (!r3) throw i4.setError(ar2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e2}`);
      const n5 = r3.transportType || ee2.relay;
      n5 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = r3.requester.publicKey, l6 = await this.client.core.crypto.generateKeyPair(), p3 = Fc(a3), h5 = { type: ee, receiverPublicKey: a3, senderPublicKey: l6 }, u2 = [], d5 = [];
      for (const m3 of s3) {
        if (!await yf({ cacao: m3, projectId: this.client.core.projectId })) {
          i4.setError(ar2.invalid_cacao);
          const I3 = Kt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e2, topic: p3, error: I3, encodeOpts: h5 }), new Error(I3.message);
        }
        i4.addTrace(or4.cacaos_verified);
        const { p: S3 } = m3, _3 = Oe2(S3.resources), b4 = [Vr2(S3.iss)], C4 = dn(S3.iss);
        if (_3) {
          const I3 = If(_3), T3 = Af(_3);
          u2.push(...I3), b4.push(...T3);
        }
        for (const I3 of b4) d5.push(`${I3}:${C4}`);
      }
      const y4 = await this.client.core.crypto.generateSharedKey(l6, a3);
      i4.addTrace(or4.create_authenticated_session_topic);
      let w3;
      if ((u2 == null ? void 0 : u2.length) > 0) {
        w3 = { topic: y4, acknowledged: true, self: { publicKey: l6, metadata: this.client.metadata }, peer: { publicKey: a3, metadata: r3.requester.metadata }, controller: a3, expiry: ii(B2), authentication: s3, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r3.pairingTopic, namespaces: ga([...new Set(u2)], [...new Set(d5)]), transportType: n5 }, i4.addTrace(or4.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y4, { transportType: n5 });
        } catch (m3) {
          throw i4.setError(ar2.subscribe_authenticated_session_topic_failure), m3;
        }
        i4.addTrace(or4.subscribe_authenticated_session_topic_success), await this.client.session.set(y4, w3), i4.addTrace(or4.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r3.pairingTopic, metadata: r3.requester.metadata });
      }
      i4.addTrace(or4.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p3, id: e2, result: { cacaos: s3, responder: { publicKey: l6, metadata: this.client.metadata } }, encodeOpts: h5, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r3.requester.metadata, n5) });
      } catch (m3) {
        throw i4.setError(ar2.authenticated_session_approve_publish_failure), m3;
      }
      return await this.client.auth.requests.delete(e2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r3.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i4.eventId }), { session: w3 };
    }), c5(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e2, reason: s3 } = t, i4 = this.getPendingAuthRequest(e2);
      if (!i4) throw new Error(`Could not find pending auth request with id ${e2}`);
      i4.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const r3 = i4.requester.publicKey, n5 = await this.client.core.crypto.generateKeyPair(), a3 = Fc(r3), l6 = { type: ee, receiverPublicKey: r3, senderPublicKey: n5 };
      await this.sendError({ id: e2, topic: a3, error: s3, encodeOpts: l6, rpcOpts: P4.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i4.requester.metadata, i4.transportType) }), await this.client.auth.requests.delete(e2, { message: "rejected", code: 0 }), await this.deleteProposal(e2);
    }), c5(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e2, iss: s3 } = t;
      return qr2(e2, s3);
    }), c5(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t = this.relayMessageCache.shift();
          t && await this.onRelayMessage(t);
        } catch (t) {
          this.client.logger.error(t);
        }
      }, 50);
    }), c5(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic) try {
        const e2 = this.client.core.pairing.pairings.get(t.pairingTopic), s3 = this.client.core.pairing.pairings.getAll().filter((i4) => {
          var r3, n5;
          return ((r3 = i4.peerMetadata) == null ? void 0 : r3.url) && ((n5 = i4.peerMetadata) == null ? void 0 : n5.url) === t.peer.metadata.url && i4.topic && i4.topic !== e2.topic;
        });
        if (s3.length === 0) return;
        this.client.logger.info(`Cleaning up ${s3.length} duplicate pairing(s)`), await Promise.all(s3.map((i4) => this.client.core.pairing.disconnect({ topic: i4.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e2) {
        this.client.logger.error(e2);
      }
    }), c5(this, "deleteSession", async (t) => {
      var e2;
      const { topic: s3, expirerHasDeleted: i4 = false, emitEvent: r3 = true, id: n5 = 0 } = t, { self: a3 } = this.client.session.get(s3);
      await this.client.core.relayer.unsubscribe(s3), await this.client.session.delete(s3, Kt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s3, "session"), this.client.core.crypto.keychain.has(a3.publicKey) && await this.client.core.crypto.deleteKeyPair(a3.publicKey), this.client.core.crypto.keychain.has(s3) && await this.client.core.crypto.deleteSymKey(s3), i4 || this.client.core.expirer.del(s3), this.client.core.storage.removeItem(Le3).catch((l6) => this.client.logger.warn(l6)), this.getPendingSessionRequests().forEach((l6) => {
        l6.topic === s3 && this.deletePendingSessionRequest(l6.id, Kt2("USER_DISCONNECTED"));
      }), s3 === ((e2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : e2.topic) && (this.sessionRequestQueue.state = M4.idle), r3 && this.client.events.emit("session_delete", { id: n5, topic: s3 });
    }), c5(this, "deleteProposal", async (t, e2) => {
      if (e2) try {
        const s3 = this.client.proposal.get(t), i4 = this.client.core.eventClient.getEvent({ topic: s3.pairingTopic });
        i4 == null ? void 0 : i4.setError(nr2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t, Kt2("USER_DISCONNECTED")), e2 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c5(this, "deletePendingSessionRequest", async (t, e2, s3 = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e2), s3 ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i4) => i4.id !== t), s3 && (this.sessionRequestQueue.state = M4.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c5(this, "deletePendingAuthRequest", async (t, e2, s3 = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e2), s3 ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c5(this, "setExpiry", async (t, e2) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e2), await this.client.session.update(t, { expiry: e2 }));
    }), c5(this, "setProposal", async (t, e2) => {
      this.client.core.expirer.set(t, ii(P4.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e2);
    }), c5(this, "setAuthRequest", async (t, e2) => {
      const { request: s3, pairingTopic: i4, transportType: r3 = ee2.relay } = e2;
      this.client.core.expirer.set(t, s3.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s3.authPayload, requester: s3.requester, expiryTimestamp: s3.expiryTimestamp, id: t, pairingTopic: i4, verifyContext: s3.verifyContext, transportType: r3 });
    }), c5(this, "setPendingSessionRequest", async (t) => {
      const { id: e2, topic: s3, params: i4, verifyContext: r3 } = t, n5 = i4.request.expiryTimestamp || ii(P4.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e2, n5), await this.client.pendingRequest.set(e2, { id: e2, topic: s3, params: i4, verifyContext: r3 });
    }), c5(this, "sendRequest", async (t) => {
      const { topic: e2, method: s3, params: i4, expiry: r3, relayRpcId: n5, clientRpcId: a3, throwOnFailedPublish: l6, appLink: p3, tvf: h5, publishOpts: u2 = {} } = t, d5 = formatJsonRpcRequest(s3, i4, a3);
      let y4;
      const w3 = !!p3;
      try {
        const _3 = w3 ? De2 : Qt2;
        y4 = await this.client.core.crypto.encode(e2, d5, { encoding: _3 });
      } catch (_3) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e2} failed`), _3;
      }
      let m3;
      if (mt2.includes(s3)) {
        const _3 = zc(JSON.stringify(d5)), b4 = zc(y4);
        m3 = await this.client.core.verify.register({ id: b4, decryptedId: _3 });
      }
      const S3 = R3(R3({}, P4[s3].req), u2);
      if (S3.attestation = m3, r3 && (S3.ttl = r3), n5 && (S3.id = n5), this.client.core.history.set(e2, d5), w3) {
        const _3 = sa(p3, e2, y4);
        await global.Linking.openURL(_3, this.client.name);
      } else S3.tvf = O4(R3({}, h5), { correlationId: d5.id }), l6 ? (S3.internal = O4(R3({}, S3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e2, y4, S3)) : this.client.core.relayer.publish(e2, y4, S3).catch((_3) => this.client.logger.error(_3));
      return d5.id;
    }), c5(this, "sendProposeSession", async (t) => {
      const { proposal: e2, publishOpts: s3 } = t, i4 = formatJsonRpcRequest("wc_sessionPropose", e2, e2.id);
      this.client.core.history.set(e2.pairingTopic, i4);
      const r3 = await this.client.core.crypto.encode(e2.pairingTopic, i4, { encoding: Qt2 }), n5 = zc(JSON.stringify(i4)), a3 = zc(r3), l6 = await this.client.core.verify.register({ id: a3, decryptedId: n5 });
      await this.client.core.relayer.publishCustom({ payload: { pairingTopic: e2.pairingTopic, sessionProposal: r3 }, opts: O4(R3({}, s3), { publishMethod: "wc_proposeSession", attestation: l6 }) });
    }), c5(this, "sendApproveSession", async (t) => {
      const { sessionTopic: e2, pairingProposalResponse: s3, proposal: i4, sessionSettleRequest: r3, publishOpts: n5 } = t, a3 = formatJsonRpcResult(i4.id, s3), l6 = await this.client.core.crypto.encode(i4.pairingTopic, a3, { encoding: Qt2 }), p3 = formatJsonRpcRequest("wc_sessionSettle", r3, n5 == null ? void 0 : n5.id), h5 = await this.client.core.crypto.encode(e2, p3, { encoding: Qt2 });
      this.client.core.history.set(e2, p3), await this.client.core.relayer.publishCustom({ payload: { sessionTopic: e2, pairingTopic: i4.pairingTopic, sessionProposalResponse: l6, sessionSettlementRequest: h5 }, opts: O4(R3({}, n5), { publishMethod: "wc_approveSession" }) });
    }), c5(this, "sendResult", async (t) => {
      const { id: e2, topic: s3, result: i4, throwOnFailedPublish: r3, encodeOpts: n5, appLink: a3 } = t, l6 = formatJsonRpcResult(e2, i4);
      let p3;
      const h5 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y4 = h5 ? De2 : Qt2;
        p3 = await this.client.core.crypto.encode(s3, l6, O4(R3({}, n5 || {}), { encoding: y4 }));
      } catch (y4) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s3} failed`), y4;
      }
      let u2, d5;
      try {
        u2 = await this.client.core.history.get(s3, e2);
        const y4 = u2.request;
        try {
          d5 = this.getTVFParams(e2, y4.params, i4);
        } catch (w3) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w3 == null ? void 0 : w3.message}`);
        }
      } catch (y4) {
        throw this.client.logger.error(`sendResult() -> history.get(${s3}, ${e2}) failed`), y4;
      }
      if (h5) {
        const y4 = sa(a3, s3, p3);
        await global.Linking.openURL(y4, this.client.name);
      } else {
        const y4 = u2.request.method, w3 = P4[y4].res;
        w3.tvf = O4(R3({}, d5), { correlationId: e2 }), r3 ? (w3.internal = O4(R3({}, w3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s3, p3, w3)) : this.client.core.relayer.publish(s3, p3, w3).catch((m3) => this.client.logger.error(m3));
      }
      await this.client.core.history.resolve(l6);
    }), c5(this, "sendError", async (t) => {
      const { id: e2, topic: s3, error: i4, encodeOpts: r3, rpcOpts: n5, appLink: a3 } = t, l6 = formatJsonRpcError(e2, i4);
      let p3;
      const h5 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d5 = h5 ? De2 : Qt2;
        p3 = await this.client.core.crypto.encode(s3, l6, O4(R3({}, r3 || {}), { encoding: d5 }));
      } catch (d5) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s3} failed`), d5;
      }
      let u2;
      try {
        u2 = await this.client.core.history.get(s3, e2);
      } catch (d5) {
        throw this.client.logger.error(`sendError() -> history.get(${s3}, ${e2}) failed`), d5;
      }
      if (h5) {
        const d5 = sa(a3, s3, p3);
        await global.Linking.openURL(d5, this.client.name);
      } else {
        const d5 = u2.request.method, y4 = n5 || P4[d5].res;
        this.client.core.relayer.publish(s3, p3, y4);
      }
      await this.client.core.history.resolve(l6);
    }), c5(this, "cleanup", async () => {
      const t = [], e2 = [];
      this.client.session.getAll().forEach((s3) => {
        let i4 = false;
        fi(s3.expiry) && (i4 = true), this.client.core.crypto.keychain.has(s3.topic) || (i4 = true), i4 && t.push(s3.topic);
      }), this.client.proposal.getAll().forEach((s3) => {
        fi(s3.expiryTimestamp) && e2.push(s3.id);
      }), await Promise.all([...t.map((s3) => this.deleteSession({ topic: s3 })), ...e2.map((s3) => this.deleteProposal(s3))]);
    }), c5(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c5(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c5(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === M4.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = M4.active;
        const t = this.requestQueue.queue.shift();
        if (t) try {
          await this.processRequest(t);
        } catch (e2) {
          this.client.logger.warn(e2);
        }
      }
      this.requestQueue.state = M4.idle;
    }), c5(this, "processRequest", async (t) => {
      const { topic: e2, payload: s3, attestation: i4, transportType: r3, encryptedId: n5 } = t, a3 = s3.method;
      if (!this.shouldIgnorePairingRequest({ topic: e2, requestMethod: a3 })) switch (a3) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e2, s3);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e2, s3);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e2, s3);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e2, s3);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e2, s3);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5, transportType: r3 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e2, s3);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e2, payload: s3, attestation: i4, encryptedId: n5, transportType: r3 });
        default:
          return this.client.logger.info(`Unsupported request method ${a3}`);
      }
    }), c5(this, "onRelayEventResponse", async (t) => {
      const { topic: e2, payload: s3, transportType: i4 } = t, r3 = (await this.client.core.history.get(e2, s3.id)).request.method;
      switch (r3) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e2, s3, i4);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e2, s3);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e2, s3);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e2, s3);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e2, s3);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e2, s3);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e2, s3);
        default:
          return this.client.logger.info(`Unsupported response method ${r3}`);
      }
    }), c5(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e2 } = t, { message: s3 } = Et2("MISSING_OR_INVALID", `Decoded payload on topic ${e2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s3);
    }), c5(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e2, requestMethod: s3 } = t, i4 = this.expectedPairingMethodMap.get(e2);
      return !i4 || i4.includes(s3) ? false : !!(i4.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c5(this, "onSessionProposeRequest", async (t) => {
      const { topic: e2, payload: s3, attestation: i4, encryptedId: r3 } = t, { params: n5, id: a3 } = s3;
      try {
        const l6 = this.client.core.eventClient.getEvent({ topic: e2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l6 == null ? void 0 : l6.setError(X2.proposal_listener_not_found)), this.isValidConnect(R3({}, s3.params));
        const p3 = n5.expiryTimestamp || ii(P4.wc_sessionPropose.req.ttl), h5 = R3({ id: a3, pairingTopic: e2, expiryTimestamp: p3, attestation: i4, encryptedId: r3 }, n5);
        await this.setProposal(a3, h5);
        const u2 = await this.getVerifyContext({ attestationId: i4, hash: zc(JSON.stringify(s3)), encryptedId: r3, metadata: h5.proposer.metadata });
        l6 == null ? void 0 : l6.addTrace(Y2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a3, params: h5, verifyContext: u2 });
      } catch (l6) {
        await this.sendError({ id: a3, topic: e2, error: l6, rpcOpts: P4.wc_sessionPropose.autoReject }), this.client.logger.error(l6);
      }
    }), c5(this, "onSessionProposeResponse", async (t, e2, s3) => {
      const { id: i4 } = e2;
      if (isJsonRpcResult(e2)) {
        const { result: r3 } = e2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r3 });
        const n5 = this.client.proposal.get(i4);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n5 });
        const a3 = n5.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a3 });
        const l6 = r3.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l6 });
        const p3 = await this.client.core.crypto.generateSharedKey(a3, l6);
        this.pendingSessions.set(i4, { sessionTopic: p3, pairingTopic: t, proposalId: i4, publicKey: a3 });
        const h5 = await this.client.core.relayer.subscribe(p3, { transportType: s3 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h5 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e2)) {
        await this.deleteProposal(i4);
        const r3 = ci("session_connect", i4);
        if (this.events.listenerCount(r3) === 0) throw new Error(`emitting ${r3} without any listeners, 954`);
        this.events.emit(r3, { error: e2.error });
      }
    }), c5(this, "onSessionSettleRequest", async (t, e2) => {
      const { id: s3, params: i4 } = e2;
      try {
        this.isValidSessionSettleRequest(i4);
        const { relay: r3, controller: n5, expiry: a3, namespaces: l6, sessionProperties: p3, scopedProperties: h5, sessionConfig: u2 } = e2.params, d5 = [...this.pendingSessions.values()].find((m3) => m3.sessionTopic === t);
        if (!d5) return this.client.logger.error(`Pending session not found for topic ${t}`);
        const y4 = this.client.proposal.get(d5.proposalId), w3 = O4(R3(R3(R3({ topic: t, relay: r3, expiry: a3, namespaces: l6, acknowledged: true, pairingTopic: d5.pairingTopic, requiredNamespaces: y4.requiredNamespaces, optionalNamespaces: y4.optionalNamespaces, controller: n5.publicKey, self: { publicKey: d5.publicKey, metadata: this.client.metadata }, peer: { publicKey: n5.publicKey, metadata: n5.metadata } }, p3 && { sessionProperties: p3 }), h5 && { scopedProperties: h5 }), u2 && { sessionConfig: u2 }), { transportType: ee2.relay });
        await this.client.session.set(w3.topic, w3), await this.setExpiry(w3.topic, w3.expiry), await this.client.core.pairing.updateMetadata({ topic: d5.pairingTopic, metadata: w3.peer.metadata }), this.client.events.emit("session_connect", { session: w3 }), this.events.emit(ci("session_connect", d5.proposalId), { session: w3 }), this.pendingSessions.delete(d5.proposalId), this.deleteProposal(d5.proposalId, false), this.cleanupDuplicatePairings(w3), await this.sendResult({ id: e2.id, topic: t, result: true });
      } catch (r3) {
        await this.sendError({ id: s3, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionSettleResponse", async (t, e2) => {
      const { id: s3 } = e2;
      isJsonRpcResult(e2) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(ci("session_approve", s3), {})) : isJsonRpcError(e2) && (await this.client.session.delete(t, Kt2("USER_DISCONNECTED")), this.events.emit(ci("session_approve", s3), { error: e2.error }));
    }), c5(this, "onSessionUpdateRequest", async (t, e2) => {
      const { params: s3, id: i4 } = e2;
      try {
        const r3 = `${t}_session_update`, n5 = Ha.get(r3);
        if (n5 && this.isRequestOutOfSync(n5, i4)) {
          this.client.logger.warn(`Discarding out of sync request - ${i4}`), this.sendError({ id: i4, topic: t, error: Kt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(R3({ topic: t }, s3));
        try {
          Ha.set(r3, i4), await this.client.session.update(t, { namespaces: s3.namespaces }), await this.sendResult({ id: i4, topic: t, result: true });
        } catch (a3) {
          throw Ha.delete(r3), a3;
        }
        this.client.events.emit("session_update", { id: i4, topic: t, params: s3 });
      } catch (r3) {
        await this.sendError({ id: i4, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "isRequestOutOfSync", (t, e2) => e2.toString().slice(0, -3) < t.toString().slice(0, -3)), c5(this, "onSessionUpdateResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_update", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_update", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_update", s3), { error: e2.error });
    }), c5(this, "onSessionExtendRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, ii(B2)), await this.sendResult({ id: s3, topic: t, result: true }), this.client.events.emit("session_extend", { id: s3, topic: t });
      } catch (i4) {
        await this.sendError({ id: s3, topic: t, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionExtendResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_extend", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_extend", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_extend", s3), { error: e2.error });
    }), c5(this, "onSessionPingRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s3, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s3, topic: t });
      } catch (i4) {
        await this.sendError({ id: s3, topic: t, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionPingResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_ping", s3);
      setTimeout(() => {
        if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners 2176`);
        isJsonRpcResult(e2) ? this.events.emit(ci("session_ping", s3), {}) : isJsonRpcError(e2) && this.events.emit(ci("session_ping", s3), { error: e2.error });
      }, 500);
    }), c5(this, "onSessionDeleteRequest", async (t, e2) => {
      const { id: s3 } = e2;
      try {
        this.isValidDisconnect({ topic: t, reason: e2.params }), await Promise.all([new Promise((i4) => {
          this.client.core.relayer.once(C3.publish, async () => {
            i4(await this.deleteSession({ topic: t, id: s3 }));
          });
        }), this.sendResult({ id: s3, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: Kt2("USER_DISCONNECTED") })]).catch((i4) => this.client.logger.error(i4));
      } catch (i4) {
        this.client.logger.error(i4);
      }
    }), c5(this, "onSessionRequest", async (t) => {
      var e2, s3, i4;
      const { topic: r3, payload: n5, attestation: a3, encryptedId: l6, transportType: p3 } = t, { id: h5, params: u2 } = n5;
      try {
        await this.isValidRequest(R3({ topic: r3 }, u2));
        const d5 = this.client.session.get(r3), y4 = await this.getVerifyContext({ attestationId: a3, hash: zc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u2, h5))), encryptedId: l6, metadata: d5.peer.metadata, transportType: p3 }), w3 = { id: h5, topic: r3, params: u2, verifyContext: y4 };
        await this.setPendingSessionRequest(w3), p3 === ee2.link_mode && (e2 = d5.peer.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp((s3 = d5.peer.metadata.redirect) == null ? void 0 : s3.universal), (i4 = this.client.signConfig) != null && i4.disableRequestQueue ? this.emitSessionRequest(w3) : (this.addSessionRequestToSessionRequestQueue(w3), this.processSessionRequestQueue());
      } catch (d5) {
        await this.sendError({ id: h5, topic: r3, error: d5 }), this.client.logger.error(d5);
      }
    }), c5(this, "onSessionRequestResponse", (t, e2) => {
      const { id: s3 } = e2, i4 = ci("session_request", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(e2) ? this.events.emit(ci("session_request", s3), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(ci("session_request", s3), { error: e2.error });
    }), c5(this, "onSessionEventRequest", async (t, e2) => {
      const { id: s3, params: i4 } = e2;
      try {
        const r3 = `${t}_session_event_${i4.event.name}`, n5 = Ha.get(r3);
        if (n5 && this.isRequestOutOfSync(n5, s3)) {
          this.client.logger.info(`Discarding out of sync request - ${s3}`);
          return;
        }
        this.isValidEmit(R3({ topic: t }, i4)), this.client.events.emit("session_event", { id: s3, topic: t, params: i4 }), Ha.set(r3, s3);
      } catch (r3) {
        await this.sendError({ id: s3, topic: t, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionAuthenticateResponse", (t, e2) => {
      const { id: s3 } = e2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e2 }), isJsonRpcResult(e2) ? this.events.emit(ci("session_request", s3), { result: e2.result }) : isJsonRpcError(e2) && this.events.emit(ci("session_request", s3), { error: e2.error });
    }), c5(this, "onSessionAuthenticateRequest", async (t) => {
      var e2;
      const { topic: s3, payload: i4, attestation: r3, encryptedId: n5, transportType: a3 } = t;
      try {
        const { requester: l6, authPayload: p3, expiryTimestamp: h5 } = i4.params, u2 = await this.getVerifyContext({ attestationId: r3, hash: zc(JSON.stringify(i4)), encryptedId: n5, metadata: l6.metadata, transportType: a3 }), d5 = { requester: l6, pairingTopic: s3, id: i4.id, authPayload: p3, verifyContext: u2, expiryTimestamp: h5 };
        await this.setAuthRequest(i4.id, { request: d5, pairingTopic: s3, transportType: a3 }), a3 === ee2.link_mode && (e2 = l6.metadata.redirect) != null && e2.universal && this.client.core.addLinkModeSupportedApp(l6.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s3, params: i4.params, id: i4.id, verifyContext: u2 });
      } catch (l6) {
        this.client.logger.error(l6);
        const p3 = i4.params.requester.publicKey, h5 = await this.client.core.crypto.generateKeyPair(), u2 = this.getAppLinkIfEnabled(i4.params.requester.metadata, a3), d5 = { type: ee, receiverPublicKey: p3, senderPublicKey: h5 };
        await this.sendError({ id: i4.id, topic: s3, error: l6, encodeOpts: d5, rpcOpts: P4.wc_sessionAuthenticate.autoReject, appLink: u2 });
      }
    }), c5(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c5(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = M4.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c5(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e2 }) => {
      const s3 = this.client.core.history.pending;
      s3.length > 0 && s3.filter((i4) => i4.topic === t && i4.request.method === "wc_sessionRequest").forEach((i4) => {
        const r3 = i4.request.id, n5 = ci("session_request", r3);
        if (this.events.listenerCount(n5) === 0) throw new Error(`emitting ${n5} without any listeners`);
        this.events.emit(ci("session_request", i4.request.id), { error: e2 });
      });
    }), c5(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === M4.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e2) {
        this.client.logger.error(e2);
      }
    }), c5(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = M4.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c5(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;
      const e2 = this.client.proposal.getAll().find((s3) => s3.pairingTopic === t.topic);
      e2 && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", O4(R3({}, e2), { requiredNamespaces: e2.requiredNamespaces, optionalNamespaces: e2.optionalNamespaces, relays: e2.relays, proposer: e2.proposer, sessionProperties: e2.sessionProperties, scopedProperties: e2.scopedProperties }), e2.id), attestation: e2.attestation, encryptedId: e2.encryptedId });
    }), c5(this, "isValidConnect", async (t) => {
      if (!Aa(t)) {
        const { message: l6 } = Et2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l6);
      }
      const { pairingTopic: e2, requiredNamespaces: s3, optionalNamespaces: i4, sessionProperties: r3, scopedProperties: n5, relays: a3 } = t;
      if (kt2(e2) || await this.isValidPairingTopic(e2), !Ba(a3, true)) {
        const { message: l6 } = Et2("MISSING_OR_INVALID", `connect() relays: ${a3}`);
        throw new Error(l6);
      }
      if (!kt2(s3) && Ve2(s3) !== 0) {
        const l6 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l6) : this.client.logger.warn(l6), this.validateNamespaces(s3, "requiredNamespaces");
      }
      if (!kt2(i4) && Ve2(i4) !== 0 && this.validateNamespaces(i4, "optionalNamespaces"), kt2(r3) || this.validateSessionProps(r3, "sessionProperties"), !kt2(n5)) {
        this.validateSessionProps(n5, "scopedProperties");
        const l6 = Object.keys(s3 || {}).concat(Object.keys(i4 || {}));
        if (!Object.keys(n5).every((p3) => l6.includes(p3.split(":")[0]))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n5)}, required/optional namespaces: ${JSON.stringify(l6)}`);
      }
    }), c5(this, "validateNamespaces", (t, e2) => {
      const s3 = Ea(t, "connect()", e2);
      if (s3) throw new Error(s3.message);
    }), c5(this, "isValidApprove", async (t) => {
      if (!Aa(t)) throw new Error(Et2("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e2, namespaces: s3, relayProtocol: i4, sessionProperties: r3, scopedProperties: n5 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2);
      const a3 = this.client.proposal.get(e2), l6 = is(s3, "approve()");
      if (l6) throw new Error(l6.message);
      const p3 = cs(a3.requiredNamespaces, s3, "approve()");
      if (p3) throw new Error(p3.message);
      if (!it2(i4, true)) {
        const { message: h5 } = Et2("MISSING_OR_INVALID", `approve() relayProtocol: ${i4}`);
        throw new Error(h5);
      }
      if (kt2(r3) || this.validateSessionProps(r3, "sessionProperties"), !kt2(n5)) {
        this.validateSessionProps(n5, "scopedProperties");
        const h5 = new Set(Object.keys(s3));
        if (!Object.keys(n5).every((u2) => h5.has(u2.split(":")[0]))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n5)}, approved namespaces: ${Array.from(h5).join(", ")}`);
      }
    }), c5(this, "isValidReject", async (t) => {
      if (!Aa(t)) {
        const { message: i4 } = Et2("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i4);
      }
      const { id: e2, reason: s3 } = t;
      if (this.checkRecentlyDeleted(e2), await this.isValidProposalId(e2), !Sa(s3)) {
        const { message: i4 } = Et2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s3)}`);
        throw new Error(i4);
      }
    }), c5(this, "isValidSessionSettleRequest", (t) => {
      if (!Aa(t)) {
        const { message: l6 } = Et2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l6);
      }
      const { relay: e2, controller: s3, namespaces: i4, expiry: r3 } = t;
      if (!fs(e2)) {
        const { message: l6 } = Et2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l6);
      }
      const n5 = va(s3, "onSessionSettleRequest()");
      if (n5) throw new Error(n5.message);
      const a3 = is(i4, "onSessionSettleRequest()");
      if (a3) throw new Error(a3.message);
      if (fi(r3)) {
        const { message: l6 } = Et2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l6);
      }
    }), c5(this, "isValidUpdate", async (t) => {
      if (!Aa(t)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, namespaces: s3 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const i4 = this.client.session.get(e2), r3 = is(s3, "update()");
      if (r3) throw new Error(r3.message);
      const n5 = cs(i4.requiredNamespaces, s3, "update()");
      if (n5) throw new Error(n5.message);
    }), c5(this, "isValidExtend", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
    }), c5(this, "isValidRequest", async (t) => {
      if (!Aa(t)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a3);
      }
      const { topic: e2, request: s3, chainId: i4, expiry: r3 } = t;
      this.checkRecentlyDeleted(e2), await this.isValidSessionTopic(e2);
      const { namespaces: n5 } = this.client.session.get(e2);
      if (!_a(n5, i4)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() chainId: ${i4}`);
        throw new Error(a3);
      }
      if (!Na(s3)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() ${JSON.stringify(s3)}`);
        throw new Error(a3);
      }
      if (!Ta(n5, i4, s3.method)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() method: ${s3.method}`);
        throw new Error(a3);
      }
      if (r3 && !La(r3, _e3)) {
        const { message: a3 } = Et2("MISSING_OR_INVALID", `request() expiry: ${r3}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a3);
      }
    }), c5(this, "isValidRespond", async (t) => {
      var e2;
      if (!Aa(t)) {
        const { message: r3 } = Et2("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(r3);
      }
      const { topic: s3, response: i4 } = t;
      try {
        await this.isValidSessionTopic(s3);
      } catch (r3) {
        throw (e2 = t == null ? void 0 : t.response) != null && e2.id && this.cleanupAfterResponse(t), r3;
      }
      if (!Oa(i4)) {
        const { message: r3 } = Et2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i4)}`);
        throw new Error(r3);
      }
    }), c5(this, "isValidPing", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c5(this, "isValidEmit", async (t) => {
      if (!Aa(t)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n5);
      }
      const { topic: e2, event: s3, chainId: i4 } = t;
      await this.isValidSessionTopic(e2);
      const { namespaces: r3 } = this.client.session.get(e2);
      if (!_a(r3, i4)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() chainId: ${i4}`);
        throw new Error(n5);
      }
      if (!Ua(s3)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n5);
      }
      if (!Ra(r3, i4, s3.name)) {
        const { message: n5 } = Et2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n5);
      }
    }), c5(this, "isValidDisconnect", async (t) => {
      if (!Aa(t)) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s3);
      }
      const { topic: e2 } = t;
      await this.isValidSessionOrPairingTopic(e2);
    }), c5(this, "isValidAuthenticate", (t) => {
      const { chains: e2, uri: s3, domain: i4, nonce: r3 } = t;
      if (!Array.isArray(e2) || e2.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!it2(s3, false)) throw new Error("uri is required parameter");
      if (!it2(i4, false)) throw new Error("domain is required parameter");
      if (!it2(r3, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e2.map((a3) => Fe(a3).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n5 } = Fe(e2[0]);
      if (n5 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c5(this, "getVerifyContext", async (t) => {
      const { attestationId: e2, hash: s3, encryptedId: i4, metadata: r3, transportType: n5 } = t, a3 = { verified: { verifyUrl: r3.verifyUrl || be3, validation: "UNKNOWN", origin: r3.url || "" } };
      try {
        if (n5 === ee2.link_mode) {
          const p3 = this.getAppLinkIfEnabled(r3, n5);
          return a3.verified.validation = p3 && new URL(p3).origin === new URL(r3.url).origin ? "VALID" : "INVALID", a3;
        }
        const l6 = await this.client.core.verify.resolve({ attestationId: e2, hash: s3, encryptedId: i4, verifyUrl: r3.verifyUrl });
        l6 && (a3.verified.origin = l6.origin, a3.verified.isScam = l6.isScam, a3.verified.validation = l6.origin === new URL(r3.url).origin ? "VALID" : "INVALID");
      } catch (l6) {
        this.client.logger.warn(l6);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a3)}`), a3;
    }), c5(this, "validateSessionProps", (t, e2) => {
      Object.values(t).forEach((s3, i4) => {
        if (s3 == null) {
          const { message: r3 } = Et2("MISSING_OR_INVALID", `${e2} must contain an existing value for each key. Received: ${s3} for key ${Object.keys(t)[i4]}`);
          throw new Error(r3);
        }
      });
    }), c5(this, "getPendingAuthRequest", (t) => {
      const e2 = this.client.auth.requests.get(t);
      return typeof e2 == "object" ? e2 : void 0;
    }), c5(this, "addToRecentlyDeleted", (t, e2) => {
      if (this.recentlyDeletedMap.set(t, e2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s3 = 0;
        const i4 = this.recentlyDeletedLimit / 2;
        for (const r3 of this.recentlyDeletedMap.keys()) {
          if (s3++ >= i4) break;
          this.recentlyDeletedMap.delete(r3);
        }
      }
    }), c5(this, "checkRecentlyDeleted", (t) => {
      const e2 = this.recentlyDeletedMap.get(t);
      if (e2) {
        const { message: s3 } = Et2("MISSING_OR_INVALID", `Record was recently deleted - ${e2}: ${t}`);
        throw new Error(s3);
      }
    }), c5(this, "isLinkModeEnabled", (t, e2) => {
      var s3, i4, r3, n5, a3, l6, p3, h5, u2;
      return !t || e2 !== ee2.link_mode ? false : ((i4 = (s3 = this.client.metadata) == null ? void 0 : s3.redirect) == null ? void 0 : i4.linkMode) === true && ((n5 = (r3 = this.client.metadata) == null ? void 0 : r3.redirect) == null ? void 0 : n5.universal) !== void 0 && ((l6 = (a3 = this.client.metadata) == null ? void 0 : a3.redirect) == null ? void 0 : l6.universal) !== "" && ((p3 = t == null ? void 0 : t.redirect) == null ? void 0 : p3.universal) !== void 0 && ((h5 = t == null ? void 0 : t.redirect) == null ? void 0 : h5.universal) !== "" && ((u2 = t == null ? void 0 : t.redirect) == null ? void 0 : u2.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c5(this, "getAppLinkIfEnabled", (t, e2) => {
      var s3;
      return this.isLinkModeEnabled(t, e2) ? (s3 = t == null ? void 0 : t.redirect) == null ? void 0 : s3.universal : void 0;
    }), c5(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic")) return;
      const e2 = li(t, "topic") || "", s3 = decodeURIComponent(li(t, "wc_ev") || ""), i4 = this.client.session.keys.includes(e2);
      i4 && this.client.session.update(e2, { transportType: ee2.link_mode }), this.client.core.dispatchEnvelope({ topic: e2, message: s3, sessionExists: i4 });
    }), c5(this, "registerLinkModeListeners", async () => {
      var t;
      if (hi() || Bt2() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e2 = global == null ? void 0 : global.Linking;
        if (typeof e2 < "u") {
          e2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s3 = await e2.getInitialURL();
          s3 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s3 });
          }, 50);
        }
      }
    }), c5(this, "getTVFParams", (t, e2, s3) => {
      var i4, r3, n5;
      if (!((i4 = e2.request) != null && i4.method)) return {};
      const a3 = { correlationId: t, rpcMethods: [e2.request.method], chainId: e2.chainId };
      try {
        const l6 = this.extractTxHashesFromResult(e2.request, s3);
        a3.txHashes = l6, a3.contractAddresses = this.isValidContractData(e2.request.params) ? [(n5 = (r3 = e2.request.params) == null ? void 0 : r3[0]) == null ? void 0 : n5.to] : [];
      } catch (l6) {
        this.client.logger.warn("Error getting TVF params", l6);
      }
      return a3;
    }), c5(this, "isValidContractData", (t) => {
      var e2;
      if (!t) return false;
      try {
        const s3 = (t == null ? void 0 : t.data) || ((e2 = t == null ? void 0 : t[0]) == null ? void 0 : e2.data);
        if (!s3.startsWith("0x")) return false;
        const i4 = s3.slice(2);
        return /^[0-9a-fA-F]*$/.test(i4) ? i4.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c5(this, "extractTxHashesFromResult", (t, e2) => {
      var s3;
      try {
        if (!e2) return [];
        const i4 = t.method, r3 = yt2[i4];
        if (i4 === "sui_signTransaction") return [ff(e2.transactionBytes)];
        if (i4 === "near_signTransaction") return [cf(e2)];
        if (i4 === "near_signTransactions") return e2.map((a3) => cf(a3));
        if (i4 === "xrpl_signTransactionFor" || i4 === "xrpl_signTransaction") return [(s3 = e2.tx_json) == null ? void 0 : s3.hash];
        if (i4 === "polkadot_signTransaction") return [Ka({ transaction: t.params.transactionPayload, signature: e2.signature })];
        if (i4 === "algo_signTxn") return me2(e2) ? e2.map((a3) => af(a3)) : [af(e2)];
        if (i4 === "cosmos_signDirect") return [uf(e2)];
        if (typeof e2 == "string") return [e2];
        const n5 = e2[r3.key];
        if (me2(n5)) return i4 === "solana_signAllTransactions" ? n5.map((a3) => sf(a3)) : n5;
        if (typeof n5 == "string") return [n5];
      } catch (i4) {
        this.client.logger.warn("Error extracting tx hashes from result", i4);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o4 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o4);
      for (const [e2, s3] of Object.entries(t)) for (const i4 of s3) try {
        await this.onProviderMessageEvent({ topic: e2, message: i4, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e2}, message: ${i4}`);
      }
    } catch (o4) {
      this.client.logger.warn("processPendingMessageEvents failed", o4);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o4 } = Et2("NOT_INITIALIZED", this.name);
      throw new Error(o4);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C3.message, (o4) => {
      this.onProviderMessageEvent(o4);
    });
  }
  async onRelayMessage(o4) {
    const { topic: t, message: e2, attestation: s3, transportType: i4 } = o4, { publicKey: r3 } = this.client.auth.authKeys.keys.includes(pe4) ? this.client.auth.authKeys.get(pe4) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n5 = await this.client.core.crypto.decode(t, e2, { receiverPublicKey: r3, encoding: i4 === ee2.link_mode ? De2 : Qt2 });
      isJsonRpcRequest(n5) ? (this.client.core.history.set(t, n5), await this.onRelayEventRequest({ topic: t, payload: n5, attestation: s3, transportType: i4, encryptedId: zc(e2) })) : isJsonRpcResponse(n5) ? (await this.client.core.history.resolve(n5), await this.onRelayEventResponse({ topic: t, payload: n5, transportType: i4 }), this.client.core.history.delete(t, n5.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n5, transportType: i4 }), await this.client.core.relayer.messages.ack(t, e2);
    } catch (n5) {
      this.client.logger.error(n5);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(q.expired, async (o4) => {
      const { topic: t, id: e2 } = si(o4.target);
      if (e2 && this.client.pendingRequest.keys.includes(e2)) return await this.deletePendingSessionRequest(e2, Et2("EXPIRED"), true);
      if (e2 && this.client.auth.requests.keys.includes(e2)) return await this.deletePendingAuthRequest(e2, Et2("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e2 && (await this.deleteProposal(e2, true), this.client.events.emit("proposal_expire", { id: e2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(ae2.create, (o4) => this.onPairingCreated(o4)), this.client.core.pairing.events.on(ae2.delete, (o4) => {
      this.addToRecentlyDeleted(o4.topic, "pairing");
    });
  }
  isValidPairingTopic(o4) {
    if (!it2(o4, false)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `pairing topic should be a string: ${o4}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o4)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o4}`);
      throw new Error(t);
    }
    if (fi(this.client.core.pairing.pairings.get(o4).expiry)) {
      const { message: t } = Et2("EXPIRED", `pairing topic: ${o4}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o4) {
    if (!it2(o4, false)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `session topic should be a string: ${o4}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o4), !this.client.session.keys.includes(o4)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `session topic doesn't exist: ${o4}`);
      throw new Error(t);
    }
    if (fi(this.client.session.get(o4).expiry)) {
      await this.deleteSession({ topic: o4 });
      const { message: t } = Et2("EXPIRED", `session topic: ${o4}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o4)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o4}`);
      throw await this.deleteSession({ topic: o4 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o4) {
    if (this.checkRecentlyDeleted(o4), this.client.session.keys.includes(o4)) await this.isValidSessionTopic(o4);
    else if (this.client.core.pairing.pairings.keys.includes(o4)) this.isValidPairingTopic(o4);
    else if (it2(o4, false)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o4}`);
      throw new Error(t);
    } else {
      const { message: t } = Et2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o4}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o4) {
    if (!Ia(o4)) {
      const { message: t } = Et2("MISSING_OR_INVALID", `proposal id should be a number: ${o4}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o4)) {
      const { message: t } = Et2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o4}`);
      throw new Error(t);
    }
    if (fi(this.client.proposal.get(o4).expiryTimestamp)) {
      await this.deleteProposal(o4);
      const { message: t } = Et2("EXPIRED", `proposal id: ${o4}`);
      throw new Error(t);
    }
  }
};
var ks2 = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, dt3, we4), this.core = o4, this.logger = t;
  }
};
var It4 = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, ut3, we4), this.core = o4, this.logger = t;
  }
};
var Ds = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, wt3, we4, (e2) => e2.id), this.core = o4, this.logger = t;
  }
};
var Ls2 = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, Et3, le4, () => pe4), this.core = o4, this.logger = t;
  }
};
var Ms2 = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, St4, le4), this.core = o4, this.logger = t;
  }
};
var $s2 = class extends Ui2 {
  constructor(o4, t) {
    super(o4, t, Rt4, le4, (e2) => e2.id), this.core = o4, this.logger = t;
  }
};
var Ks2 = Object.defineProperty;
var Us = (E3, o4, t) => o4 in E3 ? Ks2(E3, o4, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o4] = t;
var Ke4 = (E3, o4, t) => Us(E3, typeof o4 != "symbol" ? o4 + "" : o4, t);
var Gs = class {
  constructor(o4, t) {
    this.core = o4, this.logger = t, Ke4(this, "authKeys"), Ke4(this, "pairingTopics"), Ke4(this, "requests"), this.authKeys = new Ls2(this.core, this.logger), this.pairingTopics = new Ms2(this.core, this.logger), this.requests = new $s2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var js2 = Object.defineProperty;
var Fs = (E3, o4, t) => o4 in E3 ? js2(E3, o4, { enumerable: true, configurable: true, writable: true, value: t }) : E3[o4] = t;
var f6 = (E3, o4, t) => Fs(E3, typeof o4 != "symbol" ? o4 + "" : o4, t);
var fe4 = class _fe extends J {
  constructor(o4) {
    super(o4), f6(this, "protocol", Ce3), f6(this, "version", ke3), f6(this, "name", me4.name), f6(this, "metadata"), f6(this, "core"), f6(this, "logger"), f6(this, "events", new import_events8.EventEmitter()), f6(this, "engine"), f6(this, "session"), f6(this, "proposal"), f6(this, "pendingRequest"), f6(this, "auth"), f6(this, "signConfig"), f6(this, "on", (e2, s3) => this.events.on(e2, s3)), f6(this, "once", (e2, s3) => this.events.once(e2, s3)), f6(this, "off", (e2, s3) => this.events.off(e2, s3)), f6(this, "removeListener", (e2, s3) => this.events.removeListener(e2, s3)), f6(this, "removeAllListeners", (e2) => this.events.removeAllListeners(e2)), f6(this, "connect", async (e2) => {
      try {
        return await this.engine.connect(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "pair", async (e2) => {
      try {
        return await this.engine.pair(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "approve", async (e2) => {
      try {
        return await this.engine.approve(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "reject", async (e2) => {
      try {
        return await this.engine.reject(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "update", async (e2) => {
      try {
        return await this.engine.update(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "extend", async (e2) => {
      try {
        return await this.engine.extend(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "request", async (e2) => {
      try {
        return await this.engine.request(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "respond", async (e2) => {
      try {
        return await this.engine.respond(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "ping", async (e2) => {
      try {
        return await this.engine.ping(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "emit", async (e2) => {
      try {
        return await this.engine.emit(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "disconnect", async (e2) => {
      try {
        return await this.engine.disconnect(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "find", (e2) => {
      try {
        return this.engine.find(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e2) {
        throw this.logger.error(e2.message), e2;
      }
    }), f6(this, "authenticate", async (e2, s3) => {
      try {
        return await this.engine.authenticate(e2, s3);
      } catch (i4) {
        throw this.logger.error(i4.message), i4;
      }
    }), f6(this, "formatAuthMessage", (e2) => {
      try {
        return this.engine.formatAuthMessage(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "approveSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.approveSessionAuthenticate(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), f6(this, "rejectSessionAuthenticate", async (e2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e2);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), this.name = (o4 == null ? void 0 : o4.name) || me4.name, this.metadata = Ks(o4 == null ? void 0 : o4.metadata), this.signConfig = o4 == null ? void 0 : o4.signConfig;
    const t = typeof (o4 == null ? void 0 : o4.logger) < "u" && typeof (o4 == null ? void 0 : o4.logger) != "string" ? o4.logger : (0, import_pino2.default)(k2({ level: (o4 == null ? void 0 : o4.logger) || me4.logger }));
    this.core = (o4 == null ? void 0 : o4.core) || new ta2(o4), this.logger = E2(t, this.name), this.session = new It4(this.core, this.logger), this.proposal = new ks2(this.core, this.logger), this.pendingRequest = new Ds(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Gs(this.core, this.logger);
  }
  static async init(o4) {
    const t = new _fe(o4);
    return await t.initialize(), t;
  }
  get context() {
    return y2(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o4) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o4.message), o4;
    }
  }
};
var Qs2 = It4;
var Hs = fe4;
export {
  ft2 as AUTH_CONTEXT,
  Et3 as AUTH_KEYS_CONTEXT,
  St4 as AUTH_PAIRING_TOPIC_CONTEXT,
  _t3 as AUTH_PROTOCOL,
  pe4 as AUTH_PUBLIC_KEY_NAME,
  Rt4 as AUTH_REQUEST_CONTEXT,
  le4 as AUTH_STORAGE_PREFIX,
  Ns2 as AUTH_VERSION,
  gt3 as ENGINE_CONTEXT,
  M4 as ENGINE_QUEUE_STATES,
  P4 as ENGINE_RPC_OPTS,
  Ts as HISTORY_CONTEXT,
  Is as HISTORY_EVENTS,
  qs2 as HISTORY_STORAGE_VERSION,
  mt2 as METHODS_TO_VERIFY,
  dt3 as PROPOSAL_CONTEXT,
  Ps2 as PROPOSAL_EXPIRY,
  Me4 as PROPOSAL_EXPIRY_MESSAGE,
  wt3 as REQUEST_CONTEXT,
  ut3 as SESSION_CONTEXT,
  B2 as SESSION_EXPIRY,
  _e3 as SESSION_REQUEST_EXPIRY_BOUNDARIES,
  De4 as SIGN_CLIENT_CONTEXT,
  me4 as SIGN_CLIENT_DEFAULT,
  Rs as SIGN_CLIENT_EVENTS,
  Ce3 as SIGN_CLIENT_PROTOCOL,
  vs as SIGN_CLIENT_STORAGE_OPTIONS,
  we4 as SIGN_CLIENT_STORAGE_PREFIX,
  ke3 as SIGN_CLIENT_VERSION,
  Qs2 as SessionStore,
  Hs as SignClient,
  yt2 as TVF_METHODS,
  Le3 as WALLETCONNECT_DEEPLINK_CHOICE,
  fe4 as default
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=@walletconnect_sign-client.js.map
